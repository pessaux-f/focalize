#**********************************************************************#
#                                                                      #
#                        FoCaLiZe compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2008 INRIA                                                #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

#  $Id: README_FOR_DEVELOPERS,v 1.15 2010-07-29 08:03:22 weis Exp $

# The name of the file says why and for who it was written :)

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
 "http://www.w3.org/TR/REC-html40/loose.dtd">

<HTML>

<HEAD>
<META name="GENERATOR" content="Htmlc $htmlc_version"/>
<META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>

<TITLE>
Read me for developers
</TITLE>

</HEAD>

<BODY BGCOLOR="#FFFFFF">

<H2>How to use the FoCaLiZe Makefile</H2>

  <H3>Cleaning</H3>

  Two main targets: clean and distclean.

     <OL>
       <LI>clean: cleans the internal tools, i.e. zenon, zvtov, focalizec and
           focalizedep.
           You should launch <code>make</code> to rebuild the internal tools.
       <LI>distclean: cleans every thing (internal and external tools).
           You should reconfigure the software and recompile everything
           afterwards.
     </OL>

  The target clean is a synonym for clean_internal_tools.

  The target distclean is a synonym for distclean_external_tools then
  clean_internal_tools for consistency.

  <P>Other cleaning targets:
  <UL>
    <LI>clean_internal_tools: performs clean_zenon clean_zvtov
    <LI>clean_deliverables: clean_focalizec clean_focalizedep
    <LI>clean_external_tools: clean external tools (Ocaml, CamlP5, Coq),
        (then clean internal_tools for consistency).
    <LI>clean_zenon clean_zvtov clean_focalizec clean_focalizedep: specific
        targets for cleaning internal tools and deliverables.
  </UL>
  </P>

  <H3>Making</H3>

  <P>
  Two main targets: "default" (got via <code>make</code>) and install (got
  via <code>make</code> install).

  <OL>
    <LI>default: build the internal tools.
    <LI>install: install FoCaLiZe its tools and documentation.
  </OL>
  </P>

<H2>The internals of configuration</H2>

<P>The initial mandatory data to configure and compile are written by hand in
the shell script file <CODE>.project_config_var</CODE> in the root directory
of the distribution. This script defines two sub-routines set_project_id and
set_intrinsic_defaults.

<P>The <CODE>configure</CODE> shell script loads
<CODE>.project_config_var</CODE> and runs the two procedures to define the
set of shell variables.

<P>After various validity checks and argument treatment, the final part of
the <CODE>configure</CODE> script records all the configuration variables
into the file <CODE>./.config_var</CODE>, via sed-edition of the template
file <CODE>./.config_var.in</CODE>.

<P>All the Makefiles in the project always starts by loading the
<CODE>./.config_var</CODE> file to define the mandatory variables. (Hence
<CODE>.config_var</CODE> is in fact a valid Makefile.)

<P><CODE>configure</CODE> also creates the file
<CODE>./.config_var_for_shell</CODE> which has a slightly different quotation
strategy, more suitable for script shells. (Hence
<CODE>.config_var_for_shell</CODE> is a valid shell script.)

<H2>The building phase</H2>

<P>The building phase must compile the FoCaLiZe compiler
(<CODE>focalizec</CODE>) and its associated dependency compiler
(<CODE>focalizedep</CODE>). To achieve this goal, we MUST have the suitable
Caml compiler to compile it; we also need the suitable Coq compiler
(<CODE>coqc</CODE>) and the mandatory internal tools Zenon and
<CODE>zvtov</CODE> in order to compile and certify the FoCaLiZe libraries.

So, the necessary building sequence is as follows:
<UL>
  <LI>compile and install the relevant Caml compiler;
  <LI>compile with the preceding installed Caml compiler the CamlP5 tool required
  by Coq (Coq needs CamlP5 both at compile time and at run-time);
  <LI>compile and install the right version of Coq, the one required to check
  the proofs generated by our compiler;
  <LI>compile and install Zenon and Zvtov that generate the proofs for the
  preceding Coq compiler;
  <LI>finally compile and install focalizec that will call all the tools when
  needed (both at run-time and at build time).
</UL>

<P>I am not aware of any way to perform a complete focalizec build without
installing the external (Caml, CamlP5 and Coq) and internal tools (zenon,
zvtov) during the building phase. Hence, there is here an awkward mess of
successive building and installing steps which is not the usual way of
installing software.

<P>As a consequence, you need rights to install during the building phase
(once more, if you find a way to avoid this, please tell me how). That's why
we must install the tools in a sub directory of the user's home dir (which is
not satisfactory, since it prevents sharing the tools by all the users). The
only undesirable alternative is to run the building phase with root
priviledges (which is now considered by many as a major security flaw).

<P>If you plan to solve these problems, please go ahead, but keep in mind
the following facts:

<BR>focalizec generates Caml code which is more or less specific to a given
Caml compiler (not that critical in practice, since the generated code tends
to be fairly portable as far as Caml version is concerned); but

<BR>focalizec do also generate some interface code for a specific
zenon/zvtov pair;

<BR>the zenon/zvtov pair generates proofs for a specific version of Coq.

<BR>Furthermore, the version of the various tools used during the building
phase should be exactly the same as the tools used at run-time
to compile the user FoCaLiZe source code (indeed the FoCaLiZe compiled
libraries should be compatible with the newly compiled user's code).

<H2>How to get the current branch release for FoCaLiZe</H2>

<PRE>
# Go to the FoCaLiZe sources directory
cd ~/src/focalize

# Create a distribution sub directory to check out the distribution branch.
mkdir distribution
cd distribution

# Checkout a fresh distribution branch.
# (Change the name "weis" by your own login name on our CVS server
# modulogic.inria.fr)

cvs -d weis@modulogic.inria.fr:/home/cvs \
 co -r branch_focalize_release_0_6_0 -d focalize.0.6.0 focalize

# You also need the htmlc batch editor, which is in the Caml bazar.
# The simplest way to get htmlc is
   cd ~/src
   cvs -d :pserver:anoncvs@camlcvs.inria.fr:/caml co bazar-ocaml

   # Then go to the htmlc directory and 
   cd ~/src/bazar-ocaml/htmlc
   ./configure
   make
   make install

# Configure the FoCaLiZe and compile it
cd focalize.0.6.0
./configure
make

# If necessary install it
make install
</PRE>

<P>More precisely
<PRE>
cvs -d weis@modulogic.inria.fr:/home/cvs \
 co -r tag_cvs -d directory module
</PRE>
</P>
<P>
For us, the module name is always "focalize". We can safely choose the
"directory" name as being the cvs tag of the cvs tree we want, hence write
<PRE>
cvs -d weis@modulogic.inria.fr:/home/cvs \
 co -r tag_cvs -d tag_cvs focalize
</PRE>
</P>

<H2>How to use the FoCaLiZe <code>doc_src</code> Makefile</H2>

  <P>The <code>doc_src</code> directory contains the Web site of the project.
  </P>

  <H3>Architecture</H3>

  <P>The web site is organized in several sub directories: each
  directory being the target of a menu item of the main index page (or of a
  sub-index page, if we need one in the future).
  The source of the web site pages are files with extension
  <code>.shtml</code>; the <code>.html</code> pages are thus generated from
  those <code>.shtml</code> thanks to the <code>htmlc</code> text file
  generator (from bazar-ocaml).
  </P>

  <P>Warning: <code>.html</code> files are made read-only by
  <code>htmlc</code> as they are generated, and thus must not be edited! Only
  <code>.shtml</code> files can be edited.
  </P>

  <H3>Making</H3>

  <P>Two main targets: "default" (got via <code>make</code>) and install (got
  via <code>make</code> install).

  <OL>
    <LI>default: use <code>htmlc</code> to build the web site pages.
    <LI>install: install the web site pages on the http server using the Unix
    command <code>scp</code>.
  </OL>
  </P>

  <P>Note:
  by default "scp" uses your local machine login name to contact the http
  server. Thus, if your login name on the server is different then you need
  to define it while launching <code>make</code>, using:
  <br />
<pre>
make \
  PROJECT_WEB_TARGET_DIR='serverloginname@$(PROJECT_WEB_SERVER):$(PROJECT_WEB_SITE_DIR)' \
  install
</pre>
  (where <code>$(PROJECT_WEB_SERVER)</code> and
  <code>$(PROJECT_WEB_SITE_DIR)</code> are variables you should write
  verbatim here: they are already known by the <code>doc_src/Makefile</code>
  file and <code>make</code> automatically handles them for you).
  </P>

  <H3>Cleaning</H3>

  <P>The target "clean" removes the compiled <code>.html</code> files
  from the <code>doc_src</code> hirearchy.
  </P>

<H2>How to add a new directory to the FoCaLiZe hierarchy</H2>

<P>Configuration and compilation is automatic in FoCaLiZe: there is a list of
sub-directories that are visited to perform the necessary tasks. If you add a
new directory you should add it to this list. The list is in a file named
<CODE>.configure</CODE> in the top directory of the main directory of the sub
hierarchy where you add the new directory. The file <CODE>.configure</CODE>
starts with a dot since there is nothing to change or read here for the
FoCaLiZe users: this is developpers only business. As an example, the
<CODE>.configure</CODE> file in the directory <CODE>focalizec</CODE> is
something like this:

<PRE>
#!/bin/sh

#**********************************************************************#
#                                                                      #
#                        FoCaLiZe compiler                             #
...

# The file .config_var has been built by configure. We load it.
. ./.config_var_for_shell

SUB_DIRS="\
  src/basement src/parser src/typing \
  src/docgen src/commoncodegen src/mlcodegen src/coqcodegen \
  src/toplevel src/focalizedep \
  doc_src \
  doc_src/tex doc_src/html doc_src/man \
  doc_src/tex/refman \
  doc_src/tex/tutorial \
  src/stdlib \
  src/extlib src/extlib/algebra src/extlib/access_control \
  src/contribs \
  src/contribs/automata src/contribs/utils src/contribs/voter \
"

# Touching .depend files to oblige make to redo dependencies
touch .depend

...
</PRE>

<P>You must add the new directory in the list <CODE>SUB_DIRS</CODE> at its
proper place in the list. Note also, that you must also add all the sub
directories of the new directory if any.

<H2>How to release</H2>

<P>When a release is to be completed, and preferably before branching, you must
consolidate the version number of every component of FoCaLiZe.
<BR>For each component, this means to edit the file
<CODE>.project_config_var</CODE> to verify that this file indicates the
correct current version of the tool.

<P>For the entire FoCaLiZe system, it means to edit and verify the following
files:
<OL>
  <LI><CODE>./.project_config_var</CODE> (the version for FoCaLiZe is in this
  file)
  <LI><CODE>zenon/.project_config_var</CODE> (the version for zenon is in the
      file <CODE>versionnum.ml</CODE>)
  <LI><CODE>zvtov/.project_config_var</CODE> (the version for zvtov is in the
      file <CODE>version.ml</CODE>)
  <LI><CODE>${FOCALIZEC_NAME}/.project_config_var</CODE> (the version for
      <CODE>${FOCALIZEC_NAME}</CODE> is in the file
      <CODE>src/basement/configuration.ml</CODE>)
</OL>

<P>The Release documentation has to be recompiled with the new version
numbers. You need to
<UL>
 <LI>edit the version files:
    <OL>
     <LI>
       <CODE>.project_config_var</CODE> (change the bindings of variables
       <CODE>VERSION_NUMBER_MAIN</CODE>,
       <CODE>VERSION_NUMBER_SUB</CODE>, and
       <CODE>VERSION_NUMBER_PATCH</CODE>
       ).

     <LI><CODE>$ROOT_DIR/focalizec/doc_src/man/focalizec.env</CODE> (
       change the definition
       <CODE>let focalizec_version = "0.6.0";;</CODE>
       ).

     <LI><CODE>$ROOT_DIR/focalizec/doc_src/tex/refman/macros.tex</CODE> (
       change the definitions
       <CODE>\def\month{December}</CODE>
       <CODE>\def\year{2009}</CODE>
       <CODE>\def\focalversion{\sf 0.6.0}</CODE>
       ).

     <LI><CODE>$ROOT_DIR/focalizec/doc_src/tex/refman/macros.hva</CODE> (
       change the definitions
       <CODE>\def\month{December}</CODE>
       <CODE>\def\year{2009}</CODE>
       <CODE>\def\focalversion{\sf 0.6.0}</CODE>
       ).

     <LI><CODE>$ROOT_DIR/focalizec/doc_src/tex/tutorial/macros.tex</CODE> (
       change the definitions
       <CODE>\def\month{December}</CODE>
       <CODE>\def\year{2009}</CODE>
       <CODE>\def\focalversion{\sf 0.6.0}</CODE>
       ).     
    </OL>
 <LI><CODE>make docdir</CODE>
 <LI>cvs commit -m 'New release X.X.X.'
</UL>

<P>Who said «This version handling stuff could be simpler!?»

</BODY>
</HTML>
