#**********************************************************************#
#                                                                      #
#                        FoCaLiZe compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2008 INRIA                                                #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

#  $Id: README_FOR_DEVELOPERS,v 1.9 2009-12-04 11:00:40 weis Exp $

# The name of the file says why and for who it was written :)

<H2>How to use the FoCaLiZe Makefile</H2>

  <H3>Cleaning</H3>

  Two main targets: clean and distclean.

     <OL>
       <LI>clean: cleans the internal tools, i.e. zenon, zvtov, focalizec and
           focalizedep.
           You should launch <code>make</code> to rebuild the internal tools.
       <LI>distclean: cleans every thing (internal and external tools).
           You should reconfigure the software and recompile everything
           afterwards.
     </OL>

  The target clean is a synonym for clean_internal_tools.

  The target distclean is a synonym for distclean_external_tools then
  clean_internal_tools for consistency.

  <P>Other cleaning targets:
  <UL>
    <LI>clean_internal_tools: performs clean_zenon clean_zvtov clean_focalizec
    <LI>clean_external_tools: clean external tools (Ocaml, CamlP5, Coq),
        (then clean internal_tools for consistency).
    <LI>clean_zenon clean_zvtov clean_focalizec: specific targets for cleaning
        internal tools.
  </UL>
  </P>

  <H3>Making</H3>

  <P>
  Two main targets: "default" (got via <code>make</code>) and install (got
  via <code>make</code> install).

  <OL>
    <LI>default: build the internal tools.
    <LI>install: install FoCaLiZe its tools and documentation.
  </OL>
  </P>

<H2>How to get the current branch release for FoCaLiZe</H2>

<PRE>
# Go to the FoCaLiZe sources directory
cd ~/src/focalize

# Create a distribution sub directory to check out the distribution branch.
mkdir distribution
cd distribution

# Checkout a fresh distribution branch.
# (Change the name "weis" by your own login name on our CVS server modulogic.inria.fr)

cvs -d weis@modulogic.inria.fr:/home/cvs \
 co -r branch_focalize_release_0_1_rc0 -d focalize.0.1.rc0 focalize

# You also need the htmlc batch editor, which is in the Caml bazar.
# The simplest way to get it is
cd ~/src
cvs -d :pserver:anoncvs@camlcvs.inria.fr:/caml co bazar-ocaml

# Then go to the htmlc directory and 
cd ~/src/bazar-ocaml/htmlc
./configure
make
make install

# Configure and compile it
cd focalize.0.1.rc0
./configure
make

# If necessary install it
make install
</PRE>

<P>More precisely
<PRE>
cvs -d weis@modulogic.inria.fr:/home/cvs \
 co -r tag_cvs -d directory module
</PRE>
</P>
<P>
For us, the module name is always "focalize". We can safely choose the
"directory" name as being the cvs tag of the cvs tree we want, hence write
<PRE>
cvs -d weis@modulogic.inria.fr:/home/cvs \
 co -r tag_cvs -d tag_cvs focalize
</PRE>
</P>

<H2>How to use the FoCaLiZe <code>doc_src</code> Makefile</H2>

  <P>The <code>doc_src</code> directory contains the Web site of the project.
  </P>

  <H3>Architecture</H3>

  <P>The web site is organized in several sub directories: each
  directory being the target of a menu item of the main index page (or of a
  sub-index page, if we need one in the future).
  The source of the web site pages are files with extension
  <code>.shtml</code>; the <code>.html</code> pages are thus generated from
  those <code>.shtml</code> thanks to the <code>htmlc</code> text file
  generator (from bazar-ocaml).
  </P>

  <P>Warning: <code>.html</code> files are made read-only by <code>htmlc</code> as
  they are generated, and thus must not be edited! Only
  <code>.shtml</code> files can be edited.
  </P>

  <H3>Making</H3>

  <P>Two main targets: "default" (got via <code>make</code>) and install (got
  via <code>make</code> install).

  <OL>
    <LI>default: use <code>htmlc</code> to build the web site pages.
    <LI>install: install the web site pages on the http server using the Unix
    command <code>scp</code>.
  </OL>
  </P>

  <P> Note:
  by default "scp" uses your local machine login name to contact the http
  server. Thus, if your login name on the server is different then you need
  to define it while launching <code>make</code>, using:
  <br />
<pre>
make \
  PROJECT_WEB_TARGET_DIR='serverloginname@$(PROJECT_WEB_SERVER):$(PROJECT_WEB_SITE_DIR)' \
  install
</pre>
  (where <code>$(PROJECT_WEB_SERVER)</code> and
  <code>$(PROJECT_WEB_SITE_DIR)</code> are variables you should write
  verbatim here: they are already known by the <code>doc_src/Makefile</code>
  file and <code>make</code> automatically handles them for you).
  </P>

  <H3>Cleaning</H3>

  <P>The target "clean" removes the compiled <code>.html</code> files
  from the <code>doc_src</code> hirearchy.
  </P>

<H2>How to add a new directory to the FoCaLiZe hierarchy</H2>

<P>Configuration and compilation is automatic in FoCaLiZe: there is a list of
sub-directories that are visited to perform the necessary tasks. If you add a
new directory you should add it to this list. The list is in a file named
<CODE>.configure</CODE> in the top directory of the main directory of the sub
hierarchy where you add the new directory. The file <CODE>.configure</CODE>
starts with a dot since there is nothing to change or read here for the
FoCaLiZe users: this is developpers only business. As an example, the
<CODE>.configure</CODE> file in the directory <CODE>focalizec</CODE> is
something like this:

<PRE>
#!/bin/sh

#**********************************************************************#
#                                                                      #
#                        FoCaLize compiler                             #
...

# The file .config_var has been built by configure. We load it.
. ./.config_var_for_shell

SUB_DIRS="\
  src/basement src/parser src/typing \
  src/docgen src/commoncodegen src/mlcodegen src/coqcodegen \
  src/toplevel src/focalizedep \
  doc_src \
  doc_src/tex doc_src/html doc_src/man \
  doc_src/tex/refman \
  doc_src/tex/tutorial \
  src/stdlib \
  src/extlib src/extlib/algebra src/extlib/access_control \
  src/contribs \
  src/contribs/automata src/contribs/utils src/contribs/voter \
"

# Touching .depend files to oblige make to redo dependencies
touch .depend

...
</PRE>
<P>You must add the new directory in the list <CODE>SUB_DIRS</CODE> at its
proper place in the list. Note also, that you must also add all the sub
directories of the new directory if any.

<H2>How to release</H2>

<P>When a release is to be completed, and preferably before branching, you must
consolidate the version number of every component of FoCaLiZe.
<BR>For each component, this means to edit the file
<CODE>.project_config_var</CODE> to verify that this file indicates the
correct current version of the tool.

<P>For the entire FoCaLiZe system, it means to edit and verify the following files:
<OL>
  <LI><CODE>./.project_config_var</CODE> (the version for FoCaLiZe is in this file)
  <LI><CODE>zenon/.project_config_var</CODE> (the version for zenon is in the
      file <CODE>versionnum.ml</CODE>)
  <LI><CODE>zvtov/.project_config_var</CODE> (the version for zvtov is in the
      file <CODE>version.ml</CODE>)
  <LI><CODE>${FOCALIZEC_NAME}/.project_config_var</CODE> (the version for
      <CODE>${FOCALIZEC_NAME}</CODE> is in the file
      <CODE>src/basement/configuration.ml</CODE>)
</OL>

<P>The Release documentation has to be recompiled witht the new version
numbers. You need to
<UL>
 <LI>edit the version files:
    <OL>
     <LI>
       <CODE>.project_config_var</CODE> (change the bindings of variables
       <CODE>VERSION_NUMBER_MAIN</CODE>,
       <CODE>VERSION_NUMBER_SUB</CODE>, and
       <CODE>VERSION_NUMBER_PATCH</CODE>
       ).

     <LI><CODE>$ROOT_DIR/focalizec/doc_src/man/focalizec.env</CODE> (
       change the definition
       <CODE>let focalizec_version = "0.6.0";;</CODE>
       ).

     <LI><CODE>$ROOT_DIR/focalizec/doc_src/tex/refman/macros.tex</CODE> (
       change the definitions
       <CODE>\def\month{December}</CODE>
       <CODE>\def\year{2009}</CODE>
       <CODE>\def\focalversion{\sf 0.6.0}</CODE>
       ).

     <LI><CODE>$ROOT_DIR/focalizec/doc_src/tex/refman/macros.hva</CODE> (
       change the definitions
       <CODE>\def\month{December}</CODE>
       <CODE>\def\year{2009}</CODE>
       <CODE>\def\focalversion{\sf 0.6.0}</CODE>
       ).

     <LI><CODE>$ROOT_DIR/focalizec/doc_src/tex/tutorial/macros.tex</CODE> (
       change the definitions
       <CODE>\def\month{December}</CODE>
       <CODE>\def\year{2009}</CODE>
       <CODE>\def\focalversion{\sf 0.6.0}</CODE>
       ).     
    </OL>
 <LI><CODE>make docdir</CODE>
 <LI>cvs commit -m 'New release X.X.X.'
</UL>

<P>Who said «This version handling stuff cannot be simpler ?»
