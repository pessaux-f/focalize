#**********************************************************************#
#                                                                      #
#                        FoCaLize compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2008 INRIA                                                #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

#  $Id: README_FOR_DEVELOPERS,v 1.5 2009-03-16 16:40:31 weis Exp $

# The name of the file says why and for who it was written :)

<H2>How to use the Focalize Makefile</H2>

  <H3>Cleaning</H3>

  Two main targets: clean and distclean.

     <OL>
       <LI>clean: cleans (internal tools), i.e. zenon zvtov and focalizec.
           You should launch make to rebuild internal tools.
       <LI>distclean: cleans every thing (internal and external tools).
           You should reconfigure the software and recompile everything
           afterwards.
     </OL>

  The target clean is a synonym for clean_internal_tools, 

  The target distclean is a synonym for distclean_external_tools then
  clean_internal_tools for consistency.

  <P>Other cleaning targets:
  <UL>
    <LI>clean_internal_tools: performs clean_zenon clean_zvtov clean_focalizec
    <LI>clean_external_tools: clean external tools (Ocaml, CamlP5, Coq),
        (then clean internal_tools for consistency).
    <LI>clean_zenon clean_zvtov clean_focalizec: specific targets for cleaning
        internal tools.
  </UL>
  </P>

  <H3>Making</H3>

  <P>
  Two main targets: "default" (got via make) and install (got via make install).

  <OL>
    <LI>default: build the internal tools.
    <LI>install: install focalizec and its documentation.
  </OL>
  </P>

<H2>How to get the current branch release for focalize</H2>

<PRE>
# Go to the focalize sources directory
cd ~/src/focalize

# Create a distribution sub directory to check out the distribution branch.
mkdir distribution
cd distribution

# Checkout a fresh distribution branch.
# (Change the name "weis" by your own login name on our CVS server modulogic.inria.fr)

cvs -d weis@modulogic.inria.fr:/home/cvs \
 co -r branch_focalize_release_0_1_rc0 -d focalize.0.1.rc0 focalize

# Configure and compile it
cd focalize.0.1.rc0
./configure
make

# If necessary install it
make install
</PRE>

More precisely
<PRE>
cvs -d weis@modulogic.inria.fr:/home/cvs \
 co -r tag_cvs -d directory module
</PRE>

<P>
For us, the module name is always "focalize". We can safely choose the
"directory" name as being the cvs tag of the cvs tree we want, hence write
<PRE>
cvs -d weis@modulogic.inria.fr:/home/cvs \
 co -r tag_cvs -d tag_cvs focalize
</PRE>


<H2>How to use the Focalize <code>doc_src</code> Makefile</H2>

  <H3>Architecture</H3>

  <P>The web site is organized in several sub directories: each
  directory being the target of a menu item. The source of the web
  site pages are files with extension <code>.shtml</code>; the html
  pages are thus generated from those <code>.shtml</code> thanks to
  htmlc (from bazar-ocaml).
  </P>

  <P>Warning: <code>.html</code> files are made read-only by htmlc as
  they are generated, and thus must not be edited! Only
  <code>.shtml</code> can be edited.
  </P>

  <H3>Making</H3>

  <P>Two main targets: "default" (got via make) and install (got via
    make install).

  <OL>
    <LI>default: use htmlc to build the web site pages.
    <LI>install: install the web site pages on the http server using
        "scp". By default "scp" uses your local machine login name, if
        your login name on the server is different then you need to
	define it while launching make, using: <br />
	<pre>
	make PROJECT_WEB_TARGET_DIR='serverloginname@$(PROJECT_WEB_SERVER):$(PROJECT_WEB_SITE_DIR)' install
	</pre>
	where $(PROJECT_WEB_SERVER) and $(PROJECT_WEB_SITE_DIR) are
	variables known by <code>doc_src/Makefile</code>.
  </OL>
  </P>

  <H3>Cleaning</H3>

  <P>The target "clean" removes the compiled <code>.html</code> files
  from the <code>doc_src</code> hirearchy.
  </P>
