#**********************************************************************#
#                                                                      #
#                        FoCaLiZe compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2008 LIP6 and INRIA                                       #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

# $Id: Makefile.common,v 1.35 2012-02-10 15:01:57 pessaux Exp $

BIN_OBJS = $(BYT_OBJS:.cmo=.cmx)

.PHONY: all byt bin
.PHONY: clean unconfigure distclean install uninstall
.PHONY: clean-local unconfigure-local distclean-local install-local uninstall-local
.PHONY: doc docdir odoc depend tests lib

all: all-local byt bin

all-local:

byt: $(BYT_OBJS)

bin: $(BIN_OBJS)

doc docdir odoc: $(BYT_OBJS)

odoc: $(BYT_OBJS)
#	$(MKDIR) odoc &&\
#	echo "caml_doc_compiler is $(CAML_DOC_COMPILER)" >&2 &&\
#	echo "caml_doc is $(CAML_DOC)" >&2 &&\
#	$(CAML_DOC) $(CAML_INCLUDES) -html -d odoc $(BYT_OBJS:.cmo=.ml)

clean-local:

clean: clean-local
	@$(RM) *.cm* *.o *.a *.annot *.out *.output *.bin *.byt
	$(RM) *.vo *.fo *~ .*~ log *.mangled *.coz *.fcd
	if test -d tests; then\
	  for i in tests; do\
	    echo "--> $$i ..." >&2 &&\
	    ($(CD) $$i && $(MAKE) $@);\
	    err=$$?;\
	    echo "<-- $$i [$$err]" >&2;\
	    case $$err in 0);; *) exit $$err;; esac;\
	  done;\
	fi &&\
	if test -d odoc; then\
	  $(RM) odoc/*;\
	fi &&\
	if test -d doc; then\
	  $(RM) doc;\
	fi

unconfigure-local:

unconfigure: unconfigure-local
#	$(RM) .config_var .config_var_for_shell .done_*


distclean-local: clean

distclean: distclean-local
#	$(RM) .\#* *.pfc

install-local:

install: install-local

uninstall-local:

uninstall: uninstall-local

depend: depend-local
#depend:
#	$(CAML_DEP) *.mli *.ml > ./.depend
#	$(FOCALIZE_DEP) *.fcl > ./.depend

# Only on demand.
tests:
	if test -d tests; then\
	  for i in tests; do\
	    echo "--> $$i ..." >&2 &&\
	    ($(CD) $$i && $(MAKE) all);\
	    err=$$?;\
	    echo "<-- $$i [$$err]" >&2;\
	    case $$err in 0);; *) exit $$err;; esac;\
	  done;\
	else\
	  echo "No directory tests to perform tests";\
	fi

.SUFFIXES: .ml .mli .mll .mly .cmo .cmi .cmx .annot .fcl .fo .zv .pfc .v .vo
.SUFFIXES: .fcd .xml
.SUFFIXES: .tex .dvi .ps .pdf .idx
.SUFFIXES: .shtml .html .htm

# Caml rules
.ml.cmo:
	$(CAML_BYT) -c $<

.mli.cmi:
	$(CAML_BYT) -c $<

.ml.cmx:
	$(CAML_BIN) -c $<

.mly.ml:
	$(CAML_YAC) $<

.mll.ml:
	$(CAML_LEX) $<

# FoCaLiZe rules
.fcl.fo:
	$(FOCALIZEC) $<
.fcl.ml:
	$(FOCALIZEC) $<
.fcl.zv:
	$(FOCALIZEC) $<

.zv.v:
	$(ZVTOV) $<

.v.vo:
	$(COQC) $<

.fcl.fcd:
	$(FOCALIZEC) -focalize-doc $<
.fcd.xml:
	$(XSLTPROC) $(FD2HTML) $< | $(XSLTPROC) $(MMLC2P) - > $@

# Tex/LaTeX rules
.tex.dvi:
	$(LATEX) $< &&\
	$(MAKE) $(<:.tex=.idx) &&\
	$(LATEX) $<
.tex.idx:
	$(MAKEINDEX) $(<:.tex=.idx)
.dvi.ps:
	$(DVIPS) -o $@ $<
.dvi.pdf:
	$(DVIPDF) $< $@

# Html rules
.shtml.html:
	$(HTMLC) -s $<
.html.htm:
	$(HTMLC) -c $<
.html.dvi:
	$(HEVEA) -fix ${HVA_FILES} $<

include .depend
