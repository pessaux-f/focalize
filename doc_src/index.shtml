<!--#include virtual="beforetitle-eng.html"-->
$(focal)
<!--#include virtual="aftertitle-eng.html"-->

<div class="right">
<h2>Recent news</h2>
<ul>
  <li>2012-01-23: Bug tracker available</li>
  <li>2013-01-21: Tutorial on proofs extended</li>
  <li>2013-01-10: Release 0.8.0</li>
</ul>
</div>


<div id="container">
<div id="header">
<h1>The $(focal) Essential</h1>
<br />
<hr />
</div>
</div>

<div class="spacer"></div>

<div id="container">
<div id="menu">
<div id="maincontent">

<a href="download/">Download</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="documentation/">Documentation</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="resources/">Resources</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="bugzilla/">Bug Tracking</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="contacts/">Contacts</a>

</div>
</div>
</div>

<div class="spacer"></div>
<div class="spacer"></div>

<div id="content">
  <p>
  Welcome to the $(focal) website. This site offers information
  about $(focal), some documentation about the language and its
  compiler, some training opportunities, and of course, the latest release of
  $(focal).
  </p>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Overview</h3><h3>
<p>
  The $(focal) project aims at providing a programming
  environment to develop certified programs. The environment is based on
  a functional programming language with object-oriented features. The
  language allows the programmer to write formal specifications and
  proofs of the program in a unified and consistent setting. 
</p>

<p>
  From a $(focal) source code development, the
  <code>$(focalizec)</code> compiler produces three source files: 
</p>
  <ul>
    <li>
    a source file for the $(coq) proof assistant to check the proofs, 
    </li>
    <li>
    a source file for the $(ocaml) compiler to build the executable program, 
    </li>
    <li>
    a source file that contains the documentation extracted from the
    development sources.
    </li>
  </ul>
  <p>
  Thanks to built-in inheritance mechanisms, the language allows to
  refine a development from the coarse-grain specification to the fully
  defined executable program.
  </p>
  <p>
  The $(focal) distribution includes a library of 
  mathematical algebraic structures up to multivariate polynomial
  rings, a library of security policies and various examples contributed
  by $(focal) users. The resulting libraries are noticeably
  efficient; for instance, the complex algorithms of the algebraic library
  provide runtime performances comparable to the best Computer
  Algebra Systems available.
  </p>
  </h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Bug tracking now available (2013-01-21)</h3><h3>
<p>
  Bugs, feature requests etc. can now be submitted via the FoCaLiZe
  <a href="bugzilla/">bug tracker</a> (powered by Bugzilla). We
  encourage this process instead of direct mails since it allows
  keeping trace of requests, prevents "memory loss" (the post-it stuck
  on the screen and finally falling down in the bin or whatever else)
  and can be used as knowledge database before submitting new requests.
</p>
</h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Extended tutorial "Playing with Proofs" (2013-01-21)</h3><h3>
<p>
  The online version of the
  <a href="documentation/index.html#tuto_proofs">tutorial about proofs</a>
  now contains a
  section dedicated to explicit induction, i.e. when Zenon does
  not succeed in finding a proof in a fully automatic way. This
  section shows how to apply the usual scheme of proof by induction,
  proving base cases, then induction cases under induction
  hypotheses.
</p>
</h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>New release of the $(focal) environment (2013-01-10)</h3><h3>
<p>
  The new release of the $(focal) environment, 
  <code>$(project_name) 0.8.0</code>, 
  is now available. $(focal) got nearly asleep for some years, without
  major release despite some underground works. The
  &quot;<span style="font-style: italic;">ghost</span>&quot; 0.7.0
  version never became public, but the 0.8.0 cumulating the evolutions
  of the repository is nearly ready.
  Get the last version from the <a href="download/">Download</a> page
  and the related documentation from the
  <a href="documentation/">Documentation</a> page.
  <br>

  After a pretty long time without release, this new version brings number
  of enhancements, from the <code>$(focalizec)</code> compiler and
  Zenon. New versions of 
  OCaml and Coq are now supported as well as previous ones for sake of legacy.
  Zenon made impressive progress so as to be helpful in proving inductive
  properties for species. Installation and setup have been fully revisited,
  leading in a simpler and lighter mechanism. The standard library has been
  extended with low-level theorems. Termination proofs for structurally
  recursive functions are now possible. A certains number of bugs found in the
  focalizec compiler have been fixed. And a new tutorial about making proofs
  with Zenon is born.
  A complete description of changes / new features can in found in the CHANGES
  file of the distribution.
  </p>
</h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Initial event: The SSURF ANR project</h3><h3>
<p>
  The SSURF (Safety and Security UndeR Focal) ANR project was the 
  starting point of the concretization of the $(focal) environment,
  leading to an effective implementation of what is now the $(focalizec)
  compiler, greatly helped by Zenon.
  <br>
  As a summary, this project consisted in :
  </p>
  <ul>
    <li>
    Analyze and define the features required for an IDE in
    order to reach high levels of security.
    </li>
    <li>
    Define a generic framework in which many access control policies
    can be expressed.
    </li>
  </ul>


  <p>
  Further information (in french) can be found
  <a href="http://www-spi.lip6.fr/~jaume/ssurf.html">here.</a>
  </p>
</h3>
</div>


<div class="spacer"></div>
<div class="spacer"></div>

<!--#include virtual="endofpage-eng.html"-->
