<!--#include virtual="beforetitle-eng.html"-->
$(focal)
<!--#include virtual="aftertitle-eng.html"-->

<!-- <div class="right"> -->
<!-- <h2>Recent news</h2> -->
<!-- <ul> -->
<!--   <li>2012-01-23: Bug tracker available</li> -->
<!--   <li>2013-01-21: Tutorial on proofs extended</li> -->
<!--   <li>2013-01-10: Release 0.8.0</li> -->
<!-- </ul> -->
<!-- </div> -->

<div id="container">
<a href="imgs/fcl_logo_large.png"><img src="imgs/fcl_logo_small.png" align="middle"></a>
</div>

<div id="container">
<div id="header">
<h1>The $(focal) Essential</h1>
<br />
<hr />
</div>
</div>

<div class="spacer"></div>

<div id="container">
<div id="menu">
<div id="maincontent">

<a href="download/">Download</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="documentation/">Documentation</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="resources/">Resources</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="bugzilla/">Bug Tracking</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="contacts/">Contacts</a>

</div>
</div>
</div>

<div class="spacer"></div>
<div class="spacer"></div>

<div id="content">
  <p>
  Welcome to the $(focal) website. This site offers information
  about $(focal), some documentation about the language and its
  compiler, some training opportunities, and of course, the latest release of
  $(focal).
  </p>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Overview</h3><h3>
<p>
  The $(focal) project aims at providing a programming
  environment to develop certified programs. The environment is based on
  a functional programming language with object-oriented features. The
  language allows the programmer to write formal specifications and
  proofs of the program in a unified and consistent setting. 
</p>

<p>
  From a $(focal) source code development, the
  <code>$(focalizec)</code> compiler produces three source files: 
</p>
  <ul>
    <li>
    a source file for the $(coq) proof assistant to check the proofs,
    </li>
    <li>
    a source file for the $(ocaml) compiler to build the executable program,
    </li>
    <li>
    a source file that contains the documentation extracted from the
    development sources.
    </li>
  </ul>
  <p>
  Thanks to built-in inheritance mechanisms, the language allows to
  refine a development from the coarse-grain specification to the fully
  defined executable program.
  <br><br>
  The $(focal) distribution includes a library of
  mathematical algebraic structures up to multivariate polynomial
  rings, a library of security policies and various examples contributed
  by $(focal) users. The resulting libraries are noticeably
  efficient; for instance, the complex algorithms of the algebraic library
  provide runtime performances comparable to the best Computer
  Algebra Systems available.
  </p>
  </h3>
</div>


<div class="spacer"></div>

<div id="main">
<h3>New release (0.9.0) of the $(focal) environment (2014-10-14)</h3><h3>
<p>
  The new release of the $(focal) environment,
  <code>$(project_name) 0.9.0</code>,
  is now available.
  A certain number of bugs found in the <code>focalizec</code> compiler have
  been fixed and Zenon also had several issues fixed.
  <code>Final let</code>-definitions are now integrated. The computation of
  dependencies has been deeply rewritten to compute them *once* for all the
  possible backends (OCaml, Coq). Generated code is slightly lighter and
  naming schemes and code generation schemes have been standardized between
  OCaml and Coq.
  A complete description of changes / new features can in found in the CHANGES
  file of the distribution.
</p>
</h3>
</div>

<div class="spacer"></div>

<div id="main">
<h3>Server issue and migration (Sept-Oct 2014)</h3><h3>
<p>
Due to an issue on the old server hosting $(focal), the site was down during
some weeks. The situation is now back to a normal state after a migration.
Only the bugtracker is still down and will be fixed soon.
</p>
</h3>
</div>


<div class="spacer"></div>

<div id="main">
<h3>Slides and Lecture Notes of EJCP 2014 (2014-09-08)</h3><h3>
<p>
The material of the course given at Ecole des Jeunes Chercheurs en
Programmation (EJCP) in May 2014 is now available via the
<a href="documentation/">Documentation</a> page. This document introduces
the aims of proving software and shows application using $(focal).
</p>
</h3>
</div>


<div class="spacer"></div>

<div id="main">
<h3>Update of tutorial "Playing with proofs" (2014-03-06)</h3><h3>
<p>
The tutorial "Playing with Proofs" available in the distribution and via the
<a href="documentation/">Documentation</a> page has been updated to make the
proof dealing with tree mirror working again. We still have to add few words
to explain clearly how to state induction hypotheses in case of multiple
recursive calls. Some words also have to be added about the shape of the goals
and the equivalent shapes they can have to allow Zenon to use induction.

Will be done ASAP ;)
</p>
</h3>
</div>


<div class="spacer"></div>

<div id="main">
<h3>Fixed broken links to papers in resources (2014-02-14)</h3><h3>
<p>
Due to a site migration, some links to papers available in the
<a href="resources/">Resources</a> page got broken. The PDF files are now back.
</p>
</h3>
</div>


<div class="spacer"></div>

<div id="main">
<h3><code>final</code> let-definitions available (2014-01-31)</h3><h3>
<p>
 A new feature is now available (currently only from the GIT repository)
 allowing to forbid redefinitions of let-definitions (logical or not): the
 <code>final</code> qualifier.
 This feature was requested to avoid duplicating the code of a logical let
 by adding a theorem paraphrasing the definition's body in order to prevent
 further redefinitions from changing the definition.
 For sake of homogeneity, "final-ity" is available also for "non-logical"
 definitions.
<br><br>
The following code<sup>*</sup>:<br>
<code>
  &nbsp;&nbsp;logical let is_A_singleton = all a : A, A!equal (a, A!element);<br>
  &nbsp;&nbsp;(* Theorem to avoid changes of is_A_singleton. *)<br>
  &nbsp;&nbsp;theorem is_A_singleton_spec :<br>
  &nbsp;&nbsp;&nbsp;&nbsp;  is_A_singleton <-> all a : A, A!equal (a, A!element)<br>
  &nbsp;&nbsp;proof = by definition of is_A_singleton ;
</code>
<br><br>
may now be simplified in:
<br><br>
<code>
  &nbsp;&nbsp;logical final let is_A_singleton = all a : A, A!equal (a, A!element);
</code>
<br><br>
Since no children in the inheritance will be allowed to alter the "meaning"
of <code>is_A_singleton</code>, the theorem <code>is_A_singleton_spec</code>
is no more needed.
</p>
<p style="font-style: italic;"><font size="-1">(*) Thank's to Mathieu
and Th&eacute;o for the example.</font>
</p>
</h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Fix of the Zenon GIT repository (2014-01-17)</h3><h3>
<p>
  <a href="http://focal.inria.fr/zenon/">Zenon</a> GIT repository got corrupted
  causing an incorrect
  <code>git clone</code> when used as anynymous user via the http link
  provided in the <a href="download/">Download</a> page. The version that was
  fetched did not include number of (more or less) recent commits, hence did
  not make available bug fixes and features of Zenon.
<br><br>
  This is now fixed, users can clone or update their version of Zenon.
  Versions prior to <code>0.7.2 [a257] 2014-01-05</code> are out-of-date
  and were possibly impacted by the repository corruption.
</h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Split of $(focal) and Zenon GIT repositories (2013-04-08)</h3><h3>
<p>
  $(focal) and <a href="http://focal.inria.fr/zenon/">Zenon</a> are now in two
  separate GIT repositories. This won't
  impact the available material but now requires to clone both repositories.
  This split allows lighter installation when only needing Zenon. Until
  Zenon's repository is cleanly integrated as a sub-module of the $(focal)
  one, these two separate clone/pull/push processes are required.
</p>
</h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Bug tracking now available (2013-01-21)</h3><h3>
<p>
  Bugs, feature requests etc. can now be submitted via the FoCaLiZe
  <a href="bugzilla/">bug tracker</a> (powered by Bugzilla). We
  encourage this process instead of direct mails since it allows
  keeping trace of requests, prevents "memory loss" (the post-it stuck
  on the screen and finally falling down in the bin or whatever else)
  and can be used as knowledge database before submitting new requests.
</p>
</h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Extended tutorial "Playing with Proofs" (2013-01-21)</h3><h3>
<p>
  The online version of the
  <a href="documentation/index.html#tuto_proofs">tutorial about proofs</a>
  now contains a
  section dedicated to explicit induction, i.e. when Zenon does
  not succeed in finding a proof in a fully automatic way. This
  section shows how to apply the usual scheme of proof by induction,
  proving base cases, then induction cases under induction
  hypotheses.
</p>
</h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>New release (0.8.0) of the $(focal) environment (2013-01-10)</h3><h3>
<p>
  The new release of the $(focal) environment, 
  <code>$(project_name) 0.8.0</code>, 
  is now available. $(focal) got nearly asleep for some years, without
  major release despite some underground works. The
  &quot;<span style="font-style: italic;">ghost</span>&quot; 0.7.0
  version never became public, but the 0.8.0 cumulating the evolutions
  of the repository is nearly ready.
  Get the last version from the <a href="download/">Download</a> page
  and the related documentation from the
  <a href="documentation/">Documentation</a> page.
  <br>

  After a pretty long time without release, this new version brings number
  of enhancements, from the <code>$(focalizec)</code> compiler and
  Zenon. New versions of 
  OCaml and Coq are now supported as well as previous ones for sake of legacy.
  Zenon made impressive progress so as to be helpful in proving inductive
  properties for species. Installation and setup have been fully revisited,
  leading in a simpler and lighter mechanism. The standard library has been
  extended with low-level theorems. Termination proofs for structurally
  recursive functions are now possible. A certains number of bugs found in the
  focalizec compiler have been fixed. And a new tutorial about making proofs
  with Zenon is born.
  A complete description of changes / new features can in found in the CHANGES
  file of the distribution.
  </p>
</h3>
</div>


<div class="spacer"></div>


<div id="main">
<h3>Initial event: The SSURF ANR project</h3><h3>
<p>
  The SSURF (Safety and Security UndeR Focal) ANR project was the 
  starting point of the concretization of the $(focal) environment,
  leading to an effective implementation of what is now the $(focalizec)
  compiler, greatly helped by Zenon.
  <br>
  As a summary, this project consisted in :
  </p>
  <ul>
    <li>
    Analyze and define the features required for an IDE in
    order to reach high levels of security.
    </li>
    <li>
    Define a generic framework in which many access control policies
    can be expressed.
    </li>
  </ul>


  <p>
  Further information (in french) can be found
  <a href="http://www-spi.lip6.fr/~jaume/ssurf.html">here.</a>
  </p>
</h3>
</div>


<div class="spacer"></div>
<div class="spacer"></div>

<!--#include virtual="endofpage-eng.html"-->
