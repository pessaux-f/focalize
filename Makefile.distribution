#**********************************************************************#
#                                                                      #
#                        FoCaLiZe compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2009 LIP6 and INRIA                                       #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

# $Id: Makefile.distribution,v 1.20 2010-05-07 10:38:24 weis Exp $

ROOT_DIR=.

# Just for the $(PROJECT) maintainers, a Makefile to distribute the
# software.

# This Makefile includes some of the toplevel make files of the application
# that is supposed to define at list: PROJECT (the name of the system to
# distribute, e.g. Moca).

# Usage:
# - you must set the variables WEB_SITE_DIR and FTP_SITE_DIR below,
# - verify that the prerequisites below are fulfilled,
# - then type in
# make -f Makefile.distribution distribute

# The Makefile builds a tar ball file with the set of source files and moves
# it to the $(WEB_SITE_DIR)/download directory.
# The Makefile copies the documentation in the $(WEB_SITE_DIR)/documentation directory.

# Pre-requisites:
# - You need a doc_src directory where the documentation has been written,
#   presumably in HTML, with an index.htm file. This directory is copied
#   onto the WEB site directory of the package, as mentioned in
#   $(WEB_SITE_DIR).
# - The doc directory is supposed to contain
#   * 2 files named eng.htm and fra.htm that respectively contain
#     the English and French documentation,
#   * 2 files copyright.fra.htm and copyright.eng.htm to rule the copyright
#     notice in french and english.

#include Makefile
include Makefile.config

# The definitions specific to this Makefile and to the distribution of the project.
include ./.distribution_var

# The prefix for the package tar ball file (without its extension) and the
# package archive file name.
# Here, we directly use variables stored at configuration time in .config_var.
#PROJECT_NAME_FULL = $(PROJECT_NAME)-$(VERSION)
#PROJECT_ARCHIVE_NAME=$(PROJECT_NAME_FULL).tgz

# The directory where the PROJECT will be cvs exported.
PROJECT_RELEASE_DIR_NAME=$(PROJECT_NAME_FULL)

# The group which should have w/r/x permissions on the distribution.
PROJECT_GROUP=caml

# Where the software files reside on the CVS repository:
# The definitions are now in .distribution_var.
#PROJECT_CVS_ROOT="`cat CVS/Root`"
#PROJECT_CVS_REPOSITORY="`cat CVS/Repository`"

#PROJECT_CVS_COMMAND="${CVS} -d $(PROJECT_CVS_ROOT)"

# The CVS module name for the project.
# Normally, something like: $(PROJECT_NAME).
PROJECT_CVS_MODULE=$(PROJECT_NAME)

# The tag to set on files in the CVS repository when releasing
# We cannot use PROJECT_NAME_FULL since it has '.' in it, and
# CVS tags cannot have '.' in their names. We thus replace '.' by '_'.
PROJECT_RELEASE_TAG =\
 $(PROJECT_NAME)_release_$(VERSION_NUMBER_MAIN)_$(VERSION_NUMBER_SUB)_$(VERSION_NUMBER_PATCH)
PROJECT_RELEASE_BRANCH_TAG =\
 branch_$(PROJECT_RELEASE_TAG)

PROJECT_ADMINISTRATIVE_FILES=\
 AUTHORS INSTALL LICENSE README

PROJECT_ANNOUNCE_MAILING_LISTS=\
  "focalize-users@inria.fr \
   coq-club@inria.fr coq-list@inria.fr coq-announce@inria.fr \
   caml-list@inria.fr caml-announce@inria.fr \
   gdr.gpl@imag.fr"

# The list of files that will be searched and deleted from the entire
# distribution before making the release tar ball.
# This one is pretty standard: it removes working files useless to the user of
# the package.
PROJECT_RELEASE_EXCLUDE_FILE_LIST=\
  "CVS .cvsignore* .svnignore* banner*\
  TODO README.for_developers Makefile.distribution\
  doc_src tests"

# The list of files that will be deleted from the distribution before
# making the release tar ball.
# This is the list of private directory/files.
PROJECT_RELEASE_REMOVE_FILE_LIST=\
  ".configure_distribution .distribution_var.in .distribution_var\
  ${FOCALIZEC_NAME}/TAGS\
  ${FOCALIZEC_NAME}/src/attic"

# Definition of the Web site for the project.
# Where is the Web site to generate for the application
WEB_SITE_SRC_DIR=$(ROOT_DIR)/doc_src
WEB_SITE_URL=http://$(PROJECT_WEB_SERVER)
WEB_SITE_DIR=$(PROJECT_WEB_SERVER):$(PROJECT_WEB_SITE_DIR)
WEB_SITE_DOWNLOAD_DIR=$(WEB_SITE_DIR)/download
WEB_SITE_DOWNLOAD_URL = $(WEB_SITE_URL)/download
WEB_SITE_DIR_MOUNT_POINT=/net/yquem/infosystems/www/bazaar/$(PROJECT_NAME)

HTMLC_COMP_FLAGS=-env $(ROOT_DIR)/.config_var_for_shell -env project.env
HTMLC_INCLUDES=-I doc_src/Includes

.PHONY: fake
fake:
	@echo >&2 && \
	 echo 'This Makefile is used to distribute the project.' >&2 && \
	 echo 'Read it to understand how to use it!' >&2 && \
	 echo >&2

# Distribution of the software
.PHONY: distribute
distribute: configure_distribution package build_release install_release tag announce #version

.PHONY: configure_distribution clean_configure_distribution
configure_distribution: .distribution_var

clean_configure_distribution:
	$(RM) .distribution_var
distclean:: clean_configure_distribution

.distribution_var: .distribution_var.in .configure_distribution
	./.configure_distribution

################## PACKAGE
.PHONY: package clean_package
package: clean all project_test project_examples documentation

.PHONY: documentation clean_documentation
documentation: .done_build_documentation

# Make the documentation and Web site before the release
.done_build_documentation: .distribution_var
	@echo "documentation --> ..." >&2 && \
	$(MAKE) -f Makefile doc && \
	$(MAKE) -f Makefile docdir; \
	err=$$?; \
	echo "documentation <-- $$i [$$err]" >&2 && \
	case $$err in 0);; *) exit $$err;; esac && \
	($(CD) $(WEB_SITE_SRC_DIR) && $(MAKE) all) && \
	$(TOUCH) .done_build_documentation

clean_documentation:
	@$(RM) .done_build_documentation && \
	 for i in $(INTERNAL_TOOLS_DIRS) $(WEB_SITE_SRC_DIR); do \
	   echo "--> $$i ..." >&2 && \
	   ($(CD) $$i && touch .config_var && $(MAKE) clean); \
	   err=$$?; \
	   echo "<-- $$i [$$err]" >&2 && \
	   case $$err in 0);; *) exit $$err;; esac; \
	 done && \
	 $(RM) $(DOC_ROOT_DIR)

# Recompile the tests
.PHONY: project_test
project_test:
	if test -d "./test"; then \
	  echo >&2 && echo >&2 && \
	  echo "Compiling tests" >&2 && \
	  echo >&2 && echo >&2 && \
	  (cd test && $(MAKE) all) && \
	  echo >&2 && echo >&2 && \
	  echo "Tests compiled" >&2 && \
	  echo >&2 && \
	  echo >&2; \
	fi

# Create the examples directory && copy the example files.
.PHONY: project_examples
project_examples:
	@if test -d "./test"; then \
	  echo >&2 && echo >&2 && \
	  echo "Populating the examples directory." >&2 && \
	  echo >&2 && echo >&2 && \
	  (cd test && $(MAKE) examplesdir) && \
	  echo >&2 && echo >&2 && \
	  echo "Examples directory populated." >&2 && \
	  echo >&2 && echo >&2; \
	fi

# Clean the old release directory.
# Check out a brand new version there.
# Copy the documentation in it.
# Also need to have examples and copy them.
#	   $(CP) ../examples $(PROJECT_RELEASE_DIR_NAME) && \
# Clean it.
.PHONY: build_release clean_build_release
build_release: .done_build_release

.done_build_release:\
   .done_build_documentation .done_build_release_directory\
   .done_build_tarball\
   .done_build_web_site #.done_build_ftp_site
	$(TOUCH) ./.done_build_release

clean_build_release:
	$(RM) .done_build_release
	$(RM) release

.PHONY: release_directory clean_release_directory
release_directory: .done_build_release_directory

clean_release_directory:
	$(RM) .done_build_release_directory
	$(RM) release

.done_build_release_directory: .done_build_documentation
	@$(RM) release && \
	$(MKDIR) release && \
	($(CD) release && \
	 $(CVS) -d $(PROJECT_CVS_ROOT) export -r $(PROJECT_RELEASE_TAG) \
	        -d $(PROJECT_RELEASE_DIR_NAME) $(PROJECT_CVS_REPOSITORY) && \
	 $(CPR) $(ABSOLUTE_DOC_ROOT_DIR) $(PROJECT_RELEASE_DIR_NAME) && \
	 for i in "$(PROJECT_RELEASE_EXCLUDE_FILE_LIST)"; do \
	    find . -name $$i | xargs $(RM); \
	 done && \
	 for i in "$(PROJECT_RELEASE_REMOVE_FILE_LIST)"; do \
	   echo "$(RM) $(PROJECT_RELEASE_DIR_NAME)/$$i" >&2 && \
	   $(RM) $(PROJECT_RELEASE_DIR_NAME)/$$i; \
	 done \
	) && \
	$(TOUCH) ./.done_build_release_directory

# Build the tarball
.PHONY: build_tarball clean_build_tarball
build_tarball: .done_build_tarball
$(PROJECT_ARCHIVE_NAME): .done_build_tarball

clean_build_tarball:
	$(RM) .done_build_tarball
	$(RM) $(PROJECT_ARCHIVE_NAME)

# Build the archive and move it in the proper directory
.done_build_tarball: .done_build_release_directory
	($(CD) release && \
	  $(TARC) ../$(PROJECT_ARCHIVE_NAME) $(PROJECT_RELEASE_DIR_NAME) \
        ) && \
	$(TOUCH) .done_build_tarball

clean clean-all:: clean_documentation\
  clean_release_directory clean_build_tarball clean_build_release

# Install the tarball on the web site.
.PHONY: install_tarball clean_install_tarball
install_tarball: .done_install_tarball

clean_install_tarball:
	$(RM) .done_install_tarball

.done_install_tarball: .done_build_tarball
	for i in $(PROJECT_ADMINISTRATIVE_FILES); do \
	  $(CHMODGRW) release/$(PROJECT_RELEASE_DIR_NAME)/$$i && \
	  $(SCP) release/$(PROJECT_RELEASE_DIR_NAME)/$$i \
	     $(WEB_SITE_DOWNLOAD_DIR); \
	  err=$$?; \
	  case $$err in 0);; *) exit $$err;; esac; \
        done && \
	$(CHMODGRW) $(PROJECT_ARCHIVE_NAME) && \
	$(SCP) $(PROJECT_ARCHIVE_NAME) $(WEB_SITE_DOWNLOAD_DIR) && \
	$(TOUCH) .done_install_tarball

# Build the Web site
.PHONY: build_web_site clean_build_web_site
build_web_site: .done_build_web_site
clean_build_web_site:
	($(CD) $(WEB_SITE_SRC_DIR); $(MAKE) clean) && \
	$(RM) .done_build_web_site

.done_build_web_site: .done_build_documentation
	($(CD) $(WEB_SITE_SRC_DIR); $(MAKE) all) && \
	$(TOUCH) .done_build_web_site

# Install the Web site
.PHONY: install_web_site clean_install_web_site
install_web_site: .done_install_web_site

clean_install_web_site:
	$(RM) .done_install_web_site

.done_install_web_site: .done_install_tarball .done_build_web_site
	($(CD) $(WEB_SITE_SRC_DIR); $(MAKE) install) && \
	$(TOUCH) .done_install_web_site

# Build the FTP site
#PROJECT_FTP_SERVER=yquem.inria.fr
#FTP_SITE_SRC_DIR=$(ROOT_DIR)/ftp_src
#FTP_SITE_URL=ftp://$(PROJECT_FTP_SERVER)
#FTP_SITE_DIR=$(PROJECT_FTP_SERVER):$(PROJECT_FTP_SITE_DIR)
#FTP_SITE_DOWNLOAD_DIR=$(FTP_SITE_DIR)/download
#FTP_SITE_DOWNLOAD_URL = $(FTP_SITE_URL)/download

# When the ftp site for the project is accessible via NFS.
#FTP_SITE_DIR_MOUNT_POINT=/net/yquem/infosystems/www/bazaar/$(PROJECT_NAME)
#FTP_SITE_DIR_MOUNT_POINT=/net/yquem/infosystems/ftp/bazaar/$(PROJECT_NAME)
#FTP_SITE_DIR_MOUNT_POINT2=/net/pauillac/infosystems/ftp/cristal/caml-light/bazar-ocaml/$(PROJECT_NAME)

#.PHONY: build_ftp_site clean_build_ftp_site
#build_ftp_site: .done_build_ftp_site
#clean_build_ftp_site:
#	$(RM) .done_build_ftp_site && \
#	$(RM) $(FTP_SITE_SRC_DIR)

#.PHONY: distclean_build_ftp_site
#distclean:: distclean_build_ftp_site
#distclean_build_ftp_site:
#	$(RM) .done_build_ftp_site && \
#	$(RM) $(FTP_SITE_SRC_DIR)

# Copy the legalease to $(FTP_SITE_DIR)
# Build the archive.
#.done_build_ftp_site: .done_build_tarball
#	$(MKDIR) $(FTP_SITE_SRC_DIR) && \
#	$(CP) release/$(PROJECT_RELEASE_DIR_NAME)/README $(FTP_SITE_SRC_DIR) && \
#	$(CP) release/$(PROJECT_RELEASE_DIR_NAME)/LICENSE $(FTP_SITE_SRC_DIR) && \
#	$(CP) release/$(PROJECT_RELEASE_DIR_NAME)/AUTHORS $(FTP_SITE_SRC_DIR) && \
#	($(CD) release && \
#	  $(TARC) $(PROJECT_ARCHIVE_NAME) $(PROJECT_RELEASE_DIR_NAME) && \
#	  $(MV) $(PROJECT_ARCHIVE_NAME) $(FTP_SITE_SRC_DIR)) && \
#	$(TOUCH) .done_build_ftp_site

# Move the ftp stuff in the proper ftp site
#.PHONY: install_ftp_site clean_install_ftp_site
#install_ftp_site: .done_build_ftp_site .done_install_ftp_site
#clean_install_ftp_site:
#	$(RM) .done_install_ftp_site

#.done_install_ftp_site:
#	$(CP) $(FTP_SITE_SRC_DIR) $(FTP_SITE_DIR)/ && \
#	$(TOUCH) .done_install_ftp_site

# Build the FTP2 site
# Copy the FTP site to $(FTP_SITE_DIR2)
#ftp2:
#	$(MKDIR) $(FTP_SITE_DIR2) && \
#	$(CP) $(FTP_SITE_DIR)/* $(FTP_SITE_DIR2)/ && \
#	$(TOUCH) .done_ftp2

.PHONY: install_release clean_install_release
install_release: .done_install_release

.done_install_release:\
   .done_install_tarball\
   .done_install_web_site #.done_install_ftp_site
	$(TOUCH) ./.done_install_release

clean_install_release:
	$(RM) .done_install_release
	$(RM) release

clean clean-all:: clean_install_web_site\
  clean_install_release #clean_install_ftp_site

# Tagging the version.
#
# Branching for a new release.
.PHONY: branch
branch:
	$(CVS) rtag -b $(PROJECT_RELEASE_BRANCH_TAG) $(PROJECT_CVS_MODULE)

.PHONY: tag untag
tag:
	$(CVS) tag $(PROJECT_RELEASE_TAG)
# Untagging the version (in case of bug in the software code).
untag:
	$(RM) ./release
	$(CVS) tag -d $(PROJECT_RELEASE_TAG)

# Tagging the version again with the same tag,
# (in case of bug during the distribution process).
.PHONY: retag
retag:
	$(CVS) tag -F $(PROJECT_RELEASE_TAG)

# The file that contains the announce of the new release in the
# relevant mailing lists.
ANNOUNCE_FILE = .announce_text
#ANNOUNCE_FILE_SRC = Announce-$(VERSION_NUMBER_FULL)
ANNOUNCE_FILE_SRC = Announce

$(ANNOUNCE_FILE): $(ANNOUNCE_FILE_SRC)
	$(HTMLC) -f $(ANNOUNCE_FILE_SRC) -t $(ANNOUNCE_FILE)

# Sending the announce to the mailing lists.
.PHONY: announce clean_announce
announce: .done_install_web_site $(ANNOUNCE_FILE)
	for i in $(PROJECT_ANNOUNCE_MAILING_LISTS); do \
	  mail -n -s \
	    "New release of $(PROJECT_NAME), a development environment for high integrity programs." \
	    $$i < $(ANNOUNCE_FILE); \
	done

clean_announce:
	$(RM) $(ANNOUNCE_FILE)

clean clean-all:: clean_announce

# Testing the release tarball
TEST_RELEASE_PREFIX=~/release
TEST_RELEASE_TOOLS_PREFIX=$(TEST_RELEASE_PREFIX)

.PHONY: test_tarball clean_test_tarball
.PHONY: test_release clean_test_release
test_tarball test_release: .done_test_tarball
.done_test_tarball: .done_install_tarball
	$(RM) test_release && $(MKDIR) test_release && \
	if test -d $(TOOLS_PROJECT_DIR); then \
	  $(RM) $(TOOLS_PROJECT_DIR); \
	fi && \
	($(CD) test_release && \
	 $(WGET) $(WEB_SITE_DOWNLOAD_URL)/$(PROJECT_ARCHIVE_NAME) && \
	 $(TARX) $(PROJECT_ARCHIVE_NAME) && \
	 ($(CD) $(PROJECT_RELEASE_DIR_NAME) && \
          ./configure \
	    --prefix $(TEST_RELEASE_PREFIX) \
	    --tools_prefix $(TEST_RELEASE_TOOLS_PREFIX) && \
	  $(MAKE) && \
	  $(SUDO) $(MAKE) install \
	 ) \
	) && \
	$(TOUCH) .done_test_tarball

# We uninstall the stuff installed by the test and then remove the
# test_release directory.
clean_test_tarball clean_test_release:
	$(RM) .done_test_tarball && \
	(if test -d test_release; then \
           $(CD) test_release/$(PROJECT_RELEASE_DIR_NAME) && \
	   $(MAKE) uninstall; \
	 fi \
	) && \
	$(RM) ./test_release

# In case, we remove completely the directory where the test release is installed.
distclean:: distclean_test_tarball
distclean_test_tarball: clean_test_tarball
	$(RM) $(TEST_RELEASE_PREFIX)/* && \
	$(RM) $(TEST_RELEASE_TOOLS_PREFIX)/*

clean clean-all::\
  clean_test_release clean_test_tarball\

# An entry to brutally remove old FoCaLiZe installed stuff.
# We suppose:
# - /usr/local as configuration prefix
# - $(HOME)/pkg or $(HOME)/release as configuration tools prefix.
RELEASE_MANAGER=weis
.PHONY: new-balls
new-balls:
	$(RM) /usr/local/bin/focalize* && \
	$(RM) /usr/local/lib/focalize* && \
	$(RM) /usr/local/man/man*/focalize* && \
	$(RM) /usr/local/doc/tex/focalize* && \
	$(RM) /usr/local/doc/html/focalize* && \
	$(RM) ~$(RELEASE_MANAGER)/pkg/focalize* && \
	$(RM) ~$(RELEASE_MANAGER)/release/focalize*

# Automatic handling of versionning
# Should be done with HTMLC
#.PHONY: version
#version:
#	@for i in $(PROJECT_VERSION_FILES); do \
#	echo $$i >&2 && \
#	$(MV) $$i $$i~ && \
#	sed -e '/ersion/s/$(OLDVERSION)/$(VERSION)/' $$i~ | \
#	sed -e '/year/s/$(OLDYEAR)/$(YEAR)/' > $$i; \
#	done
#
# When a release is to be completed, and preferably before branching, you must
# consolidate the version number of every component of FoCaLiZe.
# For each component, this means to edit the file .project_config_var to verify
# that this file indicates the correct current version of the tool.
#
# For the FoCaLize system, it means to edit and verify the following files:
# - ./.project_config_var (the version for FoCaLize is in this file)
# - zenon/.project_config_var (the version for zenon is in the file versionnum.ml)
# - zvtov/.project_config_var (the version for zvtov is in the file version.ml)
# - ${FOCALIZEC_NAME}/.project_config_var
#   (the version for ${FOCALIZEC_NAME} is in the file src/basement/configuration.ml)

include $(ROOT_DIR)/Makefile.common
