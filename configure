#!/bin/sh

# ************************************************************************** #
#                                                                            #
#                        FoCaLiZe compiler                                   #
#                                                                            #
#            François Pessaux                                                #
#            Pierre Weis                                                     #
#            Damien Doligez                                                  #
#            Raphaël Cauderlier                                              #
#                                                                            #
#                               LIP6  --  INRIA Rocquencourt                 #
#                                                                            #
#  Copyright 2007 - ... LIP6 and INRIA                                       #
#            2012 - ... ENSTA ParisTech                                      #
#            2013 - ... CNAM CEDRIC-CPR                                      #
#  Distributed only by permission.                                           #
#                                                                            #
# ************************************************************************** #

# $Id: configure,v 1.95 2012-10-30 13:56:05 pessaux Exp $

BOLDTAG="\033[1m"
UNDERLINETAG="\033[4m"
NORMALTAG="\033[0m"

usage () {
    echo "usage: ./configure [options] [<directory>]"
    echo
    echo "Options are:"
    echo "  [-]-install_prefix <directory>"
    echo "    set <directory> as the directory prefix for installation of"
    echo "    the FoCaLize commands."
    echo "    (Default value for <directory> is $BOLDTAG$INSTALL_PREFIX$NORMALTAG.)"
    echo "  [-]-interactive"
    echo "    run interactively, asking questions."
    echo "  [-]-no-doc"
    echo "    do not generate the PDF documentation files."
    echo "  [-]-tools_prefix <directory>"
    echo "    set <directory> as the directory prefix where tools required to"
    echo "    build FoCaLiZe are installed. The currently required non-common"
    echo "    tools are OCaml and Coq."
}


INTERACTIVE=false;
INSTALL_PREFIX_GIVEN=false;
INSTALL_PREFIX=/usr/local
TOOLS_PREFIX_GIVEN=false;
TOOLS_PREFIX="";
MAKE_DOC=true;


# Remembering the number of arguments to this script, in order
# to parse them properly.
argc="$#"

# #############################################################################
# Parsing arguments.
case ${argc} in
  0) ;;
  *)
  while : ; do
    # If nothing else to parse then end the loop.
    case $# in 0) break;; *);; esac
    case "$1" in
      -interactive | --interactive)
       INTERACTIVE=true;
       shift;;
      -install_prefix | --install_prefix)
       INSTALL_PREFIX_GIVEN=true;
       INSTALL_PREFIX="$2";
       shift 2;;
      -tools_prefix | --tools_prefix)
       TOOLS_PREFIX_GIVEN=true;
       TOOLS_PREFIX="$2";
       shift 2;;
      -no-doc | --no-doc)
       MAKE_DOC=false;
       shift;;
      -help | --help)
       usage;
       shift;
       exit 0;;
      -*)
       option="$1";
       echo "./configure: bad option '${option}'" >&2 && \
       echo "For help, use ./configure -help" >&2 && \
       shift;
       exit 2;;
    esac;
  done
  ;;
esac


# #############################################################################
# Pre-requisite tools stuff.
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    CAMLWITNESS=`which ocamlc`
    CAMLDIR=`dirname $CAMLWITNESS`
    if [ "$CAMLDIR" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"OCaml installation found in $CAMLDIR."$NORMALTAG
            echo "Press enter to use default or specify another path."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                CAMLDIR=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                CAMLDIR=""
            fi
        else
            # Default path: trim it
            CAMLDIR=""
        fi
    else
        # No ocamlc command found and no explicit prefix given.
        echo $BOLDTAG"OCaml installation not found."$NORMALTAG
        echo "Specify the path where to find OCaml commands."
        read USER_INPUT
        CAMLDIR=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$CAMLDIR" = "" ] ;
        then
            echo "Error. OCaml not available. Install it first."
            exit 1
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    CAMLDIR=$TOOLS_PREFIX
fi

# If path to ocaml is empty here, then ocaml was found but using the PATH.
# So do not prefix it explicitly, letting PATH finding the commands.
if [ "$CAMLDIR" != "" ] ;
then
    CAMLBYT=$CAMLDIR/ocamlc
    CAMLBIN=$CAMLDIR/ocamlopt
    CAMLLEX=$CAMLDIR/ocamllex
    CAMLYACC=$CAMLDIR/ocamlyacc
    CAMLDOC=$CAMLDIR/ocamldoc
    CAMLDEP=$CAMLDIR/ocamldep
else
    CAMLBYT=ocamlc
    CAMLBIN=ocamlopt
    CAMLLEX=ocamllex
    CAMLYACC=ocamlyacc
    CAMLDOC=ocamldoc
    CAMLDEP=ocamldep
fi

if [ $TOOLS_PREFIX_GIVEN != true ]
then
    COQWITNESS=`which coqc`
    COQDIR=`dirname $COQWITNESS`
    if [ "$COQDIR" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"Coq installation found in $COQDIR."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                COQDIR=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                COQDIR=""
            fi
        else
            # Default path: trim it
            COQDIR=""
        fi
    else
        # No coqc command found and no explicit prefix given.
        echo $BOLDTAG"Coq installation not found."$NORMALTAG
        echo "Specify the path where to find Coq commands."
        read USER_INPUT
        COQDIR=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$COQDIR" = "" ] ;
        then
            echo "Error. Coq not available. Install it first."
            exit 1
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    COQDIR=$TOOLS_PREFIX
fi

# If path to coq is empty here, then ocaml was found but using the PATH.
# So do not prefix it explicitly, letting PATH finding the commands.
if [ "$COQDIR" != "" ] ;
then
    COQC=$COQDIR/coqc
    COQDEP=$COQDIR/coqdep
else
    COQC=coqc
    COQDEP=coqdep
fi


# Look for Zenon
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    ZENON=`which zenon`
    if [ "$ZENON" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"zenon found in $ZENON."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                ZENON=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                ZENON=zenon
            fi
        else
            # Default path: trim it
            ZENON=zenon
        fi
    else
        # No zenon command found and no explicit prefix given.
        echo $BOLDTAG"zenon not found."$NORMALTAG
        echo "Specify where to find zenon."
        read USER_INPUT
        ZENON=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$ZENON" == "" ] ;
        then
            echo "Error. zenon not available. Install it first."
            exit 1
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    ZENON=$TOOLS_PREFIX/bin/zenon
fi


# Find zenon's libraries directly using the -where option of zenon.
ZENON_LIB_DIR=`${ZENON} -where`
if [ "$ZENON_LIB_DIR" = "" ] ;
then
    echo "Error. zenon libraries not available."
    echo "May be zenon is not installed. Install it first."
    exit 1
fi


if false
then                 # Temporary de-activation of Dedukti.
# Look for Zenon Modulo
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    ZENONM=`which zenon_modulo`
    if [ "$ZENONM" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"Zenon Modulo found in $ZENONM."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                ZENONM=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                ZENONM=zenon_modulo
            fi
        else
            # Default path: trim it
            ZENONM=zenon_modulo
        fi
    else
        # No zenon_modulo command found and no explicit prefix given.
        echo $BOLDTAG"Zenon Modulo not found."$NORMALTAG
        echo "Specify where to find Zenon Modulo."
        read USER_INPUT
        ZENONM=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$ZENONM" == "" ] ;
        then
            echo "Error. Zenon Modulo not available. Install it first."
            exit 1
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    ZENONM=$TOOLS_PREFIX/bin/zenon_modulo
fi
fi                 # End of temporary de-activation of Dedukti.


if false
then                 # Temporary de-activation of Dedukti.
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    DKWITNESS=`which dkcheck`
    DKDIR=`dirname $DKWITNESS`
    if [ "$DKDIR" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"Dedukti installation found in $DKDIR."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                DKDIR=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                DKDIR=""
            fi
        else
            # Default path: trim it
            DKDIR=""
        fi
    else
        # No dkcheck command found and no explicit prefix given.
        echo $BOLDTAG"Dedukti installation not found."$NORMALTAG
        echo "Specify the path where to find Dedukti commands."
        read USER_INPUT
        DKDIR=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$DKDIR" = "" ] ;
        then
            echo "Error. Dedukti not available. Install it first."
            exit 1
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    DKDIR=$TOOLS_PREFIX
fi
fi                 # End of temporary de-activation of Dedukti.


if false
then                 # Temporary de-activation of Dedukti.
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    SKWITNESS=`which skcheck`
    SKDIR=`dirname $SKWITNESS`
    if [ "$SKDIR" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"Sukerujo installation found in $SKDIR."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                SKDIR=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                SKDIR=""
            fi
        else
            # Default path: trim it
            SKDIR=""
        fi
    else
        # No skcheck command found and no explicit prefix given.
        echo $BOLDTAG"Sukerujo installation not found."$NORMALTAG
        echo "Specify the path where to find Sukerujo commands."
        read USER_INPUT
        SKDIR=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$SKDIR" = "" ] ;
        then
            echo "Error. Sukerujo not available. Install it first."
            exit 1
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    SKDIR=$TOOLS_PREFIX
fi
fi                 # End of temporary de-activation of Dedukti.


if false
then                 # Temporary de-activation of Dedukti.
# If path to Dedukti is empty here, then ocaml was found but using the PATH.
# So do not prefix it explicitly, letting PATH finding the commands.
if [ "$DKDIR" != "" ] ;
then
    DKCHECK=$DKDIR/dkcheck
else
    DKCHECK=dkcheck
fi
fi                 # End of temporary de-activation of Dedukti.


if false
then                 # Temporary de-activation of Dedukti.
# If path to Sukerujo is empty here, then ocaml was found but using the PATH.
# So do not prefix it explicitly, letting PATH finding the commands.
if [ "$SKDIR" != "" ] ;
then
    SKCHECK=$SKDIR/skcheck
    SKDEP=$SKDIR/skdep
else
    SKCHECK=skcheck
    SKDEP=skdep
fi
fi                 # End of temporary de-activation of Dedukti.



# #############################################################################
# Installation administrativia

# At this point, if INSTALL_PREFIX has been overriden while parsing options,
# both the 4 following variables will take benefit of this overriding.
INSTALL_BIN_DIR=${INSTALL_PREFIX}/bin
INSTALL_LIB_DIR=${INSTALL_PREFIX}/lib/focalize
INSTALL_MAN_DIR=${INSTALL_PREFIX}/man
INSTALL_DOC_DIR=${INSTALL_PREFIX}/share/focalize



# Check if installation directories are writable, if so do not use sudo
# otherwise, use it.
echo "Checking if destination directories are writable..."
SUDO=
mkdir $INSTALL_BIN_DIR || true
touch $INSTALL_BIN_DIR/writable_p
if [ "$?" = 0 ] ;
then
    rm -f $INSTALL_BIN_DIR/writable_p
else
    SUDO=sudo
fi

if [ "$SUDO" = "" ] ;
then
    mkdir $INSTALL_LIB_DIR || true
    touch $INSTALL_LIB_DIR/writable_p
    if [ "$?" = 0 ]
    then
        rm -f $INSTALL_LIB_DIR/writable_p
    else
        SUDO=sudo
    fi
fi

if [ "$SUDO" = "" ] ;
then
    mkdir $INSTALL_MAN_DIR || true
    touch $INSTALL_MAN_DIR/writable_p
    if [ "$?" = 0 ]
    then
        rm -f $INSTALL_MAN_DIR/writable_p
    else
        SUDO=sudo
    fi
fi

if [ "$SUDO" = "" ] ;
then
    mkdir $INSTALL_DOC_DIR || true
    touch $INSTALL_DOC_DIR/writable_p
    if [ "$?" = 0 ]
    then
        rm -f $INSTALL_DOC_DIR/writable_p
    else
        SUDO=sudo
    fi
fi

if [ "$SUDO" = "" ] ;
then
    echo "No need to sudo for installation."
else
    echo "Need to sudo for installation."
fi



# #############################################################################
# Misc non mandatory tools.

# Check if LaTeX is available.
LATEX=""
LATEX=`which latex`

# Check if Hevea is available to convert docs into HTML.
HEVEA=""
HEVEA=`which hevea`

# Find GIT. This is used to make the build-stamp to know what was the last
# commit involved in the current build.
echo "#!/bin/sh" > gitlastsha.sh
echo "# Do not modify manually. This file is automatically generated" >> gitlastsha.sh
echo "# and not stored in the repository." >> gitlastsha.sh
GIT=`which git`
# Check that git is installed.
if [ "$GIT" != "" ] ;
then
    # Check that we are in a git repository.
    git log > /dev/null
    if [ "$?" = 0 ] ;
    then
        echo "git log -1 --format=\"%H\"" >> gitlastsha.sh
    else
        echo "echo git log not available" >> gitlastsha.sh
    fi
else
    echo "echo git log not available" >> gitlastsha.sh
fi
chmod +x gitlastsha.sh



# #############################################################################
# Misc administrativia

# If Coq version is < 8.5, then we must call focalizec with the
# -coq_version option set to ensure that the loadpath mechanism uses -I instead
# of the -Q option.
COQ_VERSION=`$COQC -v | grep version | cut -d ' ' -f 6`



# #############################################################################
# Generate the installation related source file.
CONFIG_SUMMARY_DOT_ML=focalizec/src/basement/installation.ml

rm -f $CONFIG_SUMMARY_DOT_ML
echo "(* This file is automatically generated by configure. Do not manually edit. *)" \
     > $CONFIG_SUMMARY_DOT_ML
echo "let install_bin_dir = \"$INSTALL_BIN_DIR\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let install_lib_dir = \"$INSTALL_LIB_DIR\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let caml_byt_compiler = \"$CAMLBYT\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let caml_bin_compiler = \"$CAMLBIN\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let coq_compiler = \"$COQC\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let dedukti_compiler = \"$DKCHECK\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let sukerujo_compiler = \"$SKCHECK\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let zvtov_compiler = \"$INSTALL_BIN_DIR/zvtov\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let zenon_compiler = \"$ZENON\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let zenon_libdir = \"$ZENON_LIB_DIR\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "(* End of generated source file. *)" >> $CONFIG_SUMMARY_DOT_ML
chmod a-w $CONFIG_SUMMARY_DOT_ML



# #############################################################################
# Generate the installation and configuration file containing tools vars.
CONFIGURATION_VARS_FILE=.config_var

rm -f $CONFIGURATION_VARS_FILE
echo "INSTALL_PREFIX=$INSTALL_PREFIX" > $CONFIGURATION_VARS_FILE
echo "INSTALL_PREFIX_GIVEN=$INSTALL_PREFIX_GIVEN" >> $CONFIGURATION_VARS_FILE
echo "INTERACTIVE=$INTERACTIVE" >> $CONFIGURATION_VARS_FILE
echo "CAMLBYT=$CAMLBYT" >> $CONFIGURATION_VARS_FILE
echo "CAMLBIN=$CAMLBIN" >> $CONFIGURATION_VARS_FILE
echo "CAMLLEX=$CAMLLEX" >> $CONFIGURATION_VARS_FILE
echo "CAMLYACC=$CAMLYACC" >> $CONFIGURATION_VARS_FILE
echo "CAMLDOC=$CAMLDOC" >> $CONFIGURATION_VARS_FILE
echo "CAMLDEP=$CAMLDEP" >> $CONFIGURATION_VARS_FILE
echo "COQC=$COQC" >> $CONFIGURATION_VARS_FILE
echo "COQDEP=$COQDEP" >> $CONFIGURATION_VARS_FILE
echo "COQ_VERSION=$COQ_VERSION" >> $CONFIGURATION_VARS_FILE
echo "DKCHECK=$DKCHECK" >> $CONFIGURATION_VARS_FILE
echo "SKDEP=$SKDEP" >> $CONFIGURATION_VARS_FILE
echo "SKCHECK=$SKCHECK" >> $CONFIGURATION_VARS_FILE
echo "WARN_ERROR=a" >> $CONFIGURATION_VARS_FILE
echo "ZVTOV=$INSTALL_BIN_DIR/zvtov" >> $CONFIGURATION_VARS_FILE
echo "ZENON=$ZENON" >> $CONFIGURATION_VARS_FILE
echo "MAKE_DOC=$MAKE_DOC" >> $CONFIGURATION_VARS_FILE
echo "INSTALL_BIN_DIR=$INSTALL_BIN_DIR" >> $CONFIGURATION_VARS_FILE
echo "INSTALL_LIB_DIR=$INSTALL_LIB_DIR" >> $CONFIGURATION_VARS_FILE
echo "INSTALL_MAN_DIR=$INSTALL_MAN_DIR" >> $CONFIGURATION_VARS_FILE
echo "INSTALL_DOC_DIR=$INSTALL_DOC_DIR" >> $CONFIGURATION_VARS_FILE
echo "SUDO=$SUDO" >> $CONFIGURATION_VARS_FILE
echo "HEVEA=$HEVEA" >> $CONFIGURATION_VARS_FILE
echo "LATEX=$LATEX" >> $CONFIGURATION_VARS_FILE
chmod a-w $CONFIGURATION_VARS_FILE



# #############################################################################
# Create .depend files.
SUB_DIRS="zvtov focalizec/src/basement focalizec/src/parser \
  focalizec/src/typing \
  focalizec/src/docgen focalizec/src/commoncodegen focalizec/src/mlcodegen \
  focalizec/src/coqcodegen focalizec/src/dkcodegen focalizec/src/testing \
  focalizec/src/relation_extraction focalizec/src/focalizedep \
  focalizec/src/toplevel focalizec/src/focalizetest focalizec/src/focalizeig \
  focalizec/doc_src/tex/refman \
  focalizec/doc_src/tex/tutorial \
  focalizec/src/stdlib \
  focalizec/src/extlib focalizec/src/extlib/algebra \
  focalizec/src/extlib/airport_security focalizec/src/contribs"

touch .depend

for i in $SUB_DIRS ; do
  (cd $i; touch .depend; mkdir -p odoc)
done



# #############################################################################
# Summary feedback.
echo "Configuration summary for focalize:"
echo "  Installation directories prefix = $INSTALL_PREFIX"
echo "  ocamlc = $CAMLBYT"
echo "  ocamlopt = $CAMLBIN"
echo "  ocamllex = $CAMLLEX"
echo "  ocamlyacc = $CAMLYACC"
echo "  ocamldoc = $CAMLDOC"
echo "  ocamldep = $CAMLDEP"
echo "  coqc = $COQC"
echo "  Coq version: $COQ_VERSION"
echo "  zenon = $ZENON"
echo "  zvtov = $INSTALL_BIN_DIR/zvtov"
echo "  coqdep = $COQDEP"
echo "  dkcheck = $DKCHECK"
echo "  skdep = $SKDEP"
echo "  skcheck = $SKCHECK"
echo "  Must generate PDF documentation files: $MAKE_DOC"
echo "  binaries -> $INSTALL_BIN_DIR"
echo "  libraries -> $INSTALL_LIB_DIR"
echo "  man pages -> $INSTALL_MAN_DIR"
echo "  other documentation -> $INSTALL_DOC_DIR"
echo "  git = $GIT  (not important if not available)"
echo "  zenon libraries directory = $ZENON_LIB_DIR"
echo "  Use sudo to install -> $SUDO"
if [ "$LATEX" != "" ] ;
then
    echo "  LaTeX found, PDF docs will be generated."
else
    echo "  LaTeX NOT found, PDF docs won't be generated."
fi
if [ "$HEVEA" != "" ] ;
then
    echo "  Hevea DVI to HTML utility found, HTML docs will be generated."
else
    echo "  Hevea DVI to HTML utility NOT found, HTML docs won't be generated."
fi
if [ "$COQ_VERSION" \< "8.5" ] ;
then
    echo $BOLDTAG"ATTENTION:$NORMALTAG you are using a version of Coq < 8.5. FoCaliZeC must be called with"
    echo "the $BOLDTAG$$COQ_VERSION_OPTION$NORMALTAG option."
fi

echo "Done. Now, please invoke: 'make all'"
