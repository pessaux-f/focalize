#!/bin/sh

# ************************************************************************** #
#                                                                            #
#                        FoCaLiZe compiler                                   #
#                                                                            #
#            François Pessaux                                                #
#            Pierre Weis                                                     #
#            Damien Doligez                                                  #
#            Raphaël Cauderlier                                              #
#                                                                            #
#                               LIP6  --  INRIA Rocquencourt                 #
#                                                                            #
#  Copyright 2007 - ... LIP6 and INRIA                                       #
#            2012 - ... ENSTA ParisTech                                      #
#            2013 - ... CNAM CEDRIC-CPR                                      #
#  Distributed only by permission.                                           #
#                                                                            #
# ************************************************************************** #

# $Id: configure,v 1.95 2012-10-30 13:56:05 pessaux Exp $

BOLDTAG="\033[1m"
UNDERLINETAG="\033[4m"
NORMALTAG="\033[0m"

usage () {
    echo "usage: ./configure [options] [<directory>]"
    echo
    echo "Options are:"
    echo "  [-]-interactive"
    echo "    run interactively, asking questions."
    echo "  [-]-tools_prefix <directory>"
    echo "    set <directory> as the directory prefix where tools required to"
    echo "    build FoCaLiZe are installed. The currently required non-common"
    echo "    tools are OCaml and Coq."
}


INTERACTIVE=false;
TOOLS_PREFIX_GIVEN=false;
TOOLS_PREFIX="";


# Remembering the number of arguments to this script, in order
# to parse them properly.
argc="$#"

# #############################################################################
# Parsing arguments.
case ${argc} in
  0) ;;
  *)
  while : ; do
    # If nothing else to parse then end the loop.
    case $# in 0) break;; *);; esac
    case "$1" in
      -interactive | --interactive)
       INTERACTIVE=true;
       shift;;
      -tools_prefix | --tools_prefix)
       TOOLS_PREFIX_GIVEN=true;
       TOOLS_PREFIX="$2";
       shift 2;;
      -help | --help)
       usage;
       shift;
       exit 0;;
      -*)
       option="$1";
       echo "./configure: bad option '${option}'" >&2 && \
       echo "For help, use ./configure -help" >&2 && \
       shift;
       exit 2;;
    esac;
  done
  ;;
esac

# #############################################################################
# Pre-requisite tools stuff.
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    CAMLWITNESS=`which ocamlc`
    CAMLDIR=`dirname $CAMLWITNESS`
    if [ "$CAMLDIR" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"OCaml installation found in $CAMLDIR."$NORMALTAG
            echo "Press enter to use default or specify another path."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                CAMLDIR=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                CAMLDIR=""
            fi
        else
            # Default path: trim it
            CAMLDIR=""
        fi
    else
        # No ocamlc command found and no explicit prefix given.
        echo $BOLDTAG"OCaml installation not found."$NORMALTAG
        echo "Specify the path where to find OCaml commands."
        read USER_INPUT
        CAMLDIR=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$CAMLDIR" = "" ] ;
        then
            echo "Error. OCaml not available. Install it first."
            exit 1
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    CAMLDIR=$TOOLS_PREFIX
fi

# If path to ocaml is empty here, then ocaml was found but using the PATH.
# So do not prefix it explicitly, letting PATH finding the commands.
if [ "$CAMLDIR" != "" ] ;
then
    CAMLBYT=$CAMLDIR/ocamlc
    CAMLBIN=$CAMLDIR/ocamlopt
    CAMLLEX=$CAMLDIR/ocamllex
    CAMLYACC=$CAMLDIR/ocamlyacc
    CAMLDOC=$CAMLDIR/ocamldoc
    CAMLDEP=$CAMLDIR/ocamldep
else
    CAMLBYT=ocamlc
    CAMLBIN=ocamlopt
    CAMLLEX=ocamllex
    CAMLYACC=ocamlyacc
    CAMLDOC=ocamldoc
    CAMLDEP=ocamldep
fi

if [ $TOOLS_PREFIX_GIVEN != true ]
then
    COQWITNESS=`which coqc`
    COQDIR=`dirname $COQWITNESS`
    if [ "$COQDIR" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"Coq installation found in $COQDIR."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                COQDIR=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                COQDIR=""
            fi
        else
            # Default path: trim it
            COQDIR=""
        fi
    else
        # No coqc command found and no explicit prefix given.
        echo $BOLDTAG"Coq installation not found."$NORMALTAG
        echo "Specify the path where to find Coq commands."
        read USER_INPUT
        COQDIR=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$COQDIR" = "" ] ;
        then
            echo "Error. Coq not available. Install it first."
            exit 1
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    COQDIR=$TOOLS_PREFIX
fi

# If path to coq is empty here, then ocaml was found but using the PATH.
# So do not prefix it explicitly, letting PATH finding the commands.
if [ "$COQDIR" != "" ] ;
then
    COQC=$COQDIR/coqc
    COQDEP=$COQDIR/coqdep
else
    COQC=coqc
    COQDEP=coqdep
fi


if [ $TOOLS_PREFIX_GIVEN != true ]
then
    DKWITNESS=`which dkcheck`
    DKDIR=`dirname $DKWITNESS`
    if [ "$DKDIR" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"Dedukti installation found in $DKDIR."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                DKDIR=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                DKDIR=""
            fi
        else
            # Default path: trim it
            DKDIR=""
        fi
    else
        # No dkcheck command found and no explicit prefix given.
        echo $BOLDTAG"Dedukti installation not found."$NORMALTAG
        echo "Dedukti is an optional dependency."
        echo "If you want to use FoCaLiZe without Dedukti, leave this blank."
        echo "Otherwise please specify the path to the directory containing the Dedukti commands."
        read USER_INPUT
        DKDIR=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$DKDIR" = "" ] ;
        then
            echo "Warning. Compiling without Dedukti."
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    DKDIR=$TOOLS_PREFIX
fi

# If path to Dedukti is empty here, then ocaml was found but using the PATH.
# So do not prefix it explicitly, letting PATH finding the commands.
if [ "$DKDIR" != "" ] ;
then
    DKCHECK=$DKDIR/dkcheck
else
    DKCHECK=dkcheck
fi

# Check that the file $DKCHECK is executable
if [ ! `which $DKCHECK` ] ;
then
    DKCHECK=""
fi

if [ $TOOLS_PREFIX_GIVEN != true ]
then
    SKWITNESS=`which skcheck`
    SKDIR=`dirname $SKWITNESS`
    if [ "$SKDIR" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"Sukerujo installation found in $SKDIR."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                SKDIR=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                SKDIR=""
            fi
        else
            # Default path: trim it
            SKDIR=""
        fi
    else
        # No skcheck command found and no explicit prefix given.
        echo $BOLDTAG"Sukerujo installation not found."$NORMALTAG
        echo "Dedukti is an optional dependency."
        echo "If you want to use FoCaLiZe without Sukerujo, leave this blank."
        echo "Otherwise please specify the path to the directory containing the Sukerujo commands."
        read USER_INPUT
        SKDIR=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$SKDIR" = "" ] ;
        then
            echo "Warning. Compiling without Sukerujo."
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    SKDIR=$TOOLS_PREFIX
fi

# If path to Sukerujo is empty here, then ocaml was found but using the PATH.
# So do not prefix it explicitly, letting PATH finding the commands.
if [ "$SKDIR" != "" ] ;
then
    SKCHECK=$SKDIR/skcheck
    SKDEP=$SKDIR/skdep
else
    SKCHECK=skcheck
    SKDEP=skdep
fi

# Check that the file $SKCHECK is executable
if [ ! `which $SKCHECK` ] ;
then
    SKCHECK=""
fi

# Check that the file $SKDEP is executable
if [ ! `which $SKDEP` ] ;
then
    SKDEP=""
fi


# #############################################################################
# Commands stuff.
# Look for Zenon
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    ZENON=`which zenon`
    if [ "$ZENON" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"zenon found in $ZENON."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                ZENON=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                ZENON=zenon
            fi
        else
            # Default path: trim it
            ZENON=zenon
        fi
    else
        # No zenon command found and no explicit prefix given.
        echo $BOLDTAG"zenon not found."$NORMALTAG
        echo "Specify where to find zenon."
        read USER_INPUT
        ZENON=$USER_INPUT
        # Finally check that a path was entered by the user.
        if [ "$ZENON" = "" ] ;
        then
            echo "Error. zenon not available. Install it first."
            exit 1
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    ZENON=$TOOLS_PREFIX/bin/zenon
fi

# Find zenon's libraries directly using the -where option of zenon.
ZENON_LIB_DIR=`${ZENON} -where`
if [ "$ZENON_LIB_DIR" = "" ] ;
then
    echo "Error. zenon libraries not available."
    echo "May be zenon is not installed. Install it first."
    exit 1
fi

# Look for Zenon Modulo
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    ZENONM=`which zenon_modulo`
    if [ "$ZENONM" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"Zenon Modulo found in $ZENONM."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                ZENONM=$USER_INPUT
            else
                # Default path kept: trim it to just let the PATH acting.
                ZENONM=zenon_modulo
            fi
        else
            # Default path: trim it
            ZENONM=zenon_modulo
        fi
    else
        # No zenon_modulo command found and no explicit prefix given.
        echo $BOLDTAG"Zenon Modulo installation not found."$NORMALTAG
        echo "Zenon Modulo is an optional dependency."
        echo "If you want to use FoCaLiZe without Zenon Modulo, leave this blank."
        echo "Otherwise please specify the path to the zenon_modulo command."
        read USER_INPUT
        ZENONM=$USER_INPUT
        # Finally check that a director was entered by the user.
        if [ "$ZENONM" == "" ] ;
        then
            echo "Warning. Compiling without Zenon Modulo."
        fi
    fi
else
    # Explicit tools prefix given, keep it blindly.
    ZENONM=$TOOLS_PREFIX/bin/zenon_modulo
fi

# Check that the file $ZENONM is executable
if [ ! `which $ZENONM` ] ;
then
    ZENONM=""
    ZENONM_LIB_DIR=""
else
    # Find zenon modulo's libraries directly using the -where option of zenon.
    ZENONM_LIB_DIR=`${ZENONM} -where`
    if [ "$ZENONM_LIB_DIR" = "" ] ;
    then
        echo "Error. Zenon Modulo was found but its libraries are not available."
        exit 1
    fi
fi



# #############################################################################
# Generate the installation and configuration file containing tools vars.
CONFIGURATION_VARS_FILE=.config_var

rm -f $CONFIGURATION_VARS_FILE
echo "CAMLBYT=$CAMLBYT" > $CONFIGURATION_VARS_FILE
echo "CAMLBIN=$CAMLBIN" >> $CONFIGURATION_VARS_FILE
echo "CAMLLEX=$CAMLLEX" >> $CONFIGURATION_VARS_FILE
echo "CAMLYACC=$CAMLYACC" >> $CONFIGURATION_VARS_FILE
echo "CAMLDOC=$CAMLDOC" >> $CONFIGURATION_VARS_FILE
echo "CAMLDEP=$CAMLDEP" >> $CONFIGURATION_VARS_FILE
echo "COQC=$COQC" >> $CONFIGURATION_VARS_FILE
echo "COQDEP=$COQDEP" >> $CONFIGURATION_VARS_FILE
echo "DKCHECK=$DKCHECK" >> $CONFIGURATION_VARS_FILE
echo "SKDEP=$SKDEP" >> $CONFIGURATION_VARS_FILE
echo "SKCHECK=$SKCHECK" >> $CONFIGURATION_VARS_FILE
echo "ZENON=$ZENON" >> $CONFIGURATION_VARS_FILE
echo "ZENONM=$ZENONM" >> $CONFIGURATION_VARS_FILE
echo "ZENON_LIB_DIR=$ZENON_LIB_DIR" >> $CONFIGURATION_VARS_FILE
echo "ZENONM_LIB_DIR=$ZENONM_LIB_DIR" >> $CONFIGURATION_VARS_FILE
echo "WARN_ERROR=a" >> $CONFIGURATION_VARS_FILE
chmod a-w $CONFIGURATION_VARS_FILE

# #############################################################################
# Summary feedback.
echo "Configuration summary for focalize:"
echo "  ocamlc = $CAMLBYT"
echo "  ocamlopt = $CAMLBIN"
echo "  ocamllex = $CAMLLEX"
echo "  ocamlyacc = $CAMLYACC"
echo "  ocamldoc = $CAMLDOC"
echo "  ocamldep = $CAMLDEP"
echo "  coqc = $COQC"
echo "  coqdep = $COQDEP"
echo "  dkcheck = $DKCHECK"
echo "  skdep = $SKDEP"
echo "  skcheck = $SKCHECK"
echo "  zenon = $ZENON"
echo "  zenon_modulo = $ZENONM"
echo "Done"
