#!/bin/sh

#**********************************************************************#
#                                                                      #
#                        FoCaLize compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2008 INRIA                                                #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

#  $Id: configure,v 1.14 2008-12-18 11:38:14 weis Exp $

# Fix the name and version of the software
PROJECT_NAME=focalize
MAIN_VERSION_NUMBER=0
SUB_VERSION_NUMBER=1
PATCH_VERSION_NUMBER=rc0
FULL_VERSION_NUMBER=${MAIN_VERSION_NUMBER}.${SUB_VERSION_NUMBER}.${PATCH_VERSION_NUMBER}
FULL_PROJECT_NAME=${PROJECT_NAME}-${FULL_VERSION_NUMBER}

# The absolute path of this set of source files.
ABSOLUTE_ROOT_DIR=`pwd`

check () {
  type "$1" >/dev/null 2>&1
}

# Default settings

# General defaults for the package installation
DEFAULT_PREFIX=/usr/local
DEFAULT_LIB_DIR=${DEFAULT_PREFIX}/lib
DEFAULT_BIN_DIR=${DEFAULT_PREFIX}/bin

# General defaults for the installation of the external tools of the package
DEFAULT_SHARE_PREFIX=${DEFAULT_PREFIX}/share
DEFAULT_SHARE_PROJECT_DIR=${DEFAULT_SHARE_PREFIX}/${FULL_PROJECT_NAME}
DEFAULT_DEBUG=true

# Defaults for zenon
SUM=:
CONVERT=:
COQC=:
GS=:

# Defaults for zvtov
DEFAULT_USE_XMLRPC=false
XMLRPC=xmlrpc
XMLRPC_FLAGS=""
XMLRPC_LINK=""

# Aborting procedures.
abort_configuration () {
  echo;
  echo "configure: ABORTING CONFIGURATION!";
  echo;
  echo "$1";
}

abort_remedy () {
  echo;
  echo "$1";
  echo "(See configure -help for details).";
  exit 1;
}

abort_configuration_not_writable_share_prefix_directory () {
  abort_configuration \
    "You cannot install external tools in the directory $1: it is not writable for you.";
  abort_remedy \
    "Please, use configure with the \"-share_prefix\" option set to a writable directory.";
}

while : ; do
  case $# in 0) break;; esac

  case "$1" in
    -prefix | --prefix) PREFIX="$2"; shift 2;;
    -share_prefix | --share_prefix) SHARE_PREFIX="$2"; shift 2;;
    -bindir | --bindir) BIN_DIR="$2"; shift 2;;
    -libdir | --libdir) LIB_DIR="$2"; shift 2;;
    -convert | --convert) CONVERT="$2"; shift 2;;
    -gs | --gs) GS="$2"; shift 2;;
    -sum | --sum) SUM="$2"; shift 2;;
    -use_xmlrpc | --use_xmlrpc) USE_XMLRPC=true; shift;;
    -xmlrpc | --xmlrpc) XMLRPC="$2"; shift 2;;
    -xmlrpc_flags | --xmlrpc_flags) XMLRPC_FLAGS="$2"; shift 2;;
    -xmlrpc_link | --xmlrpc_link) XMLRPC_LINK="$2"; shift 2;;
    -debug | --debug | --enable_debug) DEBUG=true; shift;;
    -nodebug | --nodebug | --disable_debug) DEBUG=false; shift;;
    -help | --help)
       echo "usage: ./configure [options] [<directory>]"
       echo
       echo "if optional argument <directory> is provided, it is used as the"
       echo "[-share_prefix] option (see below)."
       echo
       echo "general options are:"
       echo
       echo "  [-]-share_prefix <directory>"
       echo "    set <directory> as the directory prefix for the installation of external tools."
       echo "    External tools are mandatory for ${PROJECT_NAME} to work."
       echo "    External tools must be built and installed during configuration,"
       echo "    since they are needed to correctly compile, install, and safely use"
       echo "    ${PROJECT_NAME}."
       echo "    External tools install in the directory <directory>/${FULL_PROJECT_NAME}/,"
       echo "    once they have ben built."
       echo "    as a consequence, you must have the permission to install directories"
       echo "    and files in <directory> to properly configure ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_SHARE_PREFIX}.)"
       echo "  [-]-prefix <directory>"
       echo "    set <directory> as the directory prefix for installation of ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_PREFIX}.)"
       echo "  [-]-bindir <directory>"
       echo "    set <directory> as the binary directory for installation of binaries for ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_BIN_DIR}.)"
       echo "  [-]-libdir <directory>"
       echo "    set <directory> as the library directory for installation of libraries for ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_LIB_DIR}.)"
       echo "  [-]-docdir <directory>"
       echo "    set <directory> as the directory for installation of documentation for ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_DOC_DIR}.)"
       echo "  [-]-mandir <directory>"
       echo "    set <directory> as the directory for installation of man pages for ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_MAN_DIR}.)"
       echo "  [-]-debug | [-]-enable_debug"
       echo "    enable debugging"
       echo "  [-]-nodebug | --disable_debug"
       echo "    disable debugging"
       echo "  [-]-help";
       echo "    display help and exit"
       echo
       echo "options specific to zenon are:"
       echo
       echo "  [-]-convert <executable-file>"
       echo "    set absolute path for the command convert."
       echo "  [-]-coqc <executable-file>"
       echo "    set absolute path for the command coqc."
       echo "  [-]-gs <executable-file>"
       echo "    set absolute path for the command gs."
       echo "  [-]-sum <executable-file>"
       echo "    set absolute path for the check-sum command."
       echo
       echo "options specific to zvtov are:"
       echo "options for zvtov are:"
       echo "  [-]-use_xmlrpc";
       echo "    configure zvtov to use xmlrpc."
       echo "  [-]-xmlrpc <executable-file>";
       echo "    set absolute path for the command xmlrpc."
       echo "  [-]-xmlrpc_flags <string>";
       echo "    set the string option argument to pass to xmlrpc invocations."
       echo "  (Default value for <string> is:";
       echo "   \"\`ocamlfind query -r -i-format xmlrpc | tr '\\\\012' ' '\`\").";
       echo "  [-]-xmlrpc_link <string>";
       echo "    set the link options to pass when linking xmlrpc.";
       echo "  (Default value for <string> is:";
       echo "   \"\`ocamlfind query -r -predicates byte -a-format xmlrpc | tr '\\\\012' ' '\`\").";
       exit 0
       ;;
    -*)
       echo "./configure: bad option '$1'" >&2
       echo "For help, use ./configure -help" >&2
       exit 2
       ;;
    *)
       case $# in
         1) SHARE_PREFIX="$1"; shift;;
         *)
           echo "./configure: bad arguments '$@'" >&2
           echo "For help, use ./configure -help" >&2
           exit 2
           ;;
       esac
       ;;
  esac
done

set_XMLRPC_FLAGS () {
  if test -n XMLRPC_FLAGS; then
    if check "ocamlfind"; then
      XMLRPC_FLAGS="`ocamlfind query -r -i-format xmlrpc | tr '\012' ' '`"
    fi
  fi
}

set_XMLRPC_LINK () {
  if test -n XMLRPC_FLAGS; then
    if check "ocamlfind"; then
      XMLRPC_LINK="`ocamlfind query -r -predicates byte -a-format xmlrpc | tr '\012' ' '`"
    fi
  fi
}

set_XMLRPC () {
 if test -z $USE_XMLRPC; then USE_XMLRPC=${DEFAULT_XMLRPC}; fi
 if test $USE_XMLRPC; then
   set_XMLRPC_FLAGS;
   set_XMLRPC_LINK;
 fi;
}

set_DEBUG () {
  if test -z $DEBUG; then DEBUG=${DEFAULT_DEBUG}; fi
  if test $DEBUG; then
    BYT_DEBUG_FLAGS="-g";
    BIN_DEBUG_FLAGS="-dtypes";
  fi
}

set_dirs () {
  if test -z ${PREFIX}; then PREFIX=${DEFAULT_PREFIX}; fi
  BIN_DIR="${PREFIX}/bin"
  LIB_DIR="${PREFIX}/lib"
  DOC_DIR="${PREFIX}/doc"
  MAN_DIR="${PREFIX}/man"
  if test -z ${SHARE_PREFIX}; then SHARE_PREFIX=${DEFAULT_SHARE_PREFIX}; fi
  SHARE_PROJECT_DIR="${SHARE_PREFIX}/${FULL_PROJECT_NAME}"
  SHARE_BIN_DIR="${SHARE_PROJECT_DIR}/bin"
  SHARE_LIB_DIR="${SHARE_PROJECT_DIR}/lib"
  SHARE_MAN_DIR="${SHARE_PROJECT_DIR}/man"
  SHARE_DOC_DIR="${SHARE_PROJECT_DIR}/doc"
}

set_COQ_MAKE () {
 COQ_MAKE=make;
 if check "gmake"; then COQ_MAKE=gmake; fi
}

set_variables () {
  set_DEBUG;
  set_XMLRPC;
  set_dirs;
  set_COQ_MAKE;
}

check_installation_dirs () {
  # The list of directories that must be installable during configuration.
  CONFIGURATION_INSTALLABLE_DIRS="${SHARE_PREFIX}"
  for i in ${CONFIGURATION_INSTALLABLE_DIRS}; do
    echo "Checking if we can install in $i...";
    if test -d $i; then echo "  the directory exists: good.";
      else
        echo "  the directory does not exist: unrecoverable failure.";
        abort_configuration \
          "You cannot install in $i, because it is not a directory.";
        abort_remedy \
          "Please, create a directory where you can install files and directories.";
    fi
    if test -w $i; then echo "  the directory is writable: good.";
      else
        echo "  the directory is not writable: unrecoverable failure.";
        abort_configuration_not_writable_share_prefix_directory "$i";
    fi
    if (touch $i/$$; rm -f $i/$$); then echo "  you can install in the directory: good.";
      else
        echo "  you cannot install in the directory: unrecoverable failure.";
        abort_configuration_not_writable_share_prefix_directory "$i";
    fi
  done
}

make_config_var () {
  sed -e "s,@PROJECT_NAME@,$PROJECT_NAME," \
      -e "s,@MAIN_VERSION_NUMBER@,$MAIN_VERSION_NUMBER," \
      -e "s,@SUB_VERSION_NUMBER@,$SUB_VERSION_NUMBER," \
      -e "s,@PATCH_VERSION_NUMBER@,$PATCH_VERSION_NUMBER," \
      -e "s,@FULL_VERSION_NUMBER@,$FULL_VERSION_NUMBER," \
      -e "s,@FULL_PROJECT_NAME@,$FULL_PROJECT_NAME," \
  \
      -e "s,@ABSOLUTE_ROOT_DIR@,$ABSOLUTE_ROOT_DIR," \
      -e "s,@PREFIX@,$PREFIX," \
      -e "s,@BIN_DIR@,$BIN_DIR," \
      -e "s,@LIB_DIR@,$LIB_DIR," \
      -e "s,@DOC_DIR@,$DOC_DIR," \
      -e "s,@MAN_DIR@,$MAN_DIR," \
      -e "s,@SHARE_PREFIX@,$SHARE_PREFIX," \
      -e "s,@SHARE_PROJECT_DIR@,$SHARE_PROJECT_DIR," \
      -e "s,@SHARE_BIN_DIR@,$SHARE_BIN_DIR," \
      -e "s,@SHARE_LIB_DIR@,$SHARE_LIB_DIR," \
      -e "s,@SHARE_DOC_DIR@,$SHARE_DOC_DIR," \
      -e "s,@SHARE_MAN_DIR@,$SHARE_MAN_DIR," \
  \
      -e "s,@BYT_DEBUG_FLAGS@,$BYT_DEBUG_FLAGS," \
      -e "s,@BIN_DEBUG_FLAGS@,$BIN_DEBUG_FLAGS," \
  \
      -e "s,@CONVERT@,$CONVERT," \
      -e "s,@GS@,$GS," \
      -e "s,@SUM@,$SUM," \
  \
      -e "s,@USE_XMLRPC@,$USE_XMLRPC," \
      -e "s,@XMLRPC@,$XMLRPC," \
      -e "s,@XMLRPC_FLAGS@,$XMLRPC_FLAGS," \
      -e "s,@XMLRPC_LINK@,$XMLRPC_LINK," \
  \
      -e "s,@COQ_MAKE@,$COQ_MAKE," \
      <.config_var.in >.config_var
}

touch_depends () {
  touch ./.depend;
  touch tarballs/.depend;
}

configure_auto () {
  cp -f .config_var zenon/;
  cp -f .config_var zvtov/;
  cp -f .config_var focalizec/;
}

summarize_configuration () {
  echo "***********************************"
  echo "Configuration summary for focalize:"
  echo
  cat .config_var
  echo
  echo "***********************************"
}

main () {
#  parse_arguments;
  set_variables;
  check_installation_dirs;
  make_config_var;
  touch_depends;
  configure_auto;
  summarize_configuration;
  make configure_external;
}

main; exit 0
