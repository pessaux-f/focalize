#**********************************************************************#
#                                                                      #
#                        FoCaLiZe compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2008 LIP6 and INRIA                                       #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

# $Id: Makefile.common,v 1.36 2009-10-01 08:03:44 weis Exp $

BIN_OBJS = $(BYT_OBJS:.cmo=.cmx)

.PHONY: all byt bin
.PHONY: clean unconfigure distclean install uninstall
.PHONY: doc docdir odoc depend tests lib

all:: byt bin

byt:: $(BYT_OBJS)

bin:: $(BIN_OBJS)

doc docdir:: $(BYT_OBJS)

odoc:: $(BYT_OBJS)
	$(MKDIR) odoc && \
	echo "caml_doc_compiler is $(CAML_DOC_COMPILER)" >&2 && \
	echo "caml_doc is $(CAML_DOC)" >&2 && \
	$(CAML_DOC) $(CAML_INCLUDES) -html -d odoc $(BYT_OBJS:.cmo=.ml)

clean::
	@$(RM) *.cm* *.o *.a *.annot *.out *.bin *.byt
	$(RM) *.vo *.fo *~ .*~ log *.mangled *.coz *.pfc *.fcd
	if test -d tests; then \
	  for i in tests; do \
	    echo "--> $$i ..." >&2; \
	    ($(CD) $$i && $(MAKE) $@); \
	    err=$$?; \
	    echo "<-- $$i [$$err]" >&2; \
	    case $$err in 0);; *) exit $$err;; esac; \
	  done; \
	fi && \
	if test -d odoc; then \
	  $(RM) odoc/*; \
	fi && \
	if test -d doc; then \
	  $(RM) doc; \
	fi

unconfigure::
	$(RM) .config_var .depend .done_*

distclean:: clean
	$(RM) .\#*

depend::
	$(CAML_DEP) *.mli *.ml > ./.depend

# Only on demand.
tests::
	if test -d tests; then \
	  for i in tests; do \
	    echo "--> $$i ..." >&2; \
	    ($(CD) $$i && $(MAKE) all); \
	    err=$$?; \
	    echo "<-- $$i [$$err]" >&2; \
	    case $$err in 0);; *) exit $$err;; esac; \
	  done; \
	fi

.SUFFIXES: .ml .mli .mll .mly .cmo .cmi .cmx .annot .fcl .fo .zv .v .vo
.SUFFIXES: .fcd .xml
.SUFFIXES: .tex .dvi .ps .pdf .idx
.SUFFIXES: .shtml .html .htm

# Caml rules
.ml.cmo:
	$(CAML_BYT) -c $<

.mli.cmi:
	$(CAML_BYT) -c $<

.ml.cmx:
	$(CAML_BIN) -c $<

.mly.ml:
	$(CAML_YAC) $<

.mll.ml:
	$(CAML_LEX) $<

# FoCaLiZe rules
.fcl.fo:
	$(FOCALIZEC) $<
.fcl.ml:
	$(FOCALIZEC) $<
.fcl.zv:
	$(FOCALIZEC) $<

.zv.v:
	$(ZVTOV) $<

.v.vo:
	$(COQC) $<

.fcl.fcd:
	$(FOCALIZEC) -focalize-doc $<
.fcd.xml:
	$(XSLTPROC) $(FD2HTML) $< | $(XSLTPROC) $(MMLC2P) - > $@

# Tex/LaTeX rules
.tex.dvi:
	$(LATEX) $<
	$(MAKE) $(<:.tex=.idx)
	$(LATEX) $<
.tex.idx:
	$(MAKEINDEX) $(<:.tex=.idx)
.dvi.ps:
	$(DVIPS) $< -o $@
.dvi.pdf:
	$(DVIPDF) $< $@

# Html rules
.shtml.html:
	$(HTMLC) -s $<
.html.htm:
	$(HTMLC) -c $<
.html.dvi:
	$(HEVEA) -fix ${HVA_FILES} $<

include .depend
