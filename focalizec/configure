#!/bin/sh

#**********************************************************************#
#                                                                      #
#                        FoCaLiZe compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2008 INRIA                                                #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

# $Id: configure,v 1.50 2012-10-17 15:09:42 pessaux Exp $

BOLDTAG="\033[1m"
UNDERLINETAG="\033[4m"
NORMALTAG="\033[0m"

SUB_DIRS="src/basement src/parser src/typing \
  src/docgen src/commoncodegen src/mlcodegen src/coqcodegen \
  src/toplevel \
  doc_src/tex/refman \
  doc_src/tex/tutorial \
  src/stdlib \
  src/extlib src/extlib/algebra src/extlib/access_control \
  src/contribs"

touch .depend

for i in $SUB_DIRS ; do
  (cd $i; touch .depend; mkdir -p odoc)
done

# First recover the configuration file providing the name of ocaml and coq commands.
if [ -f "../.config_var" ] ;
    then
    source ../.config_var
else
    echo "Error.Global configuration file not found."
    echo "Run ./configure from the parent directory."
    exit 1
fi

# Remembering the number of arguments to this script, in order
# to parse them properly.
argc="$#"

INTERACTIVE=false;
INSTALL_PREFIX_GIVEN=false;
INSTALL_PREFIX=/usr/local
TOOLS_PREFIX_GIVEN=false;
TOOLS_PREFIX="";

usage () {
    echo "usage: ./configure [options] [<directory>]"
    echo
    echo "  [-]-install_prefix <directory>"
    echo "    set <directory> as the directory prefix for installation of"
    echo "    the FoCaLize commands."
    echo "    (Default value for <directory> is $BOLDTAG$INSTALL_PREFIX$NORMALTAG.)"
    echo "  [-]-tools_prefix <directory>"
    echo "    set <directory> as the directory prefix where tools required to"
    echo "    build FoCaLiZe are installed. The currently required tools (other"
    echo "    than OCaml and Coq already configured) are zenon, zvtov."
    echo "  [-]-interactive"
    echo "    run interactively, asking questions."
}

# #############################################################################
# Parsing arguments.
case ${argc} in
  0) ;;
  *)
  while : ; do
    # If nothing else to parse then end the loop.
    case $# in 0) break;; *);; esac
    case "$1" in
      -interactive | --interactive)
       INTERACTIVE=true;
       shift;;
      -install_prefix | --install_prefix)
       INSTALL_PREFIX_GIVEN=true;
       INSTALL_PREFIX="$2";
       shift 2;;
      -tools_prefix | --tools_prefix)
       TOOLS_PREFIX_GIVEN=true;
       TOOLS_PREFIX="$2";
       shift 2;;
      -help | --help)
       usage;
       shift;
       exit 0;;
      -*)
       option="$1";
       echo "./configure: bad option '${option}'" >&2 && \
       echo "For help, use ./configure -help" >&2 && \
       shift;
       exit 2;;
    esac;
  done
  ;;
esac

# At this point, if INSTALL_PREFIX has been overriden while parsing options,
# both the 4 following variables will take benefit of this overriding.
INSTALL_BIN_DIR=${INSTALL_PREFIX}/bin
INSTALL_LIB_DIR=${INSTALL_PREFIX}/lib/focalize
INSTALL_MAN_DIR=${INSTALL_PREFIX}/man
INSTALL_DOC_DIR=${INSTALL_PREFIX}/share/focalize

# #############################################################################
# Commands stuff.

# Look for Zenon
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    ZENON=`which zenon`
    if [ "$ZENON" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"zenon found in $ZENON."$NORMALTAG
            echo "Press enter to use default or specify another location."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                ZENON=$USER_INPUT
            fi
        fi
    else
        # No zenon command found and no explicit prefix given.
        echo $BOLDTAG"zenon not found."$NORMALTAG
        echo "Specify where to find zenon."
        read USER_INPUT
        ZENON=$USER_INPUT
    fi
     # Finally check that a director was entered by the user.
    if [ "$ZENON" == "" ] ;
    then
        echo "Error. zenon not available. Install it first."
        exit 1
    fi
else
    # Explicit tools prefix given, keep it blindly.
    ZENON=$TOOLS_PREFIX/bin/zenon
fi

# Find zenon's libraries directly using the -where option of zenon.
ZENON_LIB_DIR=`${ZENON} -where`
if [ "$ZENON_LIB_DIR" = "" ] ;
then
    echo "Error. zenon libraries not available."
    echo "May be zenon is not installed. Install it first."
    exit 1
fi

# Look for Zvtov
if [ $TOOLS_PREFIX_GIVEN != true ]
then
    ZVTOV=`which zvtov`
    if [ "$ZVTOV" != "" ] ;
    then
        if [ $INTERACTIVE = true ]
        then
            echo $BOLDTAG"zvtov found in $ZVTOV."$NORMALTAG
            echo "Press enter to use default or specify another zvtov."
            read USER_INPUT
            if [ "$USER_INPUT" != "" ] ;
            then
                ZVTOV=$USER_INPUT
            fi
        fi
    else
        # No zvtov command found and no explicit prefix given.
        echo $BOLDTAG"zvtov not found."$NORMALTAG
        echo "Specify where to find zvtov."
        read USER_INPUT
        ZVTOV=$USER_INPUT
    fi
    # Finally check that a director was entered by the user.
    if [ "$ZVTOV" == "" ] ;
    then
        echo "Error. zvtov not available. Install it first."
        exit 1
    fi
else
    # Explicit tools prefix given, keep it blindly.
    ZVTOV=$TOOLS_PREFIX/bin/zvtov
fi


# #############################################################################
# Installation stuff.
if [ $INSTALL_PREFIX_GIVEN != true ]
then
    if [ $INTERACTIVE = true ]
    then
        # Ask question only in interactive mode, otherwise keep default value.
        echo $BOLDTAG"Where to install FoCaLize binaries ?"$NORMALTAG
        echo "Default is $INSTALL_BIN_DIR."
        echo "Just press enter to use default location."
        read USER_INPUT
        if [ "$USER_INPUT" != "" ] ;
        then
            INSTALL_BIN_DIR=$USER_INPUT
        fi
    fi
fi
# Else, explicit install prefix given while parsing options, keep it blindly.

if [ $INSTALL_PREFIX_GIVEN != true ]
then
    if [ $INTERACTIVE = true ]
    then
        # Ask question only in interactive mode, otherwise keep default value.
        echo $BOLDTAG"Where to install FoCaLize libraries ?"$NORMALTAG
        echo "Default is $INSTALL_LIB_DIR."
        echo "Just press enter to use default location."
        read USER_INPUT
        if [ "$USER_INPUT" != "" ] ;
        then
            INSTALL_LIB_DIR=$USER_INPUT
        fi
    fi
fi
# Else, explicit install prefix given while parsing options, keep it blindly.

if [ $INSTALL_PREFIX_GIVEN != true ]
then
    if [ $INTERACTIVE = true ]
    then
        # Ask question only in interactive mode, otherwise keep default value.
        echo $BOLDTAG"Where to install FoCaLize man pages ?"$NORMALTAG
        echo "Default is $INSTALL_MAN_DIR."
        echo "Just press enter to use default location."
        read USER_INPUT
        if [ "$USER_INPUT" != "" ] ;
        then
            INSTALL_MAN_DIR=$USER_INPUT
        fi
    fi
fi
# Else, explicit install prefix given while parsing options, keep it blindly.

if [ $INSTALL_PREFIX_GIVEN != true ]
then
    if [ $INTERACTIVE = true ]
    then
        # Ask question only in interactive mode, otherwise keep default value.
        echo $BOLDTAG"Where to install FoCaLize other documentation ?"$NORMALTAG
        echo "Default is $INSTALL_DOC_DIR."
        echo "Just press enter to use default location."
        read USER_INPUT
        if [ "$USER_INPUT" != "" ] ;
        then
            INSTALL_DOC_DIR=$USER_INPUT
        fi
    fi
fi
# Else, explicit install prefix given while parsing options, keep it blindly.


# #############################################################################
# Generate the installation related source file.
CONFIG_SUMMARY_DOT_ML=src/basement/installation.ml

rm -f $CONFIG_SUMMARY_DOT_ML
echo "(* This file is automatically generated by configure. Do not manually edit. *)" \
     > $CONFIG_SUMMARY_DOT_ML
echo "let install_bin_dir = \"$INSTALL_BIN_DIR\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let install_lib_dir = \"$INSTALL_LIB_DIR\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let caml_byt_compiler = \"$CAMLBYT\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let caml_bin_compiler = \"$CAMLBIN\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let coq_compiler = \"$COQC\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let zvtov_compiler = \"$ZVTOV\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let zenon_compiler = \"$ZENON\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "let zenon_libdir = \"$ZENON_LIB_DIR\" ;;" >> $CONFIG_SUMMARY_DOT_ML
echo "(* End of generated source file. *)" >> $CONFIG_SUMMARY_DOT_ML
chmod a-w $CONFIG_SUMMARY_DOT_ML

# #############################################################################
# Generate the installation vars.
INSTALLATION_VARS_FILE=.install_var

rm -f $INSTALLATION_VARS_FILE
echo "INSTALL_BIN_DIR=$INSTALL_BIN_DIR" > $INSTALLATION_VARS_FILE
echo "INSTALL_LIB_DIR=$INSTALL_LIB_DIR" >> $INSTALLATION_VARS_FILE
echo "INSTALL_MAN_DIR=$INSTALL_MAN_DIR" >> $INSTALLATION_VARS_FILE
echo "INSTALL_DOC_DIR=$INSTALL_DOC_DIR" >> $INSTALLATION_VARS_FILE
chmod a-w $INSTALLATION_VARS_FILE

# #############################################################################
# If Coq version is < 8.4, then we must call focalizec with the
# -coq_older_8_4 option to ensure code generation is Coq-compatible.
COQ_VERSION=`$COQC -v | grep version | cut -d ' ' -f 6`
if [ "$COQ_VERSION" \< "8.4"  ] ;
then FOCALIZEC_COQ_COMPATIBILITY_OPTION=-coq_older_8_4
else FOCALIZEC_COQ_COMPATIBILITY_OPTION=""
fi

# #############################################################################
# Generate the configuration vars.

CONFIGURATION_VARS_FILE=.config_var

rm -f $CONFIGURATION_VARS_FILE
echo "FOCALIZEC_COQ_COMPATIBILITY_OPTION=$FOCALIZEC_COQ_COMPATIBILITY_OPTION" >> $CONFIGURATION_VARS_FILE
chmod a-w $CONFIGURATION_VARS_FILE

# #############################################################################
# Summary feedback.
echo "Configuration summary for FoCaLize:"
echo "  binaries -> $INSTALL_BIN_DIR"
echo "  libraries -> $INSTALL_LIB_DIR"
echo "  man pages -> $INSTALL_MAN_DIR"
echo "  other documentation -> $INSTALL_DOC_DIR"
echo "  ocaml bytecode compiler = $CAMLBYT"
echo "  ocaml binary compiler = $CAMLBIN"
echo "  coq = $COQC"
echo "  zvtov = $ZVTOV"
echo "  zenon = $ZENON"
echo "  zenon libraries directory = $ZENON_LIB_DIR"
if [ ! "$FOCALIZEC_COQ_COMPATIBILITY_OPTION" = "" ]
then
    echo $BOLDTAG"ATTENTION:$NORMALTAG you are using a version of Coq < 8.4. FoCaliZeC must be called with"
    echo "the $BOLDTAG$FOCALIZEC_COQ_COMPATIBILITY_OPTION$NORMALTAG option."
fi
echo "Done. Now, please invoke: 'make depend' then 'make world'."
