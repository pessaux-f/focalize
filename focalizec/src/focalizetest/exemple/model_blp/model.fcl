(*****************************************************************************)
(*                 Implementation of access control models                   *)
(*                 Author : Charles Morisset / SPI / LIP6                    *)
(*                 Last modification : 03/01/07                              *)
(*****************************************************************************)

open "basics";;


species Setoid = 
  signature equal : Self -> Self -> bool;
  let different(x : Self, y : Self) : bool = ~~(!equal(x, y));
  signature print : Self -> string;
  signature element : Self;
end;;

species Ensemble(A is Setoid) = 
  inherit Setoid;

  representation = list(A);

  let element = [];
  
  let rec est_element(x : A, l : Self) : bool =
    match l with
    | [] -> false
    | e::r ->
       !est_element(x, r) ||
       A!equal(x, e);


  let singleton(x : A) : Self = [x];

  let rec inclus(x, y) =
    match x with
    | [] -> true
    | e::r ->
       !est_element(e, y) && !inclus(r, y);

  let equal(x, y) = !inclus(x, y) && !inclus(y, x);

  let rec del (x : Self , y : A) : Self =
    match x with
    | [] -> []
    | e::r ->
      if A!equal(e, y) then
       !del(r, y)
      else
        e::!del(r, y);

  let rec union(x : Self , y : Self) : Self =
    match x with
    | [] -> y
    | e::r ->
      if !est_element(e, y) then
       !union(r, y)
      else
        e::!union(r, y);

  let rec diff (x : Self, y : Self) : Self =
    match y with
    | [] -> x
    | e::r -> !diff(!del(x, e), r);

end;;

species Lattice =
  inherit Setoid;

  signature inf : Self -> Self -> Self;
  signature sup : Self -> Self -> Self;

  let order_inf(x : Self, y : Self) : bool =
     !equal(!inf(x, y), x);


end;;

(*****************************************************************************)
(*                 Definition des parametres d'une politique                 *)
(*****************************************************************************)

species Set_of(A is Setoid) =
 
  inherit Ensemble(A);

  (* forall(E, P) is true iff for any x in E, P(x) is true *)
  signature forall : Self -> (A -> bool) -> bool;

  property equal_prop :
    all set1 set2 : Self, all x : A,
      !equal(set1, set2) -> 
	!est_element(x, set1) -> 
	  !est_element(x, set2);

  property singleton_prop :
    all x1 x2 : A,
      !est_element(x1, !singleton(x2)) -> 
	A!equal(x1, x2);

end;;

species Rho = inherit Setoid;  end;;

species Subjects = inherit Setoid; end;;

species Objects = inherit Setoid; end;;

species Access_mode =
  
  inherit Setoid; 

  signature read : Self;

  signature write : Self;

end;;

species Access(S is Subjects, O is Objects, M is Access_mode) =

  inherit Setoid;

  signature get_s : Self -> S;

  signature get_o : Self -> O;

  signature get_m : Self -> M;
  
  signature create : S -> O -> M -> Self;

  property access_equal :
    all s1 s2 : S, all o1 o2 : O, all m1 m2 : M,
      !equal(!create(s1, o1, m1), !create(s2, o2, m2)) ->
	(S!equal(s1, s2) && O!equal(o1, o2) && M!equal(m1, m2));

end;;
  
species States(Rh is Rho, S is Subjects, O is Objects, M is Access_mode, 
	       A is Access(S, O, M), S_a is Set_of(A)) =
  inherit Setoid;

  signature lambda : Self -> S_a;

  signature add : Self -> A -> Self;
  
  signature del : Self -> A -> Self;

  property lambda_prop :
    all st1 st2 : Self,
      !equal(st1, st2) -> 
	S_a!equal(!lambda(st1), !lambda(st2));

  property add_prop :
    all st1 st2 : Self, all s1 : S, all o1 : O, all m1 : M,
      !equal(!add(st1, A!create(s1, o1, m1)), st2) -> 
	S_a!equal(!lambda(st2), 
		  S_a!union(!lambda(st1), 
			    S_a!singleton(A!create(s1, o1, m1))));
  
  property add_mem :
    all st1 st2 : Self, all s1 : S, all o1 : O, all m1 : M,
      !equal(!add(st1, A!create(s1, o1, m1)), st2) -> 
	S_a!est_element(A!create(s1, o1, m1), !lambda(st2));

  property del_prop :
    all st1 : Self, all a1 : A, all s1 : S, all o1 : O, all m1 : M,
      S_a!est_element(a1, !lambda(!del(st1, A!create(s1, o1, m1)))) -> 
	S_a!est_element(a1, !lambda(st1));

  property del_mem :
      all st1 st2 : Self, all s1 : S, all o1 : O, all m1 : M,
      !equal(!del(st1, A!create(s1, o1, m1)), st2) -> 
        ~~(S_a!est_element(A!create(s1, o1, m1), !lambda(st2)));

end;;

(*****************************************************************************)
(*                       Definition d'une politique                          *)
(*****************************************************************************)

species Policy(Rh is Rho, S is Subjects, O is Objects, M is Access_mode, 
	       A is Access(S, O, M), S_a is Set_of(A)) =
  inherit States(Rh, S, O, M, A, S_a);

(*   signature omega : Self -> bool; *)

end;;
  
(*****************************************************************************)
(*                 Definition des parametres d'un modele                     *)
(*****************************************************************************)

species Requests = inherit Setoid; end;;

species Decisions =

  inherit Setoid; 

  signature yes : Self;

  signature no : Self;

  property yes_is_not_no :
    all x : Self,
      ~~ (!equal(x, !yes) && !equal(x, !no));

end;;

species Semantics_requests(Rh is Rho,
			   S is Subjects, O is Objects, M is Access_mode, 
			   A is Access(S, O, M), S_a is Set_of(A),
			   R is Requests) =
  inherit States(Rh, S, O, M, A, S_a);

(*   signature sem_req : R -> Self -> bool; *)

end;;

species Models(Rh is Rho, S is Subjects, O is Objects, M is Access_mode, 
	       A is Access(S, O, M), S_a is Set_of(A), 
	       R is Requests, 
	       D is Decisions) =
  inherit Policy(Rh, S, O, M, A, S_a), Semantics_requests(Rh, S, O, M, A, S_a, R);

(*
  logical let secure(tau : R -> Self -> (D * Self)) =
    all st1 st2 : Self, all r1 : R, all d1 : D,
      tau(r1, st1) = (d1, st2) ->
	!omega(st1) -> 
	  !omega(st2);

  logical let correct(tau : R -> Self -> (D * Self)) =
    all st1 st2 : Self, all r1 : R, all d1 : D,
      tau(r1, st1) = (d1, st2) ->
	D!equal(d1, D!yes) ->
	  !sem_req(r1, st2);
*)

end;;

(*****************************************************************************)
(*                 Instanciation dans le cas general                         *)
(*****************************************************************************)

species Requests_gal(S is Subjects, O is Objects, M is Access_mode) =
  inherit Requests;

  signature get_s : Self -> S;

  signature get_o : Self -> O;

  signature get_m : Self -> M;

  signature is_get : Self -> bool;

  signature is_rel : Self -> bool;
  
  property get_or_rel : 
    all x : Self, 
      !is_get(x) || !is_rel(x);

  property get_is_not_rel : 
    all x : Self, 
      ~~ (!is_get(x) && !is_rel(x));

end;;
  
species Semantics_requests_gal(Rh is Rho, 
			       S is Subjects, O is Objects, M is Access_mode,
			       A is Access(S, O, M), S_a is Set_of(A),
			       R is Requests_gal(S, O, M)) =
  inherit Semantics_requests(Rh, S, O, M, A, S_a, R);

(*
  logical let sem_req_get(r1, st1) = 
    R!is_get(r1) -> 
      S_a!est_element(A!create(R!get_s(r1), R!get_o(r1), R!get_m(r1)), 
		      !lambda(st1));
	 
  logical let sem_req_rel(r1, st1) = 
    R!is_rel(r1) ->
      ~~ S_a!est_element(A!create(R!get_s(r1), R!get_o(r1), R!get_m(r1)), 
			  !lambda(st1));
	
  logical let sem_req(r1, st1) =
    !sem_req_get(r1, st1) && !sem_req_rel(r1, st1);
*)

end;;

(*****************************************************************************)
(*                             Bell et LaPadula                              *)
(*****************************************************************************)

species Rho_blp = inherit Rho, Lattice; end;;

species States_blp(Rh is Rho_blp, 
		   S is Subjects, O is Objects, M is Access_mode, 
	           A is Access(S, O, M), S_a is Set_of(A)) =
  inherit States(Rh, S, O, M, A, S_a);

  signature f_s : Self -> S -> Rh;

  signature f_o : Self -> O -> Rh;
 
end;;

species Policy_blp(Rh is Rho_blp, 
		   S is Subjects, O is Objects, M is Access_mode, 
	           A is Access(S, O, M), S_a is Set_of(A)) =
  inherit States_blp(Rh, S, O, M, A, S_a), Policy(Rh, S, O, M, A, S_a);

  logical let mac(st : Self) = 
    all a1 : A, 
      S_a!est_element(a1, !lambda(st)) -> 
	M!equal(A!get_m(a1), M!read) ->
	  Rh!order_inf(!f_o(st, A!get_o(a1)), !f_s(st, A!get_s(a1)));

  logical let mac_star(st : Self) = 
    all a1 a2 : A, 
      S_a!est_element(a1, !lambda(st)) -> 
	S_a!est_element(a2, !lambda(st)) -> 
	  M!equal(A!get_m(a1), M!read) ->
	    M!equal(A!get_m(a2), M!write) -> 
 S!equal(A!get_s(a1), A!get_s(a2)) ->  (* S -> S_sub *)
		Rh!order_inf(!f_o(st, A!get_o(a1)), !f_o(st, A!get_o(a2)));

(*
  logical let omega(st : Self) =
    !mac(st) && !mac_star(st);
*)

end;;

species Models_blp(Rh is Rho_blp, 
		   S is Subjects, O is Objects, M is Access_mode, 
	           A is Access(S, O, M), S_a is Set_of(A), 
		   R is Requests_gal(S, O, M), 
		   D is Decisions) =
  inherit 
    Policy_blp(Rh, S, O, M, A, S_a), 
    Semantics_requests_gal(Rh, S, O, M, A, S_a, R),
 Models(Rh, S, O, M, A, S_a, R, D);

  let tau_blp(r1 : R, st1 : Self) =
     let s1 = R!get_s(r1) in 
     let o1 = R!get_o(r1) in 
     if R!is_get(r1) then  
       if M!equal(M!read, R!get_m(r1)) then (* R = <+, s, o, read> *)
	 if Rh!order_inf(!f_o(st1, o1), !f_s(st1, s1)) then 
	   if S_a!forall(!lambda(st1), 
	                 function a1 -> 
                     let o2 = A!get_o(a1) in 
                     (M!different(M!write, A!get_m(a1)) ||
                     O!equal(o1, o2) ||
                     Rh!order_inf(!f_o(st1, o1), !f_o(st1, o2)))) then
	          (D!yes, !add(st1, A!create(s1, o1, M!read)))
    	   else
           pair(D!no, st1) (* s is writing in a non higher object *)
	 else pair(D!no, st1) (* s has a lower level of security than o *)
       else 
	 if M!equal(M!write, R!get_m(r1)) then  (* R = <+, s, o, write> *)
	   if S_a!forall(!lambda(st1), 
	                 function a1 -> 
                   let o2 = A!get_o(a1) in 
                   (M!different(M!read, A!get_m(a1)) ||
	                 (O!equal(o1, o2) ||
          			   (Rh!order_inf(!f_o(st1, o2), !f_o(st1, o1)))))
                  ) then
	     (D!yes, !add(st1, A!create(s1, o1, M!write)))
 	   else (D!no, st1) (* s is reading in a non lower object *)
	 else (D!no, st1) (* R = <+, s, o, ???> *)
     else  (* R = <-, s, o, x> *)
	 (D!yes, !del(st1, A!create(s1, o1, R!get_m(r1))));

(*
     theorem sec_tau_blp : 
       !secure(!tau_blp) 
       proof = assumed;

     theorem cor_tau_blp : 
       !correct(!tau_blp) 
       proof = assumed;
*)

  let tau_blp_incorrect(r1 : R, st1 : Self) =
     let s1 = R!get_s(r1) in 
     let o1 = R!get_o(r1) in 
     if R!is_get(r1) then  
       if M!equal(M!read, R!get_m(r1)) then (* R = <+, s, o, read> *)
         if Rh!order_inf(!f_o(st1, o1), !f_s(st1, s1)) then 
           if S_a!forall(!lambda(st1), 
              function a1 -> 
               let o2 = A!get_o(a1) in 
               (M!different(M!write, A!get_m(a1)) ||
                O!equal(o1, o2) ||
                Rh!order_inf(!f_o(st1, o1), !f_o(st1, o2)))) then
               (D!yes, !add(st1, A!create(s1, o1, M!read)))
           else (D!no, st1) (* s is writing in a non higher object *)
         else (D!no, st1) (* s has a lower level of security than o *)
       else 
         if M!equal(M!write, R!get_m(r1)) then  (* R = <+, s, o, write> *)
           if S_a!forall(!lambda(st1), 
              function a1 -> 
                let o2 = A!get_o(a1) in 
                (M!different(M!read, A!get_m(a1)) ||
                 O!equal(o1, o2) ||
                 Rh!order_inf(!f_o(st1, o2), !f_o(st1, o1)))) then
               (D!yes, !add(st1, A!create(s1, o1, M!write)))
           else (D!no, st1) (* s is reading in a non lower object *)
         else (D!no, st1) (* R = <+, s, o, ???> *)
     else  (* R = <-, s, o, x> *)
       (D!yes, !del(st1, A!create(s1, o1, R!get_m(r1))));

end;;

(********** IMPLANTATION ***********)


species S_set_of(A is Setoid) =
 
  inherit Set_of(A);
(*   inherit Liste(A); *)

  let rec forall(l, p) = 
     match l with 
     | [] -> true
     | h::t -> (p(h) && !forall(t, p));

  let print(l) =
     let rec aux(ls) =
        match ls with
        | [] -> "]"
        | h::t ->
            (
              match t with
              | [] -> A!print(h) ^ "]"
              | a::b -> A!print(h) ^ ", " ^ aux(t)
            )
     in "[" ^ aux(l);

  proof of equal_prop = assumed;

  proof of singleton_prop = assumed;

  let to_list(s : Self) : list(A) = s;

end;;

type sujets = 
 | S1
 | S2
 | S3
;;

type objets = 
 | O1
 | O2
 | O3
;;

species S_subjects =
  inherit Subjects;

  representation = sujets;

  let equal(s1, s2) = 
     s1 = s2;

  let element = #S1;

  let print(s) = 
     match s with 
     | #S1 -> "S1"
     | #S2 -> "S2"
     | #S3 -> "S3";

  let subject_order(s1 : Self, s2 : Self) : bool =
    if !equal(s1, #S1) && !equal(s2, #S2) then
      true
    else if !equal(s1, #S2) && !equal(s2, #S3) then
      true
    else if !equal(s1, #S1) && !equal(s2, #S3) then
      true
    else
      false;

  let s1 : Self = #S1;
  let s2 : Self = #S2;
  let s3 : Self = #S3;

end;;

species S_objects =
  inherit Objects;
 
  representation = objets;

  let equal(s1, s2) = 
     s1 = s2;

  let element = #O1;

  let print(s) = 
     match s with 
     | #O1 -> "O1"
     | #O2 -> "O2"
     | #O3 -> "O3";

  let o1 : Self = #O1;
  let o2 : Self = #O2;
  let o3 : Self = #O3;

end;;

type modes =
| Read
| Writes
;;

species S_access_mode =
  inherit Access_mode;

  representation = modes;

  let equal(x, y) = x = y;

  let element = #Read;
 
  let print(s) = 
     match s with 
     | #Read -> "Read"
     | #Writes-> "Write";

  let read = #Read;
  let write = #Writes;

end;;

species S_access(S_sub is S_subjects, 
		 S_obj is S_objects, 
		 S_acc_mod is S_access_mode) =
  inherit Access(S_sub, S_obj, S_acc_mod);

  representation = (S_sub * (S_obj * S_acc_mod));

  let create(s, o, m) = (s, (o, m));

  let get_s(a) = fst(a);

  let get_o(a) = fst(snd(a));

  let get_m(a) = snd(snd(a));

  let equal(a1, a2) = 
    S_sub!equal(!get_s(a1), !get_s(a2)) && 
		S_obj!equal(!get_o(a1), !get_o(a2)) &&
	  S_acc_mod!equal(!get_m(a1), !get_m(a2));

  let access_order(a1 : Self, a2 : Self) : bool =
    let s1 = !get_s(a1) in
    let s2 = !get_s(a2) in
    if S_sub!subject_order(s1, s2) then
      true
    else
      if S_sub!equal(s1, s2) then
        let m1 = !get_m(a1) in
        let m2 = !get_m(a2) in
        S_acc_mod!equal(m1, S_acc_mod!read)
      else
        false;

  let element = !create(S_sub!element, S_obj!element, S_acc_mod!element);

  let print(a) =
     "(" ^ S_sub!print(!get_s(a)) ^ 
     "," ^ S_obj!print(!get_o(a)) ^ 
     "," ^ S_acc_mod!print(!get_m(a)) ^ 
     ")";

  proof of access_equal = assumed;

end;;

type decisions_t =
| Yes
| No
;;

species S_decisions =
  inherit Decisions;

  representation = decisions_t;

  let yes = #Yes;
  
  let no = #No;
  
  proof of yes_is_not_no = assumed;

  let equal(s1, s2) = s1 = s2;

  let element = #Yes;

  let print(s) = 
     match s with 
     | #Yes -> "Yes"
     | #No -> "No";

end;;

type get_release =
| Get
| Release
;;

species S_get_release =
  inherit Setoid;

  representation = get_release;

  let equal(s1, s2) = s1 = s2;

  let element = #Get;

  let print(s) = 
     match s with 
     | #Get -> "+"
     | #Release -> "-";

  let get : Self = #Get;
  
  let rel : Self = #Release;
  
end;;

species S_requests_gal(S is S_subjects, 
		       O is S_objects, 
		       M is S_access_mode, 
		       Sgr is S_get_release) =
  inherit Requests_gal(S, O, M);

  representation = (Sgr * (S * (O * M)));

  let create(g : Sgr, sa : S, oa : O, ma : M) : Self =
     (g, (sa, (oa, ma)));

  let get_gr(rg : Self) : Sgr = fst(rg);

  let get_s(rg) = fst(snd(rg));

  let get_o(rg) = fst(snd(snd(rg)));

  let get_m(rg) = snd(snd(snd(rg)));

  let is_get(rg) =
     Sgr!equal(Sgr!get, !get_gr(rg));

  let is_rel(rg) =
     Sgr!equal(Sgr!rel, !get_gr(rg));

  let equal(rg1, rg2) = 
    Sgr!equal(!get_gr(rg1), !get_gr(rg2)) &&
    S!equal(!get_s(rg1), !get_s(rg2)) && 
	  O!equal(!get_o(rg1), !get_o(rg2)) &&
	  M!equal(!get_m(rg1), !get_m(rg2));

  let element = 
     !create(Sgr!get, S!element, O!element, M!element);

  let print(rg) = 
     "(" ^ Sgr!print(!get_gr(rg)) ^ 
     "," ^ S!print(!get_s(rg)) ^ 
     "," ^ O!print(!get_o(rg)) ^ 
     "," ^ M!print(!get_m(rg)) ^ 
     ")";

  proof of get_or_rel = assumed;

  proof of get_is_not_rel = assumed;

end;;

type treillis =
| N1
| N2
| N3
| N4
| N5
;;

species S_rho_blp =
  inherit Rho_blp;

  representation = treillis;

(*
 
               N1
              /  \      s1
             /    \   /    
            |      N3 - o3
            |      |
      s2 - N2      |
         /  |      |
      o2    |      N4 - o1
            \     /   \
             \   /      s3
               N5

 *)

  let inf(x : Self, y : Self) =
    if !equal(x, #N5) then
      #N5
    else if !equal(y, #N5) then
      #N5
    else if !equal(x, #N1) then
      y
    else if !equal(y, #N1) then
      x
    else if !equal(x, #N2) && !equal(y, #N2) then
      #N2
    else if !equal(x, #N2) then
      #N5
    else if !equal(y, #N2) then
      #N5
    else if !equal(x, #N4) then
      #N4
    else if !equal(y, #N4) then
      #N4
    else
      #N3;

  let sup(x : Self, y : Self) =
    if !equal(x, #N5) then
      y
    else if !equal(y, #N5) then
      x
    else if !equal(x, #N1) then
      #N1
    else if !equal(y, #N1) then
      #N1
    else if !equal(x, #N2) && !equal(y, #N2) then
      #N2
    else if !equal(x, #N2) then
      #N1
    else if !equal(y, #N2) then
      #N1
    else if !equal(x, #N3) then
      #N3
    else if !equal(y, #N3) then
      #N3
    else
      #N4;

  let element = #N1;

  let n1 : Self = #N1;
  let n2 : Self = #N2;
  let n3 : Self = #N3;
  let n4 : Self = #N4;
  let n5 : Self = #N5;

  let equal(x : Self, y : Self) = (x = y);

  let order_inf_strict(x : Self, y : Self) =
    !order_inf(x , y) && ~~ (!equal(x, y));

  let print(x : Self) : string =
    match x with
    | N1 -> "N1"
    | N2 -> "N2"
    | N3 -> "N3"
    | N4 -> "N4"
    | N5 -> "N5";

end;;


species S_models_blp(S_rh is S_rho_blp, 
		   S_sub is S_subjects, S_obj is S_objects, S_acc_mod is S_access_mode, 
	           S_acc is S_access(S_sub, S_obj, S_acc_mod), 
             S_set_acc is S_set_of(S_acc), 
             S_gr is S_get_release,
		   S_req is S_requests_gal(S_sub, S_obj, S_acc_mod, S_gr), 
		   S_dec is S_decisions) =
  inherit Models_blp(S_rh, S_sub, S_obj, S_acc_mod, S_acc, S_set_acc, S_req, S_dec);

  representation = S_set_acc;
 
  let create(s : S_set_acc) : Self = 
     s;

  let element = S_set_acc!element;
  let equal = S_set_acc!equal;

  let print(x : Self) = S_set_acc!print(x);

  let f_o(rien : Self, x : S_obj) =
    if S_obj!equal(x, S_obj!o1) then
      S_rh!n4
    else if S_obj!equal(x, S_obj!o2) then
      S_rh!n2
    else 
      S_rh!n3;

  let f_s(rien : Self, x : S_sub) =
    if S_sub!equal(x, S_sub!s1) then
      S_rh!n3
    else if S_sub!equal(x, S_sub!s2) then
      S_rh!n2
    else
      S_rh!n4;

  let lambda(st) = st;

  let add(st, ac) = 
     S_set_acc!union(!lambda(st), S_set_acc!singleton(ac));

  let del(st, ac) = 
     S_set_acc!diff(!lambda(st), S_set_acc!singleton(ac));

  let rec append(l : list(S_obj), e : S_obj) =
    match l with
    | [] -> e::[]
    | h::t -> h::!append(t, e);

  let rec get_candidate(o2 : S_obj, l : list(S_obj * S_obj)) =
    match l with
    | [] -> []
    | h::t ->
        if S_obj!equal(fst(h), o2) then
          h::!get_candidate(o2, t)
        else
          !get_candidate(o2, t);

  let rec mini_closure(o1 : S_obj, l : list(S_obj * S_obj)) =
    match l with 
    | [] -> []
    | h::t -> pair(o1, snd(h))::!mini_closure(o1, t);
  
  let rec concat(l1 : list(S_obj * S_obj), l2 : list(S_obj * S_obj)) : list(S_obj * S_obj) =
    match l1 with
    | [] -> l2
    | h::t -> h::(!concat(t, l2));


  let rec in_list(e : S_obj * S_obj, l : list(S_obj * S_obj)) =
    match l with
    | [] -> false
    | h::t ->
        if e = h then
          true
        else
          !in_list(e, t);


  let rec closure(l : list(S_obj * S_obj),
              lsig : list(S_obj * S_obj),
              res : list(S_obj * S_obj)) : list(S_obj * S_obj) =
    match l with
    | [] -> res 
    | h::t ->
        if (S_obj!equal(fst(h), snd(h)) || !in_list(h, res)) then
          !closure(t, lsig, res)
        else
          let laux = !get_candidate(snd(h), lsig) in
          let mini_close = !mini_closure(fst(h), laux) in
          !closure(!concat(t, mini_close), lsig, h::res);

   let rec direct_flow(sorted_acc) =
     match sorted_acc with
     | [] -> []
     | h1::t1 -> 
       (
        match t1 with
        | [] -> []
        | h2::t ->
            if S_sub!equal(S_acc!get_s(h1), S_acc!get_s(h2)) &&
               S_acc_mod!equal(S_acc!get_m(h1), S_acc_mod!read) &&
               S_acc_mod!equal(S_acc!get_m(h2), S_acc_mod!write) then  
              pair(S_acc!get_o(h1), S_acc!get_o(h2))::direct_flow(t)
            else
              direct_flow(h2::t)
       );

  let rec cut(l, pivot, ordre) =
      match l with
      | [] -> ([], [])
      | h::t ->
          let inf = basics#fst(!cut(t, pivot, ordre)) in
          let sup = basics#snd(!cut(t, pivot, ordre)) in
          if ordre(h, pivot) then
            pair(h::inf, sup)
          else
            pair(inf, h::sup);

  let rec concat2(l1 : list(S_acc), l2 : list(S_acc)) : list(S_acc) =
    match l1 with
    | [] -> l2
    | h::t -> h::(!concat2(t, l2));


  let rec sort(l : list(S_acc), ordre : S_acc -> S_acc -> bool) : list(S_acc) =
    match l with
    | [] -> []
    | h::t ->
        let inf = fst(#cut(t, h, ordre)) in
        let sup = snd(#cut(t, h, ordre)) in
        !concat2(#sort(inf, ordre),
        h::#sort(sup, ordre));


  let all_flow(sigma : Self) =
    let df =
      direct_flow(!sort(S_set_acc!to_list(!lambda(sigma)), S_acc!access_order)) in
    !closure(df, df, []);

  let flow(sigma : Self, o1 : S_obj, o2 : S_obj) : bool =
    !in_list(pair(o1, o2), !all_flow(sigma));

  let rec mac_fun_aux(l, st) : bool =
     match l with
     | [] -> true
     | a::r ->
         let current =
           if S_acc_mod!equal(S_acc!get_m(a), S_acc_mod!read) then
             S_rh!order_inf(!f_o(st, S_acc!get_o(a)),
                            !f_s(st, S_acc!get_s(a)))
           else
             true in
         current && mac_fun_aux(r, st);

  let mac_fun (st : Self) : bool =
    !mac_fun_aux(S_set_acc!to_list(!lambda(st)), st);


  let mac_star_fun_aux1(a1, a2, st : Self) : bool =
      if S_sub!equal(S_acc!get_s(a1), S_acc!get_s(a2)) &&
         S_acc_mod!equal(S_acc!get_m(a1), S_acc_mod!read) &&
         S_acc_mod!equal(S_acc!get_m(a2), S_acc_mod!write) then
         ~~(S_rh!order_inf_strict(!f_o(st, S_acc!get_o(a2)),
                                  !f_o(st, S_acc!get_o(a1))))
      else
        true;
 
  let rec mac_star_fun_aux2(a1, l2, st) =
    match l2 with
    | [] -> true
    | a2::r2 ->
        (!mac_star_fun_aux1(a1, a2, st) && !mac_star_fun_aux2(a1, r2, st));

  let rec mac_star_fun_aux3(l1, l2, st) =
      match l1 with
      | [] -> true
      | a1::r1 ->
          !mac_star_fun_aux2(a1, l2, st) && !mac_star_fun_aux3(r1, l2, st);


  let mac_star_fun(st : Self) : bool =
    mac_star_fun_aux3(S_set_acc!to_list(!lambda(st)), S_set_acc!to_list(!lambda(st)), st);

  (* Version correcte *)
    let mac_star_fun_correct_aux(a1, a2, st) =
      if S_sub!equal(S_acc!get_s(a1), S_acc!get_s(a2)) &&
         S_acc_mod!equal(S_acc!get_m(a1), S_acc_mod!read) &&
         S_acc_mod!equal(S_acc!get_m(a2), S_acc_mod!write) then
        S_rh!order_inf(!f_o(st, S_acc!get_o(a1)),
                       !f_o(st, S_acc!get_o(a2)))
      else
        true;

   let rec mac_star_fun_correct_aux2(a1, l2, st) =
      match l2 with
      | [] -> true
      | a2::r2 ->
         (mac_star_fun_correct_aux(a1, a2, st) && mac_star_fun_correct_aux2(a1, r2, st));

    let rec mac_star_fun_correct_aux3(l1, l2, st) =
      match l1 with
      | [] -> true
      | a1::r1 ->
          (mac_star_fun_correct_aux2(a1, l2, st) && mac_star_fun_correct_aux3(r1, l2, st));

  let mac_star_fun_correct(st : Self) : bool =
    mac_star_fun_correct_aux3(S_set_acc!to_list(!lambda(st)), S_set_acc!to_list(!lambda(st)), st);

  let rec correct_flows(st, l) =
    match l with
    | [] -> true
    | e::r ->
        if S_rh!order_inf(!f_o(st, fst(e)), !f_o(st, snd(e))) then
            !correct_flows(st, r)
          else
            false;

  theorem prop1_false_omega :
      all sigma : Self, all o1 o2 : S_obj, 
         !mac_fun(sigma) -> !mac_star_fun(sigma) ->
         !flow(sigma, o1, o2) ->
           S_rh!order_inf(!f_o(sigma, o1), !f_o(sigma, o2)) 
    proof =
      assumed;

  theorem prop1_correct_omega :
      all sigma : Self, all o1 o2 : S_obj, 
         !mac_fun(sigma) -> !mac_star_fun_correct(sigma) ->
         !flow(sigma, o1, o2) ->
           S_rh!order_inf(!f_o(sigma, o1), !f_o(sigma, o2)) 
    proof =
      assumed;

  theorem prop2_false_omega :
      all sigma : Self,
         !mac_fun(sigma) -> !mac_star_fun(sigma) ->
          !correct_flows(sigma, !all_flow(sigma))
(*           (~~  !correct_flows(sigma, !all_flow(sigma)) -> true) *)
    proof =
      assumed;

  theorem prop2_correct_omega :
      all sigma : Self,
         !mac_fun(sigma) -> !mac_star_fun_correct(sigma) ->
           !correct_flows(sigma, !all_flow(sigma))
    proof =
      assumed;


  theorem prop3_incorrect_tau_blp :
      all sigma : Self,
      all request : S_req,
         !mac_fun(sigma) -> !mac_star_fun_correct(sigma) ->
           !mac_star_fun_correct(snd(!tau_blp_incorrect(request, sigma)))
    proof =
      assumed;




  proof of del_mem = assumed;
  proof of del_prop = assumed;
  proof of add_mem = assumed;
  proof of add_prop = assumed;
  proof of lambda_prop = assumed;

end;;


collection C_subjects = implement S_subjects; end;;

collection C_objects = implement S_objects; end;;

collection C_access_mode = implement S_access_mode; end;;

collection C_access =
  implement S_access(C_subjects, C_objects, C_access_mode);
end;;

collection C_set_of_access = implement S_set_of(C_access); end;;

collection C_decisions = implement S_decisions; end;;

collection C_get_release = implement S_get_release; end;;

collection C_requests_gal =
  implement S_requests_gal(C_subjects, C_objects, C_access_mode, C_get_release);
end;;

collection C_rho_blp = implement S_rho_blp; end;;

collection C_models_blp =
  implement S_models_blp(C_rho_blp,
			                   C_subjects, C_objects, C_access_mode,
                         C_access, C_set_of_access,
                         C_get_release, C_requests_gal, C_decisions);
end;;

let direct_flow = 
  [ (C_objects!o1, C_objects!o3);
    (C_objects!o3, C_objects!o1);
    (C_objects!o2, C_objects!o3)
  ];;

let close = C_models_blp!closure(#direct_flow, #direct_flow, []);;

let print_crp(h) =
  "(" ^ C_objects!print(fst(h)) ^ "," ^ C_objects!print(snd(h)) ^ ")";;

let print(l) =
     let rec aux(ls) =
        match ls with
        | [] -> "]"
        | h::t ->
	   (match t with
	    | [] -> #print_crp(h) ^ "]"
	    | a::b -> #print_crp(h) ^ ", " ^ aux(t)
     )
     in "[" ^ aux(l);;

(* #print_string(#print(#close));; *)

