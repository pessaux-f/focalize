open "basics";;

type tree =
| L
| N(tree, int, tree);;

let rec print_list_aux(f, e, l) =
  let rien = f(e) in
  match l with
  | [] -> print_string("]")
  | e::r ->
     let rien = print_string(";") in
     print_list_aux(f, e, r)
;;

let print_list(f, l) =
  match l with
  | [] -> print_string("[]")
  | e::r -> print_list_aux(f, e, r);;

let print_list_int(l) =
  print_list(print_int, l);;

species Order_sup =
  representation = int;

  let print(x : int) : string = "1";
  let parse(x : string) : int = 1;

  let rec list_length(l : list (int)) : int =
     match l with
     | [] -> 0
     | e::r -> 1 + !list_length(r);

  (* Some functions over list(int) *)
  let rec map(f : int -> int, l : list(int)) : list(int)  =
    match l with
    | [] -> []
    | e::r -> f(e)::Self!map(f, r);

  let rec fold_left(f : int -> int -> int, s: int, l : list(int)) =
    match l with
    | [] -> s
    | e::r -> !fold_left(f, f(e, s), r);

  let rec fold_right(f, l : list(int), s : int) =
    match l with
    | [] -> s
    | e::r -> f(e, !fold_right(f, r, s));

  let rec append(l1 : list(int), l2 : list(int)) : list(int) =
    match l1 with
    | [] -> l2
    | e::r -> e::!append(r, l2);

  (***************************)

  let f1(a : int) : int -> int -> int =
    let e : int -> int -> int = function o -> function c -> o + c in
    let d : int -> int -> int -> int = function t -> e in
    d(a);

  let f2(x : int, y : int) : int =
    !f1(1, x, y);

  theorem f2_com :
      all x y z : int,
        z =0x !f2(x, y) ->
          z = !f2(y, x)
    proof =
      assumed;


  (* The next example test the case when f is applied twice *)

  let duplicate(x : int) =
    let f = function x1 -> x1 + 1 in
    (f(x) * f(x + 1)) / 2;

  let rec sum_n(x : int) =
    let x = if x < 0 then 0 - x else x in
    if x < 1 then
      0
   else
     x + !sum_n(x - 1);

  theorem duplicate_ok :
      all x z : int,
      z =0x !duplicate(x) -> x > 0 -> z = !sum_n(x + 1)
    proof =
      assumed;

  (* properties over map function *)
 
  let succ(x : int) : int = x + 1;

  let pred(x : int) : int = x - 1;

  theorem map_succ_ok :
      all l1 l2 : list(int),
      l2 = !map(!succ, l1) ->
        !map(!pred, l2) = l1
    proof =
      assumed;

  (* map in : *)

  let rec _in(x : int, l : list(int)) =
    match l with
    | []   -> false
    | e::r -> if x = e then true else _in(x, r);

  theorem map_in :
    all l1 l2 : list(int), all e : int,
      !_in(e, l1) ->
      !map(!succ, l1) = l2 ->
        !_in(!succ(e), l2)
  proof =
    assumed;

  (* The two following function are high-order version of sorted.
     The first one with a fold_left, the second one with fold_right *)

  let rec sorted_fold_left(f, s: (int * bool), l : list(int)) =
    match l with
    | [] -> s
    | e::r -> !sorted_fold_left(f, f(s, e), r);

  let ho_sorted_left_f(s, e) = pair(e, snd(s) && (fst(s) <= e));
  let ho_sorted_left(l : list(int)) =
    match l with
    | [] -> true
    | e::r -> snd(!sorted_fold_left(!ho_sorted_left_f, pair(e, true), r));

  let rec last(l, ret) = match l with | [] -> ret | e::r -> !last(r, e);
  let rec sorted_fold_right(f, l : list(int), s : int * bool) =
    match l with
    | [] -> s
    | e::r -> f(e, !sorted_fold_right(f, r, s));

  let ho_sorted_right_f(e, s) = pair(e, snd(s) && (e <= fst(s)));
  let ho_sorted_right(l : list(int)) =
    match l with
    | [] -> true
    | e::r -> snd(!sorted_fold_right(!ho_sorted_right_f, r, pair(!last(r, e), true)));

  theorem ho_sorted_l :
      all l : list(int), !ho_sorted_left(l) -> !list_length(l) > 2 -> !ho_sorted_left(l)
  proof = assumed;

  theorem ho_sorted_r :
      all l : list(int), !ho_sorted_right(l) -> !list_length(l) > 2 -> !ho_sorted_right(l)
  proof = assumed;

  (****************************************************************************)
  (****************************************************************************)
  (****************************************************************************)
 
  (* The next exemple is the high-order versions of sum_list *)

  let ho_sum_list_add(x, y) = x + y;
  let ho_sum_list_left(l : list(int)) =
    !fold_left(ho_sum_list_add, 0, l);

  let ho_sum_list_right(l : list(int)) =
    !fold_right(ho_sum_list_add, l, 0);

  theorem ho_sum_list_l :
      all l1 l2 : list(int), all s1 s2 : int,
      s1 = !ho_sum_list_left(l1) ->
      s2 = !ho_sum_list_left(l2) -> !list_length(l1) > 2 -> !list_length(l2) > 2 ->
        !ho_sum_list_left(!append(l1, l2)) = s1 + s2
  proof =
      assumed;

  theorem ho_sum_list_r :
      all l1 l2 : list(int), all s1 s2 : int,
      s1 = !ho_sum_list_right(l1) ->
      s2 = !ho_sum_list_right(l2) -> !list_length(l1) > 2 -> !list_length(l2) > 2 ->
        !ho_sum_list_right(!append(l1, l2)) = s1 + s2
  proof =
      assumed;

  (****************************************************************************)
  (****************************************************************************)
  (****************************************************************************)
 
  (* Application *)
  let essai_38(x : int, y : int) =
    x + (2 * y);

  theorem essai_38_ok :
      all x y p : int,
      !essai_38(x, y) = p -> p = (x + y)
  proof =
    assumed;


  let big_function(x : int) =
    let f = function y -> function z -> (x + y) * z in
    let f2 = function t -> f(2 * t) in
    f2;

  theorem big_function_ok :
      all x y z p : int,
      !big_function(x, y, z) = p -> p = (x + 2 * y) * z
  proof =
    assumed;

  (* The function is not known when map is applied *)

  let f_not_def(x : int, y : int, l : list(int)) : list(int) =
    let f = if x = 2 * y then
              function x -> x + 1
            else
              function x -> x + 2 in
    map(f, l);

  theorem f_not_def_ok :
    all x y : int,
    all l2 l : list(int),
      !f_not_def(x, y, l) = l2 -> true
    proof =
      assumed;

  let rec match_1(l : list(int)) =
    match l with
    | [] -> 0
    | e::r -> e + match_1(r);

  theorem match_1_ok :
    all l : list(int), all s : int,
      match_1(l) = s -> match_1(l) = s
  proof =
    assumed;

  let apply(x) =
        if x = 1 then
          (function y -> function z -> y + z) 
        else
          (function p -> function o -> p - o);

  theorem apply_ok_1 :
    all x y z r : int,
       x = 1  -> r = apply(x, y, z) -> r = y + z
  proof =
    assumed;

  theorem apply_ok_2 :
    all x y z r : int,
    ~~(x = 1) -> r = apply(x, y, z) -> r = y - z
  proof =
    assumed;


  (* Creation of a BST *)

  let rec fold_left_t(f : int -> tree -> tree, seed : tree, l : list(int)) =
    match l with
    | [] -> seed
    | e::r -> fold_left_t(f, f(e, seed), r);

  let rec fold_right_t(f : int -> tree -> tree, l : list (int), seed : tree) =
    match l with
    | [] -> seed
    | e::r -> f(e, fold_right_t(f, r, seed));

  let rec insert(n1, a) =
    match a with
    | L -> N(L, n1, L)
    | N(a1, n2, a2) ->
        if n1 < n2 then
          N(insert(n1, a1), n2, a2)
        else
          N(a1, n2, insert(n1, a2));

  let create_left_bst(l) =
    fold_left_t(!insert, L, l);

  let rec geq(a, n) =
    match a with
   | L -> true
   | N(a1, nn, a2) -> n >= nn && geq(a1, nn) && geq(a2, nn);

  let rec leq(n, a) =
    match a with
   | L -> true
   | N(a1, nn, a2) -> n <= nn && leq(nn, a1) && leq(nn, a2);

  let rec bst(t) =
    match t with
    | L -> true
    | N(a1, n, a2) -> bst(a1) && bst(a2) && geq(a1, n) && leq(n, a2);

  theorem bst_left_ok :
    all l : list(int), all t : tree,
      t = create_left_bst(l) -> bst(t)
  proof =
    assumed;

  let create_right_bst(l) =
    fold_right_t(!insert, l, L);

  theorem bst_right_ok :
    all l : list(int), all t : tree,
      t = create_right_bst(l) -> bst(t)
  proof =
    assumed;

  let rec create_bst(l) =
    match l with
    | [] -> L
    | e::r -> !insert(e, create_bst(r));

  theorem bst_ok :
    all l : list(int), all t : tree,
      t = create_bst(l) -> bst(t)
  proof =
    assumed;

  (****************************************************************************)
  (****************************************************************************)
  (****************************************************************************)
 
  let rec map_4(l : list(int), f : int -> int -> int) : list(int -> int) =
    match l with
    | [] -> []
    | e::r -> f(e)::map_4(r, f);

  let rec apply_6(l) =
    match l with
    | [] -> []
    | e::r -> e(6):: apply_6(r);

  let test_order(l : list(int)) =
    let f = function x ->
              if (x % 2) =0x 0 then
                function y -> y - 1
              else
                function z -> z + 1 in
    let ll = map_4(l, f) in
    apply_6(ll);


  let l = test_order([1; 5; 9; 2; 3; 4; 6; 7]);

  theorem test_order_ok :
    all l lll : list(int),
      lll = test_order(l) -> true
  proof =
    assumed;



  (* The following example create a list of function *)

  let rec l_f_sum(n) =
    if n = 0 then
      []
    else
      (function x -> x + n)::!l_f_sum(n - 1);

  let rec fold_left_lf(f : (int -> int) -> int -> int, s: int, l : list(int -> int)) =
    match l with
    | [] -> s
    | e::r -> !fold_left_lf(f, f(e, s), r);

  let sum(n) =
    let l = !l_f_sum(n) in
    let ret = !fold_left_lf(function f -> function s -> f(s), 0, l) in
      ret;


  theorem test_sum_list_f :
    all n m : int,
    n>= 0 -> n <= 250 -> !sum(n) = m -> m = ((n * (n + 1)) / 2)
  proof =
    assumed;

end;;

collection COrder_sup = implement Order_sup; end;;

(*
print_list_int(COrder_sup!l);;
 *)

