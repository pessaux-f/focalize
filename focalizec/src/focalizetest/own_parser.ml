type token =
  | UNDERSCORE
  | IDENT of (string)
  | INT of (int)
  | FUN
  | PIPE
  | IN
  | IF
  | MATCH
  | AS
  | WITH
  | REC
  | THEN
  | TYPE
  | ARO
  | UIDENT of (string)
  | IIDENT of (string)
  | PIDENT of (string)
  | SEMICOLON
  | ELSE
  | LET
  | LPAREN
  | RPAREN
  | CAML
  | IMPORT
  | ARROW
  | EQ
  | COMMA
  | BANG
  | STAR
  | VAR of (string)
  | EOF
  | DIESE
  | STRING of (string)
  | LEXERROR of (string)
  | XML_IDENT of (string)
  | XML_HEADER of (string)
  | BTAG_IDENT of (string)
  | ETAG_IDENT of (string)
  | BETAG_IDENT of (string)
  | LESS
  | GREATER
  | SLASH
  | INTER

open Parsing;;
# 2 "own_parser.mly"
open Own_expr;;
open Own_basics;;
open Own_types;;
open Lexing;;
open Whattodo;;
open Own_xml;;
open Context_test;;


let print_pos n =
   let s = rhs_start_pos n in
   let e = rhs_end_pos n in
   match get_input_lexbuf () with
   | None ->
       Printf.printf "Line %d: characters %d-%d.\n"
                   s.pos_lnum
                   (s.pos_cnum - s.pos_bol)
                   (e.pos_cnum - s.pos_bol)
   | Some lb ->
     let pos0 = -lb.lex_abs_pos in
     if pos0 < 0 then
       Printf.printf "Line %d: characters %d-%d:\n"
                     s.pos_lnum
                     (s.pos_cnum - s.pos_bol)
                     (e.pos_cnum - s.pos_bol)
     else
      let end_pos = lb.lex_buffer_len - pos0 - 1 in     
      let line_start = ref 0 and line_end = ref 0 in
      for pos = 0 to end_pos do
        if lb.lex_buffer.[pos + pos0] = '\n' then begin
          if s.pos_cnum > pos then incr line_start;
          if e.pos_cnum > pos then incr line_end;
        end
      done;
     let line = ref 0 in
     prerr_string "  "; 
     for pos = 0 to end_pos do
       let c = lb.lex_buffer.[pos + pos0] in
       if !line <= !line_start && c <> '\n' then 
          prerr_char c;
       if c = '\n' then
         begin
         line := !line + 1;
         if !line <= !line_start then
           prerr_string "\n  ";
         end;
     done;
     prerr_char '\n';
     prerr_string "  "; 
     for i = 0 to (s.pos_cnum - s.pos_bol) - 1 do
       prerr_char ' '
     done;
     for i = s.pos_cnum - s.pos_bol to e.pos_cnum - e.pos_bol - 1 do
       prerr_char '^'
     done;
     prerr_newline ();;

type parse_error =
| Rparen | Lparen | Eof | Specname | Propname
| Invalidchar | Commaeof | Twoparam | Twoprop
| Invalidkeyword | Ident | BangDiese | Syntax;;

let print_message i err =
  print_pos i;
  prerr_string "Syntax error";
  begin
  match err with
  | Rparen -> prerr_string ": ')' expected"
  | Lparen -> prerr_string ": '(' expected"
  | Ident -> prerr_string ": identifier expected";
  | Eof -> prerr_string ": End of input expected"
  | Specname -> prerr_string ": species name expected"
  | Propname -> prerr_string ": property name expected"
  | Invalidchar -> prerr_string ": invalid character"
  | Commaeof -> prerr_string ": ',' or end of input expected"
  | Twoparam ->
    prerr_string ": two parameters in sequence, maybe you forgot a ','"
  | Twoprop ->
    prerr_string ": two property in sequence, maybe you forgot a ','"
  | Invalidkeyword -> prerr_string ": invalid keyword"
  | BangDiese -> prerr_string ": '#' or '!' expected"
  | Syntax -> ()
  end;
  prerr_newline ();
  exit 10;;

let type_name_of_uident s i =
  match s with
  | "INT" -> foctint
  | "Self" -> foctself
  | "UNIT" -> foctunit
  | "LIST" -> foctlist
  | "BOOL" -> foctbool
  | "STRING" -> foctstring
  | "RESULT" -> result_type
  | "VERDICT" -> verdict_type
  | "OPTION" -> foctoption
  | "FLOAT" -> foctfloat 
  | _ -> print_message i Invalidkeyword;;

let ident_of_uident s i =
  match s with
  | "FST" -> focfst
  | "NIL" -> focnil
  | "CONS" -> foccons
  | "OR" -> focor
  | "NOT" -> focnot
  | "AND" -> focand
  | "PRED" -> focpred
  | "SUCC" -> focsucc
  | "ADD_INT" -> focaddint
  | "SND" -> focsnd
  | "INT_EQUAL" -> focintequal
  | "INT_GT" -> focintgt
  | "INT_GEQ" -> focintgeq
  | "INT_LEQ" -> focintleq
  | "SC" -> focstringconcat
  | "CRP" -> foccrp
  | "STRUCT_EQUAL" -> focequal
  | "VUNIT" -> focunit
  | "TRUE" -> foctrue
  | "FALSE" -> focfalse
  | "UNFAILED" -> focunfailed
  | "FAILED" -> focfailed
  | "FOC_ERROR" -> focerror
  | _ -> print_message i Invalidkeyword;;
# 175 "own_parser.ml"
let yytransl_const = [|
  257 (* UNDERSCORE *);
  260 (* FUN *);
  261 (* PIPE *);
  262 (* IN *);
  263 (* IF *);
  264 (* MATCH *);
  265 (* AS *);
  266 (* WITH *);
  267 (* REC *);
  268 (* THEN *);
  269 (* TYPE *);
  270 (* ARO *);
  274 (* SEMICOLON *);
  275 (* ELSE *);
  276 (* LET *);
  277 (* LPAREN *);
  278 (* RPAREN *);
  279 (* CAML *);
  280 (* IMPORT *);
  281 (* ARROW *);
  282 (* EQ *);
  283 (* COMMA *);
  284 (* BANG *);
  285 (* STAR *);
    0 (* EOF *);
  287 (* DIESE *);
  295 (* LESS *);
  296 (* GREATER *);
  297 (* SLASH *);
  298 (* INTER *);
    0|]

let yytransl_block = [|
  258 (* IDENT *);
  259 (* INT *);
  271 (* UIDENT *);
  272 (* IIDENT *);
  273 (* PIDENT *);
  286 (* VAR *);
  288 (* STRING *);
  289 (* LEXERROR *);
  290 (* XML_IDENT *);
  291 (* XML_HEADER *);
  292 (* BTAG_IDENT *);
  293 (* ETAG_IDENT *);
  294 (* BETAG_IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\009\000\009\000\009\000\010\000\010\000\010\000\010\000\011\000\
\013\000\013\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\014\000\014\000\008\000\008\000\008\000\008\000\008\000\015\000\
\015\000\017\000\018\000\018\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\020\000\020\000\020\000\020\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\024\000\024\000\
\025\000\025\000\023\000\023\000\026\000\026\000\026\000\026\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\019\000\019\000\022\000\022\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\021\000\
\021\000\007\000\007\000\007\000\007\000\027\000\027\000\029\000\
\029\000\028\000\028\000\028\000\028\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\005\000\002\000\005\000\004\000\002\000\001\000\001\000\001\000\
\001\000\003\000\002\000\001\000\001\000\003\000\001\000\001\000\
\001\000\003\000\001\000\001\000\002\000\003\000\002\000\003\000\
\006\000\004\000\002\000\003\000\002\000\003\000\002\000\001\000\
\001\000\001\000\006\000\006\000\001\000\001\000\001\000\001\000\
\004\000\003\000\001\000\003\000\001\000\001\000\002\000\003\000\
\002\000\003\000\006\000\004\000\002\000\003\000\002\000\003\000\
\002\000\001\000\001\000\003\000\001\000\002\000\002\000\001\000\
\005\000\007\000\010\000\009\000\001\000\004\000\004\000\001\000\
\001\000\003\000\006\000\005\000\002\000\004\000\008\000\006\000\
\001\000\006\000\007\000\003\000\002\000\003\000\002\000\003\000\
\002\000\003\000\002\000\002\000\003\000\003\000\004\000\002\000\
\003\000\004\000\003\000\001\000\001\000\001\000\001\000\003\000\
\001\000\003\000\004\000\005\000\002\000\001\000\005\000\004\000\
\006\000\007\000\005\000\009\000\008\000\010\000\001\000\001\000\
\003\000\005\000\001\000\001\000\002\000\001\000\001\000\001\000\
\003\000\003\000\004\000\005\000\004\000\003\000\001\000\001\000\
\003\000\002\000\001\000\001\000\001\000\001\000\002\000\001\000\
\002\000\003\000\003\000\003\000\002\000\001\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\006\000\007\000\151\000\064\000\000\000\
\061\000\152\000\000\000\000\000\123\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\100\000\000\000\153\000\000\000\081\000\101\000\000\000\102\000\
\000\000\135\000\000\000\000\000\000\000\000\000\128\000\000\000\
\119\000\000\000\120\000\156\000\140\000\141\000\139\000\000\000\
\157\000\000\000\039\000\000\000\000\000\038\000\158\000\037\000\
\000\000\005\000\000\000\002\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\000\000\000\000\000\
\000\000\000\000\000\000\096\000\085\000\092\000\087\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\143\000\000\000\150\000\138\000\000\000\
\033\000\034\000\000\000\000\000\032\000\000\000\020\000\000\000\
\000\000\000\000\000\000\019\000\012\000\000\000\000\000\013\000\
\000\000\060\000\093\000\086\000\088\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\000\000\000\000\000\000\000\000\
\084\000\094\000\000\000\099\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\149\000\000\000\000\000\042\000\000\000\
\000\000\000\000\031\000\000\000\000\000\000\000\000\000\027\000\
\021\000\029\000\023\000\004\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\095\000\000\000\071\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\098\000\
\000\000\000\000\131\000\000\000\133\000\000\000\000\000\000\000\
\000\000\000\000\000\000\148\000\147\000\145\000\146\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\016\000\014\000\030\000\024\000\
\000\000\028\000\022\000\003\000\001\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\104\000\
\137\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\074\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\036\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\000\108\000\000\000\122\000\000\000\
\000\000\000\000\000\000\000\000\000\000\111\000\106\000\075\000\
\068\000\000\000\000\000\000\000\000\000\067\000\000\000"

let yydgoto = "\009\000\
\014\000\018\000\035\000\141\000\144\000\052\000\057\000\063\000\
\118\000\119\000\120\000\121\000\233\000\161\000\064\000\218\000\
\065\000\162\000\188\000\183\000\145\000\037\000\181\000\142\000\
\047\001\238\000\058\000\157\000\158\000"

let yysindex = "\043\002\
\002\000\022\255\160\255\178\000\204\255\031\255\003\000\019\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\041\255\
\000\000\000\000\000\000\058\255\000\000\124\255\178\000\178\000\
\025\255\133\255\161\255\142\255\178\000\171\255\201\255\075\255\
\000\000\000\000\000\000\228\000\000\000\000\000\045\000\000\000\
\228\000\000\000\186\255\198\255\206\255\204\255\000\000\056\255\
\000\000\164\000\000\000\000\000\000\000\000\000\000\000\215\255\
\000\000\076\000\000\000\202\255\094\255\000\000\000\000\000\000\
\236\255\000\000\072\255\000\000\000\000\000\000\022\255\118\255\
\010\255\136\000\085\000\242\255\016\000\000\000\032\000\117\255\
\044\000\169\000\058\000\000\000\000\000\000\000\000\000\000\000\
\178\000\208\255\040\000\204\255\052\000\204\255\147\255\204\255\
\204\255\116\255\077\000\000\000\012\255\000\000\000\000\075\000\
\000\000\000\000\059\000\094\255\000\000\013\255\000\000\111\000\
\080\000\236\000\033\001\000\000\000\000\071\255\254\000\000\000\
\098\000\000\000\000\000\000\000\000\000\109\000\178\000\178\000\
\132\000\127\000\127\000\000\000\204\255\015\255\178\000\123\000\
\000\000\000\000\228\000\000\000\143\000\131\000\178\000\116\000\
\155\000\204\255\161\000\000\000\056\255\159\000\204\255\051\255\
\130\255\152\000\158\000\000\000\076\000\165\000\000\000\127\255\
\167\000\181\000\000\000\205\000\060\001\207\000\063\001\000\000\
\000\000\000\000\000\000\000\000\008\000\072\255\000\000\039\001\
\204\255\228\000\153\000\110\000\000\000\252\000\000\000\000\000\
\171\000\219\000\224\000\209\000\012\000\178\000\178\000\000\000\
\178\255\204\255\000\000\233\000\000\000\179\000\244\000\239\000\
\204\255\014\001\178\000\000\000\000\000\000\000\000\000\000\000\
\023\255\000\000\021\001\000\001\064\001\072\001\000\000\003\001\
\026\001\034\001\094\255\000\000\000\000\000\000\000\000\000\000\
\204\255\000\000\000\000\000\000\000\000\000\000\029\255\150\255\
\037\001\192\255\178\000\053\001\048\001\030\001\127\000\204\255\
\178\000\204\255\204\255\071\001\178\000\000\000\180\255\000\000\
\000\000\000\000\178\000\204\255\074\001\203\000\057\001\228\000\
\000\000\139\255\075\001\073\001\000\000\000\000\000\000\000\000\
\039\001\019\000\019\000\000\000\120\255\039\001\000\000\058\001\
\061\001\065\001\082\001\178\000\000\000\066\001\030\000\192\000\
\234\000\204\255\228\000\178\000\228\000\242\000\204\255\178\000\
\079\001\000\000\000\000\204\255\000\000\000\000\067\001\000\000\
\000\000\006\001\000\000\178\000\082\001\068\001\069\001\089\255\
\076\001\000\000\014\001\178\000\249\000\228\000\178\000\027\001\
\228\000\204\255\220\255\000\000\000\000\038\255\169\255\098\000\
\228\000\070\001\082\001\000\000\000\000\127\000\000\000\056\000\
\178\000\228\000\178\000\032\001\006\001\000\000\000\000\000\000\
\000\000\065\000\228\000\178\000\098\000\000\000\228\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\002\
\000\000\000\000\066\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\078\000\000\000\090\002\000\000\000\000\000\000\000\000\
\093\002\000\000\028\000\000\000\036\000\000\000\000\000\096\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\077\001\000\000\
\080\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\088\000\000\000\078\001\000\000\000\000\080\001\
\000\000\000\000\000\000\000\000\018\000\106\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\001\000\000\000\000\000\000\
\083\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\099\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\255\
\000\000\164\255\000\000\000\000\000\000\000\000\173\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\001\
\000\000\000\000\000\000\000\000\085\001\000\000\097\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\098\002\
\203\255\000\000\000\000\000\000\214\255\231\255\240\255\241\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\086\001\000\000\000\000\000\000\000\000\000\000\087\001\
\000\000\000\000\117\000\000\000\101\002\000\000\000\000\000\000\
\000\000\248\255\250\255\000\000\095\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\090\001\000\000\128\000\
\000\000\000\000\000\000\000\000\000\000\146\000\000\000\000\000\
\103\002\000\000\000\000\114\000\212\000\226\255\251\255\220\000\
\157\000\000\000\000\000\000\000\000\000\104\002\000\000\000\000\
\000\000\107\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\108\002\000\000\107\001\000\000\114\002"

let yygindex = "\000\000\
\000\000\044\002\000\000\253\255\001\000\000\000\000\000\149\000\
\198\001\254\001\211\001\105\255\107\255\059\002\217\001\000\000\
\000\000\159\001\115\255\135\255\177\255\000\000\088\001\188\001\
\034\255\000\000\068\002\067\002\225\001"

let yytablesize = 648
let yytable = "\036\000\
\041\000\012\000\054\000\080\000\040\000\048\000\068\000\229\000\
\216\000\184\000\200\000\246\000\163\000\154\000\147\000\126\000\
\186\000\129\000\062\000\074\000\075\000\015\000\001\001\016\000\
\232\000\082\000\076\000\127\000\163\000\050\001\049\000\016\000\
\016\000\016\000\127\000\126\000\187\000\163\000\164\000\077\000\
\069\000\125\000\070\000\165\000\016\000\155\000\095\000\101\000\
\156\000\102\000\050\000\016\000\186\000\002\001\017\000\081\001\
\016\000\016\000\092\000\165\000\255\000\016\000\016\000\051\000\
\086\001\072\000\196\000\071\000\165\000\124\000\172\000\109\000\
\199\000\110\000\111\000\112\000\085\000\073\000\066\001\015\000\
\096\000\015\000\015\000\015\000\097\000\139\000\113\000\090\000\
\072\000\086\000\087\000\088\000\173\000\180\000\015\000\105\000\
\149\000\150\000\078\000\114\000\079\001\015\000\115\000\116\000\
\117\000\134\000\015\000\015\000\106\000\090\000\015\000\015\000\
\015\000\232\000\249\000\039\001\082\000\021\001\232\000\123\000\
\043\001\151\000\133\000\178\000\179\000\073\000\208\000\107\000\
\209\000\210\000\211\000\189\000\124\000\185\000\125\000\201\000\
\152\000\134\000\034\001\193\000\035\001\212\000\135\000\080\000\
\042\001\083\000\064\001\078\000\097\000\058\000\202\000\198\000\
\081\000\159\000\213\000\203\000\079\000\214\000\215\000\019\000\
\022\001\020\000\021\000\022\000\032\000\071\001\023\000\024\000\
\148\000\046\000\176\000\096\000\025\000\026\000\027\000\097\000\
\014\001\234\000\045\000\028\000\029\000\085\001\030\000\245\000\
\020\000\028\001\247\000\031\000\079\000\094\000\032\000\033\000\
\034\000\019\000\083\000\089\000\167\000\089\000\090\000\000\001\
\090\000\254\000\084\000\042\000\080\001\043\000\092\000\038\000\
\057\000\020\000\021\000\022\000\093\000\016\001\023\000\024\000\
\096\000\044\000\045\000\053\000\097\000\026\000\027\000\031\000\
\046\000\013\001\094\000\039\000\029\000\140\000\030\000\017\001\
\104\000\047\000\027\000\031\000\047\000\023\001\032\000\033\000\
\040\000\027\001\024\001\025\001\077\001\055\000\049\000\029\001\
\097\000\056\000\127\000\021\000\030\001\056\000\127\000\050\000\
\108\000\010\000\053\000\011\000\029\000\023\000\066\000\228\000\
\080\000\080\000\040\000\130\000\030\000\080\000\024\000\080\000\
\048\001\245\000\059\000\126\000\060\000\080\000\080\000\126\000\
\054\001\080\000\053\001\067\000\057\001\089\000\080\000\056\001\
\090\000\132\000\013\000\055\000\059\001\056\000\061\000\129\000\
\065\001\131\000\149\000\129\000\129\000\136\000\091\000\089\000\
\072\001\127\000\090\000\074\001\127\000\127\000\127\000\081\000\
\127\000\126\000\076\001\138\000\126\000\126\000\126\000\125\000\
\126\000\143\000\125\000\125\000\125\000\082\001\125\000\083\001\
\146\000\089\000\124\000\124\000\090\000\149\000\153\000\124\000\
\087\001\124\000\089\000\101\000\160\000\090\000\101\000\124\000\
\124\000\159\000\124\000\124\000\090\000\090\000\129\000\102\000\
\124\000\090\000\102\000\090\000\054\000\048\000\089\000\078\000\
\078\000\090\000\090\000\167\000\078\000\090\000\078\000\101\000\
\166\000\102\000\090\000\028\000\022\000\078\000\176\000\052\000\
\078\000\082\000\082\000\236\000\237\000\078\000\082\000\134\000\
\082\000\177\000\134\000\134\000\134\000\107\000\026\000\082\000\
\180\000\107\000\082\000\107\000\096\000\182\000\194\000\082\000\
\097\000\107\000\107\000\128\000\190\000\107\000\083\000\083\000\
\192\000\089\000\107\000\083\000\090\000\083\000\040\001\041\001\
\089\000\079\000\079\000\090\000\083\000\098\000\079\000\083\000\
\079\000\191\000\089\000\235\000\083\000\090\000\099\000\079\000\
\195\000\038\000\079\000\020\000\021\000\022\000\197\000\079\000\
\023\000\024\000\089\000\097\000\204\000\090\000\137\000\026\000\
\027\000\219\000\205\000\096\000\241\000\039\000\029\000\097\000\
\030\000\207\000\220\000\096\000\251\000\031\000\221\000\097\000\
\032\000\033\000\040\000\032\000\225\000\032\000\032\000\032\000\
\096\000\032\000\051\001\025\000\097\000\025\000\025\000\025\000\
\242\000\025\000\032\000\096\000\032\001\243\000\244\000\097\000\
\032\000\032\000\025\000\168\000\135\000\169\000\032\000\032\000\
\135\000\025\000\032\000\032\000\032\000\089\000\025\000\025\000\
\090\000\252\000\025\000\025\000\025\000\109\000\250\000\110\000\
\111\000\112\000\096\000\052\001\253\000\061\001\097\000\062\001\
\111\000\112\000\096\000\055\001\113\000\239\000\097\000\186\000\
\240\000\096\000\073\001\044\000\063\001\097\000\003\001\009\001\
\174\000\114\000\046\000\004\001\115\000\116\000\117\000\010\001\
\170\000\114\000\171\000\047\000\115\000\116\000\109\000\011\001\
\231\000\111\000\112\000\001\000\002\000\003\000\004\000\005\000\
\006\000\007\000\008\000\096\000\075\001\113\000\020\001\097\000\
\096\000\084\001\015\001\223\000\097\000\224\000\226\000\005\001\
\227\000\006\001\114\000\018\001\019\001\115\000\116\000\007\001\
\037\001\008\001\038\001\142\000\026\001\142\000\033\001\031\001\
\036\001\090\000\044\001\046\001\058\001\045\001\059\000\049\001\
\060\001\069\000\068\001\078\001\154\000\070\001\067\001\155\000\
\077\000\115\000\009\000\103\000\113\000\136\000\114\000\076\000\
\043\000\017\000\117\000\116\000\121\000\110\000\109\000\105\000\
\051\000\118\000\122\000\230\000\175\000\144\000\222\000\107\000\
\217\000\012\001\248\000\100\000\103\000\206\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\001"

let yycheck = "\003\000\
\004\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
\160\000\131\000\152\000\000\000\000\001\002\001\094\000\006\001\
\002\001\000\000\000\000\023\000\024\000\000\001\000\001\002\001\
\176\000\029\000\002\001\000\000\000\001\000\000\000\001\002\001\
\003\001\004\001\025\001\000\000\022\001\000\001\026\001\015\001\
\000\001\000\000\002\001\031\001\015\001\034\001\046\000\036\001\
\037\001\038\001\020\001\022\001\002\001\031\001\033\001\000\000\
\027\001\028\001\021\001\031\001\202\000\032\001\033\001\033\001\
\000\000\000\000\146\000\027\001\031\001\000\000\000\001\000\001\
\022\001\002\001\003\001\004\001\002\001\000\000\045\001\000\001\
\025\001\002\001\003\001\004\001\029\001\089\000\015\001\000\000\
\031\001\015\001\016\001\017\001\022\001\005\001\015\001\002\001\
\096\000\097\000\000\000\028\001\067\001\022\001\031\001\032\001\
\033\001\000\000\027\001\028\001\015\001\021\001\031\001\032\001\
\033\001\009\001\194\000\009\001\000\000\239\000\014\001\002\001\
\014\001\006\001\006\001\127\000\128\000\002\001\000\001\000\000\
\002\001\003\001\004\001\135\000\015\001\133\000\017\001\006\001\
\021\001\021\001\000\001\143\000\002\001\015\001\026\001\002\001\
\025\001\000\000\042\001\015\001\029\001\006\001\021\001\151\000\
\011\001\015\001\028\001\026\001\000\000\031\001\032\001\000\001\
\240\000\002\001\003\001\004\001\021\001\051\001\007\001\008\001\
\022\001\006\001\021\001\025\001\013\001\014\001\015\001\029\001\
\027\001\177\000\006\001\020\001\021\001\077\001\023\001\006\001\
\021\001\006\001\190\000\028\001\028\001\021\001\031\001\032\001\
\033\001\021\001\024\001\018\001\028\001\018\001\021\001\203\000\
\021\001\201\000\002\001\000\001\070\001\002\001\021\001\000\001\
\006\001\002\001\003\001\004\001\015\001\022\001\007\001\008\001\
\025\001\014\001\015\001\006\001\029\001\014\001\015\001\021\001\
\021\001\225\000\021\001\020\001\021\001\022\001\023\001\235\000\
\031\001\030\001\021\001\028\001\006\001\241\000\031\001\032\001\
\033\001\245\000\242\000\243\000\025\001\006\001\006\001\251\000\
\029\001\035\001\025\001\021\001\252\000\006\001\029\001\006\001\
\021\001\000\001\000\001\002\001\021\001\021\001\000\001\000\001\
\005\001\006\001\006\001\026\001\021\001\010\001\021\001\012\001\
\020\001\006\001\000\001\025\001\002\001\018\001\019\001\029\001\
\028\001\022\001\026\001\021\001\032\001\018\001\027\001\031\001\
\021\001\002\001\033\001\033\001\036\001\035\001\020\001\022\001\
\044\001\026\001\042\001\026\001\027\001\002\001\002\001\018\001\
\052\001\022\001\021\001\055\001\025\001\026\001\027\001\011\001\
\029\001\022\001\058\001\002\001\025\001\026\001\027\001\022\001\
\029\001\026\001\025\001\026\001\027\001\073\001\029\001\075\001\
\021\001\018\001\005\001\006\001\021\001\077\001\002\001\010\001\
\084\001\012\001\018\001\018\001\026\001\021\001\021\001\018\001\
\019\001\015\001\021\001\022\001\005\001\006\001\010\001\018\001\
\027\001\010\001\021\001\012\001\006\001\006\001\018\001\005\001\
\006\001\021\001\019\001\028\001\010\001\022\001\012\001\036\001\
\002\001\038\001\027\001\021\001\021\001\019\001\021\001\006\001\
\022\001\005\001\006\001\014\001\015\001\027\001\010\001\022\001\
\012\001\021\001\025\001\026\001\027\001\006\001\021\001\019\001\
\005\001\010\001\022\001\012\001\025\001\015\001\027\001\027\001\
\029\001\018\001\019\001\012\001\026\001\022\001\005\001\006\001\
\022\001\018\001\027\001\010\001\021\001\012\001\010\001\011\001\
\018\001\005\001\006\001\021\001\019\001\002\001\010\001\022\001\
\012\001\027\001\018\001\019\001\027\001\021\001\011\001\019\001\
\022\001\000\001\022\001\002\001\003\001\004\001\022\001\027\001\
\007\001\008\001\018\001\029\001\037\001\021\001\022\001\014\001\
\015\001\027\001\037\001\025\001\026\001\020\001\021\001\029\001\
\023\001\037\001\022\001\025\001\026\001\028\001\002\001\029\001\
\031\001\032\001\033\001\000\001\006\001\002\001\003\001\004\001\
\025\001\006\001\027\001\000\001\029\001\002\001\003\001\004\001\
\006\001\006\001\015\001\025\001\026\001\006\001\022\001\029\001\
\021\001\022\001\015\001\000\001\025\001\002\001\027\001\028\001\
\029\001\022\001\031\001\032\001\033\001\018\001\027\001\028\001\
\021\001\006\001\031\001\032\001\033\001\000\001\022\001\002\001\
\003\001\004\001\025\001\026\001\022\001\000\001\029\001\002\001\
\003\001\004\001\025\001\026\001\015\001\018\001\029\001\002\001\
\021\001\025\001\026\001\014\001\015\001\029\001\002\001\021\001\
\027\001\028\001\021\001\028\001\031\001\032\001\033\001\006\001\
\000\001\028\001\002\001\030\001\031\001\032\001\000\001\006\001\
\002\001\003\001\004\001\001\000\002\000\003\000\004\000\005\000\
\006\000\007\000\008\000\025\001\026\001\015\001\025\001\029\001\
\025\001\026\001\022\001\000\001\029\001\002\001\000\001\000\001\
\002\001\002\001\028\001\015\001\021\001\031\001\032\001\000\001\
\000\001\002\001\002\001\036\001\006\001\038\001\022\001\006\001\
\006\001\021\001\025\001\002\001\006\001\021\001\000\000\022\001\
\022\001\000\000\022\001\022\001\000\000\018\001\027\001\000\000\
\000\000\000\000\022\001\022\001\000\000\022\001\000\000\000\000\
\022\001\022\001\000\000\000\000\022\001\025\001\025\001\022\001\
\006\001\000\000\071\000\174\000\119\000\037\001\164\000\061\000\
\160\000\219\000\191\000\056\000\058\000\157\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\048\001"

let yynames_const = "\
  UNDERSCORE\000\
  FUN\000\
  PIPE\000\
  IN\000\
  IF\000\
  MATCH\000\
  AS\000\
  WITH\000\
  REC\000\
  THEN\000\
  TYPE\000\
  ARO\000\
  SEMICOLON\000\
  ELSE\000\
  LET\000\
  LPAREN\000\
  RPAREN\000\
  CAML\000\
  IMPORT\000\
  ARROW\000\
  EQ\000\
  COMMA\000\
  BANG\000\
  STAR\000\
  EOF\000\
  DIESE\000\
  LESS\000\
  GREATER\000\
  SLASH\000\
  INTER\000\
  "

let yynames_block = "\
  IDENT\000\
  INT\000\
  UIDENT\000\
  IIDENT\000\
  PIDENT\000\
  VAR\000\
  STRING\000\
  LEXERROR\000\
  XML_IDENT\000\
  XML_HEADER\000\
  BTAG_IDENT\000\
  ETAG_IDENT\000\
  BETAG_IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'l_prm) in
    Obj.repr(
# 230 "own_parser.mly"
                                  ( (_1, _3) )
# 640 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 231 "own_parser.mly"
                                  ( (_1, []) )
# 647 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'l_prm) in
    Obj.repr(
# 232 "own_parser.mly"
                                  (print_message 5 Eof)
# 655 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_prm) in
    Obj.repr(
# 233 "own_parser.mly"
                                  (print_message 4 Rparen)
# 663 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 234 "own_parser.mly"
                                  (print_message 2 Lparen)
# 670 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    Obj.repr(
# 235 "own_parser.mly"
                                  (print_message 1 Specname)
# 676 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 236 "own_parser.mly"
                                  (print_message 1 Invalidchar)
# 683 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    Obj.repr(
# 237 "own_parser.mly"
                                  (print_message 1 Specname)
# 689 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm) in
    Obj.repr(
# 240 "own_parser.mly"
                  ( [_1] )
# 696 "own_parser.ml"
               : 'l_prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_prm) in
    Obj.repr(
# 241 "own_parser.mly"
                  ( _1::_3 )
# 704 "own_parser.ml"
               : 'l_prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prm) in
    Obj.repr(
# 242 "own_parser.mly"
                  (print_message 2 Twoparam)
# 712 "own_parser.ml"
               : 'l_prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 246 "own_parser.mly"
                 (print_message 1 Invalidchar)
# 719 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm_collection) in
    Obj.repr(
# 247 "own_parser.mly"
                 ( InstPrmColl(None,_1) )
# 726 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prm_collection) in
    Obj.repr(
# 248 "own_parser.mly"
                          ( InstPrmColl(Some _1, _3) )
# 734 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 249 "own_parser.mly"
                 ( InstPrmEnt _1 )
# 741 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 253 "own_parser.mly"
        (_1)
# 748 "own_parser.ml"
               : 'prm_collection))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 257 "own_parser.mly"
                                ( [_1] )
# 755 "own_parser.ml"
               : 'l_prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prm_entity) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_prm_entity) in
    Obj.repr(
# 258 "own_parser.mly"
                                ( _1::_3 )
# 763 "own_parser.ml"
               : 'l_prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 262 "own_parser.mly"
                                        ( expr_string _1)
# 770 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 263 "own_parser.mly"
                                        ( expr_int _1)
# 777 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 264 "own_parser.mly"
                                        ( expr_meth focself _2 [])
# 784 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 265 "own_parser.mly"
                                        ( expr_meth _1 _3 [])
# 792 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 266 "own_parser.mly"
                                        ( expr_glob (Prefix(None, _2)) )
# 799 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 267 "own_parser.mly"
                                        ( expr_glob (Prefix(Some _1, _3)) )
# 807 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 269 "own_parser.mly"
                                        ( expr_fun  _2 _4 _6 )
# 816 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prm_entity) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_prm_entity) in
    Obj.repr(
# 270 "own_parser.mly"
                                        ( expr_app _1 _3)
# 824 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "own_parser.mly"
                                        ( print_message 2 Ident)
# 830 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 272 "own_parser.mly"
                                        ( print_message 3 Ident)
# 837 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "own_parser.mly"
                                        ( print_message 2 Ident)
# 843 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 274 "own_parser.mly"
                                        ( print_message 3 Ident)
# 850 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 275 "own_parser.mly"
                                        ( print_message 2 BangDiese)
# 857 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "own_parser.mly"
                                        ( print_message 1 Syntax)
# 863 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 295 "own_parser.mly"
        ( _1 )
# 870 "own_parser.ml"
               : 'ident_uident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 296 "own_parser.mly"
         ( _1 )
# 877 "own_parser.ml"
               : 'ident_uident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident_uident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'species_context) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Context_test.test_context) in
    Obj.repr(
# 301 "own_parser.mly"
                    ( tc_add_bc _6 (create_bc _2 (bca_c _4)) )
# 886 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident_uident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'entity) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Context_test.test_context) in
    Obj.repr(
# 303 "own_parser.mly"
                    ( tc_add_bc _6 (create_bc _2 (bca_e _4)) )
# 895 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'species_context) in
    Obj.repr(
# 304 "own_parser.mly"
                    ( create_tc [] _1 )
# 902 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    Obj.repr(
# 305 "own_parser.mly"
                    (print_message 1 Specname)
# 908 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    Obj.repr(
# 306 "own_parser.mly"
                    (print_message 1 Syntax)
# 914 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'species_name) in
    Obj.repr(
# 309 "own_parser.mly"
               ( create_sc _1 [] )
# 921 "own_parser.ml"
               : 'species_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'species_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'test_context_param_list) in
    Obj.repr(
# 310 "own_parser.mly"
                                                     ( create_sc _1 _3 )
# 929 "own_parser.ml"
               : 'species_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 313 "own_parser.mly"
                     (create_species_name _1 _3)
# 937 "own_parser.ml"
               : 'species_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident_uident) in
    Obj.repr(
# 316 "own_parser.mly"
               ( [_1] )
# 944 "own_parser.ml"
               : 'test_context_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_uident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'test_context_param_list) in
    Obj.repr(
# 317 "own_parser.mly"
                                             ( _1::_3 )
# 952 "own_parser.ml"
               : 'test_context_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 320 "own_parser.mly"
                                        ( expr_string _1)
# 959 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 321 "own_parser.mly"
                                        ( expr_int _1)
# 966 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 322 "own_parser.mly"
                                        ( expr_meth focself _2 [])
# 973 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 323 "own_parser.mly"
                                        ( expr_meth _1 _3 [])
# 981 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 324 "own_parser.mly"
                                        ( expr_glob (Prefix(None, _2)) )
# 988 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 325 "own_parser.mly"
                                        ( expr_glob (Prefix(Some _1, _3)) )
# 996 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 326 "own_parser.mly"
                                                      ( expr_fun  _2 _4 _6 )
# 1005 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prm_entity) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_prm_entity) in
    Obj.repr(
# 327 "own_parser.mly"
                                        ( expr_app _1 _3)
# 1013 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 328 "own_parser.mly"
                                        (print_message 2 Ident)
# 1019 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 329 "own_parser.mly"
                                        (print_message 3 Ident)
# 1026 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "own_parser.mly"
                                        (print_message 2 Ident)
# 1032 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 331 "own_parser.mly"
                                        (print_message 3 Ident)
# 1039 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 332 "own_parser.mly"
                                        (print_message 2 BangDiese)
# 1046 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 333 "own_parser.mly"
                                        (print_message 1 Syntax)
# 1052 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 345 "own_parser.mly"
                              ( [_1] )
# 1059 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 346 "own_parser.mly"
                              ( _1::_3 )
# 1067 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 347 "own_parser.mly"
                              (print_message 1 Invalidchar)
# 1074 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 348 "own_parser.mly"
                              (print_message 2 Commaeof)
# 1081 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 349 "own_parser.mly"
                              (print_message 2 Twoprop)
# 1089 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 350 "own_parser.mly"
                              (print_message 1 Propname)
# 1095 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 369 "own_parser.mly"
  ( ObjToplet (_2, None, _4) )
# 1103 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 371 "own_parser.mly"
  ( ObjToplet (_2,Some _4, _6) )
# 1112 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'list_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 373 "own_parser.mly"
  ( ObjToplet (_2,Some _7, _4 _9) )
# 1122 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 375 "own_parser.mly"
  ( ObjToplet (_2,Some _6, _8) )
# 1131 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 377 "own_parser.mly"
  ( ObjTopcall _1 )
# 1138 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 379 "own_parser.mly"
   (ObjType(type_name_of_uident _2 2,_4) )
# 1146 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 381 "own_parser.mly"
   (ObjType(_2,_4) )
# 1154 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 382 "own_parser.mly"
        ( print_message 1 Syntax )
# 1160 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 383 "own_parser.mly"
             (print_message 1 Invalidchar)
# 1167 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 388 "own_parser.mly"
   ((_1,[])::_3)
# 1175 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'l_type_focal) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 390 "own_parser.mly"
   ((_1,_3)::_6)
# 1184 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'l_type_focal) in
    Obj.repr(
# 392 "own_parser.mly"
   ([_1,_3])
# 1192 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 394 "own_parser.mly"
   ([_1,[]])
# 1199 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 425 "own_parser.mly"
  ( expr_fun_notyp _2 _4 )
# 1207 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 427 "own_parser.mly"
  ( MFun(_2, Some _5, _8) )
# 1216 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Own_expr.myexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 429 "own_parser.mly"
  ( MIfte(_2,_4,_6) )
# 1225 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_simpl) in
    Obj.repr(
# 430 "own_parser.mly"
             ( _1 )
# 1232 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 432 "own_parser.mly"
    ( MVarloc(false, (_2, None),_4,_6) )
# 1241 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 434 "own_parser.mly"
    ( MVarloc(true, (_3, None),_5,_7) )
# 1250 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 436 "own_parser.mly"
    ( _2 )
# 1257 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 438 "own_parser.mly"
    ( MGlob_id(Prefix(None, _2)) )
# 1264 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 440 "own_parser.mly"
    ( MGlob_id(Prefix(Some _1, _3)) )
# 1272 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 442 "own_parser.mly"
    ( MGlob_id(Infix(_2)) )
# 1279 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 444 "own_parser.mly"
    ( MGlob_id(Prefix(Some _1, _3)) )
# 1287 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 446 "own_parser.mly"
    ( MGlob_id(Prefix(None, _2)) )
# 1294 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 448 "own_parser.mly"
    ( expr_seq _1 _3 (use_seq_function ()) )
# 1302 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 450 "own_parser.mly"
    ( MGlob_id(ident_of_uident _2 2) )
# 1309 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 452 "own_parser.mly"
    ( MGlob_id(Prefix(None, _2)) )
# 1316 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 454 "own_parser.mly"
    ( MGlob_id(Prefix(Some _1, _3)) )
# 1324 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 456 "own_parser.mly"
    ( MCaml_def(_3) )
# 1331 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'l_case) in
    Obj.repr(
# 458 "own_parser.mly"
(MMatch((_2, None),_4) )
# 1339 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 460 "own_parser.mly"
    ( MMeth(None, _2) )
# 1346 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 463 "own_parser.mly"
    ( MMeth(Some _1, _3) )
# 1354 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Own_expr.myexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_expr_focal) in
    Obj.repr(
# 472 "own_parser.mly"
( MApp(_1, _3) )
# 1362 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    Obj.repr(
# 474 "own_parser.mly"
( MApp(_1, []) )
# 1369 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 475 "own_parser.mly"
         (MString _1)
# 1376 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 476 "own_parser.mly"
        ( print_message 1 Syntax )
# 1382 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 477 "own_parser.mly"
             (print_message 1 Invalidchar)
# 1389 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 481 "own_parser.mly"
              ( [_1, Own_types.TAtom(Some focbasics, "unit")] )
# 1396 "own_parser.ml"
               : 'l_expr_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_expr_focal) in
    Obj.repr(
# 482 "own_parser.mly"
                                 ( (_1, Own_types.TAtom(Some focbasics, "unit")) :: _3 )
# 1404 "own_parser.ml"
               : 'l_expr_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 486 "own_parser.mly"
        ( [_1] )
# 1411 "own_parser.ml"
               : 'l_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_ident) in
    Obj.repr(
# 487 "own_parser.mly"
                      ( _1::_3 )
# 1419 "own_parser.ml"
               : 'l_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 492 "own_parser.mly"
   ( [let a,b = _2 in a,b,_4] )
# 1427 "own_parser.ml"
               : 'l_case))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'l_case) in
    Obj.repr(
# 494 "own_parser.mly"
   ( (let a,b = _2 in a,b,_4)::_5)
# 1436 "own_parser.ml"
               : 'l_case))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 498 "own_parser.mly"
  (ident_of_uident _2 2, [] )
# 1443 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 500 "own_parser.mly"
  ( Prefix(None, _1), [] )
# 1450 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'l_ident) in
    Obj.repr(
# 502 "own_parser.mly"
  ( ident_of_uident _2 2, List.map (fun e -> Some e) _4 )
# 1458 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_ident) in
    Obj.repr(
# 504 "own_parser.mly"
  ( Prefix(None, _1), List.map (fun e -> Some e) _3 )
# 1466 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 515 "own_parser.mly"
                                            (meth_create _2 _4 _6 false)
# 1475 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 516 "own_parser.mly"
                                            (meth_create _3 _5 _7 true)
# 1484 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 517 "own_parser.mly"
                                            ( print_message 4 Syntax )
# 1492 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'list_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 519 "own_parser.mly"
                                            (meth_create _2 _7 (_4 _9) false)
# 1502 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 521 "own_parser.mly"
                                            (meth_create _2 _6 _8 false)
# 1511 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'list_var) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 523 "own_parser.mly"
                                            (meth_create _3 _8 (_5 _10) true)
# 1521 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    Obj.repr(
# 524 "own_parser.mly"
        ( print_message 1 Syntax )
# 1527 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 525 "own_parser.mly"
             (print_message 1 Invalidchar)
# 1534 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 535 "own_parser.mly"
                      ( fun e -> MFun(_1, Some _3,e) )
# 1542 "own_parser.ml"
               : 'list_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'list_var) in
    Obj.repr(
# 536 "own_parser.mly"
                                     ( fun e -> MFun(_1, Some _3,_5 e))
# 1551 "own_parser.ml"
               : 'list_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 547 "own_parser.mly"
    ( MInt(_1) )
# 1558 "own_parser.ml"
               : 'expr_simpl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 549 "own_parser.mly"
    ( MVar(_1, None) )
# 1565 "own_parser.ml"
               : 'expr_simpl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 560 "own_parser.mly"
                                      ( TAtom(None, type_name_of_uident _2 1) )
# 1572 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 561 "own_parser.mly"
                                      ( TAtom(None, _1) )
# 1579 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 562 "own_parser.mly"
                                      ( TAtom(None, _1) )
# 1586 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 563 "own_parser.mly"
                                      ( TAtom(None, _1) )
# 1593 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 564 "own_parser.mly"
                                      ( TFct(_1, _3) )
# 1601 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Own_types.typ) in
    Obj.repr(
# 565 "own_parser.mly"
                                      ( _2 )
# 1608 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_type_focal) in
    Obj.repr(
# 566 "own_parser.mly"
                                      ( TPrm(None, _1, _3) )
# 1616 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'l_type_focal) in
    Obj.repr(
# 567 "own_parser.mly"
                                          ( TPrm(None, type_name_of_uident _2 1, _4) )
# 1624 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_type_focal) in
    Obj.repr(
# 568 "own_parser.mly"
                                      ( TPrm(None, _1, _3) )
# 1632 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 569 "own_parser.mly"
                                      ( TProd(_1,_3) )
# 1640 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 570 "own_parser.mly"
                                      ( print_message 1 Syntax )
# 1646 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 573 "own_parser.mly"
               ( [_1] )
# 1653 "own_parser.ml"
               : 'l_type_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_type_focal) in
    Obj.repr(
# 574 "own_parser.mly"
                                  (_1::_3)
# 1661 "own_parser.ml"
               : 'l_type_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'xml_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 586 "own_parser.mly"
                    ( _2 )
# 1669 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 587 "own_parser.mly"
            (print_message 1 Invalidchar)
# 1676 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    Obj.repr(
# 588 "own_parser.mly"
            (print_message 1 Invalidkeyword)
# 1682 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    Obj.repr(
# 589 "own_parser.mly"
            (print_message 1 Invalidchar)
# 1688 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 592 "own_parser.mly"
              ( () )
# 1695 "own_parser.ml"
               : 'xml_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'xml_header) in
    Obj.repr(
# 593 "own_parser.mly"
                         ( () )
# 1703 "own_parser.ml"
               : 'xml_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 597 "own_parser.mly"
        ( [_1] )
# 1710 "own_parser.ml"
               : 'tag_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tag) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tag_list) in
    Obj.repr(
# 598 "own_parser.mly"
                 ( _1::_2 )
# 1718 "own_parser.ml"
               : 'tag_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tag_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 603 "own_parser.mly"
            ( if _1 = _3 then Node(_1,_2) else failwith "erreur" )
# 1727 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 605 "own_parser.mly"
            ( if _1 = _3 then Leave(_1,Some _2) else failwith "erreur" )
# 1736 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 607 "own_parser.mly"
            ( if _1 = _3 then Leave(_1,Some _2) else failwith "erreur" )
# 1745 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 609 "own_parser.mly"
            ( if _1 = _2 then Leave(_1,None) else failwith "erreur" )
# 1753 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 611 "own_parser.mly"
            ( Leave(_1,None) )
# 1760 "own_parser.ml"
               : 'tag))
(* Entry expr_species *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry properties_test *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry topexpr_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry type_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry meth_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr_xml *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry test_context *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr_species (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Own_expr.species_test)
let properties_test (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : string list)
let topexpr_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Own_expr.toplevel_def)
let expr_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Own_expr.myexpr)
let type_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Own_types.typ)
let meth_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : Own_expr.methods)
let expr_xml (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 7 lexfun lexbuf : Own_xml.xml_tree)
let test_context (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 8 lexfun lexbuf : Context_test.test_context)
