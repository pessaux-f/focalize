type token =
  | UNDERSCORE
  | IDENT of (string)
  | INT of (int)
  | FUN
  | PIPE
  | IN
  | IF
  | MATCH
  | AS
  | WITH
  | REC
  | THEN
  | TYPE
  | ARO
  | UIDENT of (string)
  | IIDENT of (string)
  | PIDENT of (string)
  | SEMICOLON
  | ELSE
  | LET
  | LPAREN
  | RPAREN
  | CAML
  | IMPORT
  | ARROW
  | EQ
  | COMMA
  | BANG
  | STAR
  | VAR of (string)
  | EOF
  | DIESE
  | STRING of (string)
  | LEXERROR of (string)
  | XML_IDENT of (string)
  | XML_HEADER of (string)
  | BTAG_IDENT of (string)
  | ETAG_IDENT of (string)
  | BETAG_IDENT of (string)
  | LESS
  | GREATER
  | SLASH
  | INTER

open Parsing;;
let _ = parse_error;;
# 2 "own_parser.mly"
open Own_expr;;
open Own_basics;;
open Own_types;;
open Lexing;;
open Whattodo;;
open Own_xml;;
open Context_test;;


let print_pos n =
   let s = rhs_start_pos n in
   let e = rhs_end_pos n in
   match get_input_lexbuf () with
   | None ->
       Printf.printf "Line %d: characters %d-%d.\n"
                   s.pos_lnum
                   (s.pos_cnum - s.pos_bol)
                   (e.pos_cnum - s.pos_bol)
   | Some lb ->
     let pos0 = -lb.lex_abs_pos in
     if pos0 < 0 then
       Printf.printf "Line %d: characters %d-%d:\n"
                     s.pos_lnum
                     (s.pos_cnum - s.pos_bol)
                     (e.pos_cnum - s.pos_bol)
     else
      let end_pos = lb.lex_buffer_len - pos0 - 1 in     
      let line_start = ref 0 and line_end = ref 0 in
      for pos = 0 to end_pos do
        if lb.lex_buffer.[pos + pos0] = '\n' then begin
          if s.pos_cnum > pos then incr line_start;
          if e.pos_cnum > pos then incr line_end;
        end
      done;
     let line = ref 0 in
     prerr_string "  "; 
     for pos = 0 to end_pos do
       let c = lb.lex_buffer.[pos + pos0] in
       if !line <= !line_start && c <> '\n' then 
          prerr_char c;
       if c = '\n' then
         begin
         line := !line + 1;
         if !line <= !line_start then
           prerr_string "\n  ";
         end;
     done;
     prerr_char '\n';
     prerr_string "  "; 
     for _i = 0 to (s.pos_cnum - s.pos_bol) - 1 do
       prerr_char ' '
     done;
     for _i = s.pos_cnum - s.pos_bol to e.pos_cnum - e.pos_bol - 1 do
       prerr_char '^'
     done;
     prerr_newline ();;

type parse_error =
| Rparen | Lparen | Eof | Specname | Propname
| Invalidchar | Commaeof | Twoparam | Twoprop
| Invalidkeyword | Ident | BangDiese | Syntax;;

let print_message i err =
  print_pos i;
  prerr_string "Syntax error";
  begin
  match err with
  | Rparen -> prerr_string ": ')' expected"
  | Lparen -> prerr_string ": '(' expected"
  | Ident -> prerr_string ": identifier expected";
  | Eof -> prerr_string ": End of input expected"
  | Specname -> prerr_string ": species name expected"
  | Propname -> prerr_string ": property name expected"
  | Invalidchar -> prerr_string ": invalid character"
  | Commaeof -> prerr_string ": ',' or end of input expected"
  | Twoparam ->
    prerr_string ": two parameters in sequence, maybe you forgot a ','"
  | Twoprop ->
    prerr_string ": two property in sequence, maybe you forgot a ','"
  | Invalidkeyword -> prerr_string ": invalid keyword"
  | BangDiese -> prerr_string ": '#' or '!' expected"
  | Syntax -> ()
  end;
  prerr_newline ();
  exit 10;;

let type_name_of_uident s i =
  match s with
  | "INT" -> foctint
  | "Self" -> foctself
  | "UNIT" -> foctunit
  | "LIST" -> foctlist
  | "BOOL" -> foctbool
  | "STRING" -> foctstring
  | "RESULT" -> result_type
  | "VERDICT" -> verdict_type
  | "OPTION" -> foctoption
  | "FLOAT" -> foctfloat 
  | _ -> print_message i Invalidkeyword;;

let ident_of_uident s i =
  match s with
  | "FST" -> focfst
  | "NIL" -> focnil
  | "CONS" -> foccons
  | "OR" -> focor
  | "NOT" -> focnot
  | "AND" -> focand
  | "PRED" -> focpred
  | "SUCC" -> focsucc
  | "ADD_INT" -> focaddint
  | "SND" -> focsnd
  | "INT_EQUAL" -> focintequal
  | "INT_GT" -> focintgt
  | "INT_GEQ" -> focintgeq
  | "INT_LEQ" -> focintleq
  | "SC" -> focstringconcat
  | "CRP" -> foccrp
  | "STRUCT_EQUAL" -> focequal
  | "VUNIT" -> focunit
  | "TRUE" -> foctrue
  | "FALSE" -> focfalse
  | "UNFAILED" -> focunfailed
  | "FAILED" -> focfailed
  | "FOC_ERROR" -> focerror
  | _ -> print_message i Invalidkeyword;;
# 176 "own_parser.ml"
let yytransl_const = [|
  257 (* UNDERSCORE *);
  260 (* FUN *);
  261 (* PIPE *);
  262 (* IN *);
  263 (* IF *);
  264 (* MATCH *);
  265 (* AS *);
  266 (* WITH *);
  267 (* REC *);
  268 (* THEN *);
  269 (* TYPE *);
  270 (* ARO *);
  274 (* SEMICOLON *);
  275 (* ELSE *);
  276 (* LET *);
  277 (* LPAREN *);
  278 (* RPAREN *);
  279 (* CAML *);
  280 (* IMPORT *);
  281 (* ARROW *);
  282 (* EQ *);
  283 (* COMMA *);
  284 (* BANG *);
  285 (* STAR *);
    0 (* EOF *);
  287 (* DIESE *);
  295 (* LESS *);
  296 (* GREATER *);
  297 (* SLASH *);
  298 (* INTER *);
    0|]

let yytransl_block = [|
  258 (* IDENT *);
  259 (* INT *);
  271 (* UIDENT *);
  272 (* IIDENT *);
  273 (* PIDENT *);
  286 (* VAR *);
  288 (* STRING *);
  289 (* LEXERROR *);
  290 (* XML_IDENT *);
  291 (* XML_HEADER *);
  292 (* BTAG_IDENT *);
  293 (* ETAG_IDENT *);
  294 (* BETAG_IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\009\000\009\000\009\000\010\000\010\000\010\000\010\000\011\000\
\013\000\013\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\014\000\014\000\008\000\008\000\008\000\008\000\008\000\015\000\
\015\000\017\000\018\000\018\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\020\000\020\000\020\000\020\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\024\000\024\000\025\000\025\000\023\000\023\000\026\000\026\000\
\026\000\026\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\019\000\019\000\022\000\022\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\021\000\021\000\007\000\007\000\007\000\007\000\027\000\
\027\000\029\000\029\000\028\000\028\000\028\000\028\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\005\000\002\000\005\000\004\000\002\000\001\000\001\000\001\000\
\001\000\003\000\002\000\001\000\001\000\003\000\001\000\001\000\
\001\000\003\000\001\000\001\000\002\000\003\000\002\000\003\000\
\006\000\004\000\002\000\003\000\002\000\003\000\002\000\001\000\
\001\000\001\000\006\000\006\000\001\000\001\000\001\000\001\000\
\004\000\003\000\001\000\003\000\001\000\001\000\002\000\003\000\
\002\000\003\000\006\000\004\000\002\000\003\000\002\000\003\000\
\002\000\001\000\001\000\003\000\001\000\002\000\002\000\001\000\
\005\000\007\000\010\000\009\000\001\000\004\000\004\000\001\000\
\001\000\003\000\006\000\005\000\002\000\004\000\008\000\006\000\
\001\000\006\000\007\000\003\000\002\000\003\000\002\000\003\000\
\002\000\003\000\002\000\002\000\003\000\003\000\004\000\003\000\
\004\000\002\000\003\000\004\000\003\000\001\000\001\000\001\000\
\001\000\003\000\001\000\003\000\004\000\005\000\002\000\001\000\
\005\000\004\000\006\000\007\000\005\000\009\000\008\000\010\000\
\001\000\001\000\003\000\005\000\001\000\001\000\002\000\001\000\
\001\000\001\000\003\000\003\000\004\000\005\000\004\000\003\000\
\001\000\001\000\003\000\002\000\001\000\001\000\001\000\001\000\
\002\000\001\000\002\000\003\000\003\000\003\000\002\000\001\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\006\000\007\000\153\000\064\000\000\000\
\061\000\154\000\000\000\000\000\125\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\102\000\000\000\155\000\000\000\081\000\103\000\000\000\104\000\
\000\000\137\000\000\000\000\000\000\000\000\000\130\000\000\000\
\121\000\000\000\122\000\158\000\142\000\143\000\141\000\000\000\
\159\000\000\000\039\000\000\000\000\000\038\000\160\000\037\000\
\000\000\005\000\000\000\002\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\000\000\000\000\000\
\000\000\000\000\000\000\098\000\085\000\092\000\087\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\145\000\000\000\152\000\140\000\
\000\000\033\000\034\000\000\000\000\000\032\000\000\000\020\000\
\000\000\000\000\000\000\000\000\019\000\012\000\000\000\000\000\
\013\000\000\000\060\000\094\000\086\000\088\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\000\000\000\000\000\
\000\000\000\000\084\000\096\000\093\000\000\000\101\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\151\000\000\000\
\000\000\042\000\000\000\000\000\000\000\031\000\000\000\000\000\
\000\000\000\000\027\000\021\000\029\000\023\000\004\000\000\000\
\000\000\011\000\000\000\095\000\000\000\000\000\000\000\000\000\
\097\000\000\000\071\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\100\000\000\000\000\000\133\000\000\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\150\000\
\149\000\147\000\148\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\016\000\014\000\030\000\024\000\000\000\028\000\022\000\003\000\
\001\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\000\000\106\000\139\000\134\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\036\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\114\000\
\110\000\000\000\124\000\000\000\000\000\000\000\000\000\000\000\
\000\000\113\000\108\000\075\000\068\000\000\000\000\000\000\000\
\000\000\067\000\000\000"

let yydgoto = "\009\000\
\014\000\018\000\035\000\144\000\147\000\052\000\057\000\063\000\
\119\000\120\000\121\000\122\000\237\000\164\000\064\000\222\000\
\065\000\165\000\192\000\187\000\148\000\037\000\185\000\145\000\
\051\001\242\000\058\000\160\000\161\000"

let yysindex = "\080\002\
\005\000\016\255\157\255\173\000\220\255\022\255\002\000\004\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\082\255\
\000\000\000\000\000\000\002\255\000\000\065\255\173\000\173\000\
\118\255\095\255\091\255\165\255\173\000\087\255\137\255\133\255\
\000\000\000\000\000\000\205\000\000\000\000\000\208\255\000\000\
\205\000\000\000\123\255\141\255\145\255\220\255\000\000\035\000\
\000\000\016\000\000\000\000\000\000\000\000\000\000\000\139\255\
\000\000\148\255\000\000\174\255\160\255\000\000\000\000\000\000\
\190\255\000\000\255\000\000\000\000\000\000\000\016\255\130\255\
\013\255\131\000\235\255\242\255\023\000\000\000\026\000\051\255\
\048\000\148\000\077\000\000\000\000\000\000\000\000\000\000\000\
\215\255\173\000\193\255\054\000\220\255\238\255\220\255\049\255\
\220\255\220\255\086\255\088\000\000\000\007\255\000\000\000\000\
\019\000\000\000\000\000\071\000\160\255\000\000\027\255\000\000\
\113\000\086\000\231\255\249\255\000\000\000\000\015\255\249\000\
\000\000\098\000\000\000\000\000\000\000\000\000\103\000\099\000\
\173\000\173\000\125\000\117\000\117\000\000\000\220\255\067\255\
\173\000\128\000\000\000\000\000\000\000\205\000\000\000\255\255\
\115\000\173\000\111\000\145\000\220\255\150\000\000\000\035\000\
\149\000\220\255\084\255\079\255\147\000\153\000\000\000\148\255\
\161\000\000\000\093\255\170\000\180\000\000\000\206\000\096\000\
\239\000\225\000\000\000\000\000\000\000\000\000\000\000\010\000\
\255\000\000\000\013\001\000\000\220\255\205\000\039\001\010\255\
\000\000\223\000\000\000\000\000\130\000\244\000\001\001\238\000\
\034\000\173\000\173\000\000\000\110\255\220\255\000\000\245\000\
\000\000\157\000\012\001\253\000\220\255\020\001\173\000\000\000\
\000\000\000\000\000\000\000\000\028\255\000\000\021\001\006\001\
\231\000\254\000\000\000\008\001\032\001\036\001\160\255\000\000\
\000\000\000\000\000\000\000\000\220\255\000\000\000\000\000\000\
\000\000\000\000\031\255\171\255\024\001\250\255\173\000\040\001\
\038\001\042\001\117\000\220\255\173\000\220\255\220\255\064\001\
\173\000\000\000\181\255\000\000\000\000\000\000\173\000\220\255\
\065\001\166\000\050\001\205\000\000\000\138\255\067\001\010\001\
\000\000\000\000\000\000\000\000\013\001\004\000\004\000\000\000\
\078\000\013\001\000\000\051\001\056\001\057\001\087\001\173\000\
\000\000\068\001\030\000\187\000\174\000\220\255\205\000\173\000\
\205\000\195\000\220\255\173\000\085\001\000\000\000\000\220\255\
\000\000\000\000\070\001\000\000\000\000\033\001\000\000\173\000\
\087\001\066\001\072\001\083\255\077\001\000\000\020\001\173\000\
\236\000\205\000\173\000\014\001\205\000\220\255\119\000\000\000\
\000\000\035\255\008\255\098\000\205\000\074\001\087\001\000\000\
\000\000\117\000\000\000\060\000\173\000\205\000\173\000\027\001\
\033\001\000\000\000\000\000\000\000\000\073\000\205\000\173\000\
\098\000\000\000\205\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\002\
\000\000\000\000\090\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\000\000\000\098\002\000\000\000\000\000\000\000\000\
\099\002\000\000\017\000\000\000\032\000\000\000\000\000\100\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\001\
\000\000\215\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\080\001\
\000\000\000\000\081\001\000\000\000\000\000\000\000\000\046\000\
\101\000\000\000\000\000\000\000\000\000\000\000\000\000\069\001\
\000\000\000\000\000\000\082\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\094\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\108\255\000\000\109\255\000\000\000\000\
\000\000\000\000\152\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\001\000\000\000\000\000\000\000\000\
\084\001\000\000\107\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\108\002\162\255\000\000\000\000\000\000\
\173\255\197\255\206\255\211\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\086\001\000\000\000\000\
\000\000\000\000\000\000\088\001\000\000\000\000\112\000\000\000\
\112\002\000\000\000\000\000\000\000\000\217\255\222\255\000\000\
\223\255\233\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\001\000\000\123\000\000\000\000\000\000\000\000\000\
\000\000\141\000\000\000\000\000\114\002\000\000\000\000\234\255\
\207\000\136\000\160\000\048\255\152\000\000\000\000\000\000\000\
\000\000\115\002\000\000\000\000\000\000\116\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\117\002\000\000\
\112\001\000\000\119\002"

let yygindex = "\000\000\
\000\000\049\002\000\000\253\255\001\000\000\000\000\000\088\255\
\200\001\002\002\212\001\100\255\124\255\063\002\218\001\000\000\
\000\000\159\001\114\255\135\255\175\255\000\000\075\001\189\001\
\246\254\000\000\073\002\072\002\227\001"

let yytablesize = 643
let yytable = "\036\000\
\041\000\054\000\090\000\062\000\012\000\048\000\220\000\040\000\
\157\000\233\000\068\000\188\000\204\000\150\000\175\000\015\000\
\129\000\016\000\128\000\074\000\075\000\049\000\236\000\240\000\
\241\000\082\000\166\000\005\001\095\000\054\001\166\000\128\000\
\072\000\250\000\166\000\170\000\176\000\129\000\070\001\127\000\
\158\000\050\000\102\000\159\000\103\000\131\000\096\000\025\000\
\017\000\025\000\025\000\025\000\167\000\025\000\051\000\093\000\
\135\000\168\000\006\001\085\001\083\001\168\000\025\000\003\001\
\126\000\168\000\073\000\200\000\190\000\025\000\151\000\136\000\
\090\001\097\000\025\000\025\000\137\000\098\000\025\000\025\000\
\025\000\069\000\080\000\070\000\205\000\190\000\142\000\184\000\
\191\000\072\000\073\000\154\000\212\000\078\000\213\000\214\000\
\215\000\152\000\153\000\206\000\136\000\044\001\045\001\091\000\
\207\000\203\000\155\000\216\000\071\000\078\000\083\000\082\000\
\236\000\058\000\046\000\249\000\253\000\236\000\079\000\076\000\
\217\000\025\001\109\000\218\000\219\000\182\000\183\000\090\000\
\032\000\020\000\091\000\124\000\077\000\193\000\085\000\189\000\
\043\001\038\001\084\000\039\001\083\000\047\001\197\000\093\000\
\125\000\068\001\126\000\086\000\087\000\088\000\127\000\079\000\
\162\000\089\000\202\000\094\000\019\000\045\000\020\000\021\000\
\022\000\106\000\026\001\023\000\024\000\095\000\080\000\057\000\
\075\001\025\000\026\000\027\000\019\000\056\000\107\000\081\000\
\028\000\029\000\053\000\030\000\089\001\238\000\031\000\102\000\
\031\000\103\000\032\001\032\000\033\000\034\000\251\000\179\000\
\038\000\027\000\020\000\021\000\022\000\018\001\090\000\023\000\
\024\000\091\000\047\000\004\001\105\000\002\001\026\000\027\000\
\084\001\092\000\109\000\055\000\039\000\029\000\143\000\030\000\
\049\000\021\000\081\000\042\000\031\000\043\000\056\000\032\000\
\033\000\040\000\029\000\050\000\054\000\017\001\171\000\023\000\
\172\000\044\000\045\000\021\001\141\000\030\000\048\000\052\000\
\046\000\027\001\024\000\028\000\131\000\031\001\028\001\029\001\
\173\000\047\000\174\000\033\001\090\000\022\000\026\000\091\000\
\034\001\053\000\149\000\059\000\010\000\060\000\011\000\090\000\
\090\000\232\000\066\000\132\000\090\000\040\000\090\000\020\001\
\090\000\099\000\097\000\091\000\052\001\090\000\098\000\061\000\
\090\000\195\000\100\000\134\000\058\001\090\000\057\001\067\000\
\061\001\162\000\055\000\060\001\056\000\013\000\129\000\249\000\
\063\001\129\000\129\000\129\000\069\001\129\000\152\000\090\000\
\133\000\138\000\091\000\090\000\076\001\128\000\091\000\078\001\
\128\000\128\000\128\000\097\000\128\000\127\000\080\001\098\000\
\127\000\127\000\127\000\131\000\127\000\126\000\126\000\131\000\
\131\000\086\001\126\000\087\001\126\000\090\000\140\000\146\000\
\091\000\152\000\126\000\126\000\091\001\126\000\126\000\080\000\
\080\000\156\000\090\000\126\000\080\000\091\000\080\000\227\000\
\163\000\228\000\078\000\078\000\080\000\080\000\046\001\078\000\
\080\000\078\000\098\000\103\000\104\000\080\000\103\000\104\000\
\078\000\170\000\169\000\078\000\082\000\082\000\179\000\181\000\
\078\000\082\000\136\000\082\000\180\000\136\000\136\000\136\000\
\109\000\184\000\082\000\186\000\109\000\082\000\109\000\097\000\
\196\000\198\000\082\000\098\000\109\000\109\000\130\000\081\001\
\109\000\083\000\083\000\098\000\090\000\109\000\083\000\091\000\
\083\000\194\000\097\000\245\000\079\000\079\000\098\000\083\000\
\129\000\079\000\083\000\079\000\129\000\090\000\199\000\083\000\
\091\000\139\000\079\000\201\000\038\000\079\000\020\000\021\000\
\022\000\098\000\079\000\023\000\024\000\097\000\255\000\208\000\
\128\000\098\000\026\000\027\000\128\000\209\000\097\000\036\001\
\039\000\029\000\098\000\030\000\223\000\211\000\097\000\056\001\
\031\000\224\000\098\000\032\000\033\000\040\000\032\000\225\000\
\032\000\032\000\032\000\097\000\032\000\055\001\015\000\098\000\
\015\000\015\000\015\000\097\000\059\001\032\000\090\000\098\000\
\230\000\091\000\231\000\032\000\032\000\015\000\009\001\137\000\
\010\001\032\000\032\000\137\000\015\000\032\000\032\000\032\000\
\243\000\015\000\015\000\244\000\229\000\015\000\015\000\015\000\
\110\000\246\000\111\000\112\000\113\000\011\001\110\000\012\001\
\111\000\112\000\113\000\248\000\097\000\077\001\247\000\114\000\
\098\000\041\001\254\000\042\001\110\000\114\000\235\000\112\000\
\113\000\000\001\001\001\177\000\115\000\190\000\007\001\116\000\
\117\000\118\000\115\000\114\000\013\001\116\000\117\000\118\000\
\065\001\008\001\066\001\112\000\113\000\014\001\097\000\079\001\
\115\000\015\001\098\000\116\000\117\000\019\001\044\000\067\001\
\016\000\016\000\016\000\097\000\088\001\046\000\022\001\098\000\
\090\000\239\000\023\001\091\000\115\000\016\000\047\000\116\000\
\117\000\144\000\024\001\144\000\016\000\030\001\035\001\037\001\
\040\001\016\000\016\000\048\001\091\000\049\001\016\000\016\000\
\001\000\002\000\003\000\004\000\005\000\006\000\007\000\008\000\
\050\001\053\001\062\001\064\001\071\001\072\001\074\001\082\001\
\059\000\069\000\156\000\157\000\009\000\105\000\138\000\043\000\
\017\000\146\000\077\000\117\000\112\000\123\000\111\000\115\000\
\107\000\116\000\076\000\119\000\118\000\051\000\120\000\123\000\
\234\000\178\000\226\000\108\000\221\000\016\001\073\001\252\000\
\101\000\104\000\210\000"

let yycheck = "\003\000\
\004\000\000\000\000\000\000\000\000\000\005\000\163\000\000\000\
\002\001\000\000\000\000\133\000\155\000\095\000\000\001\000\001\
\000\000\002\001\006\001\023\000\024\000\000\001\179\000\014\001\
\015\001\029\000\000\001\000\001\021\001\000\000\000\001\000\000\
\031\001\000\000\000\001\028\001\022\001\025\001\049\001\000\000\
\034\001\020\001\036\001\037\001\038\001\000\000\046\000\000\001\
\033\001\002\001\003\001\004\001\026\001\006\001\033\001\021\001\
\006\001\031\001\031\001\000\000\071\001\031\001\015\001\206\000\
\000\000\031\001\002\001\149\000\002\001\022\001\022\001\021\001\
\000\000\025\001\027\001\028\001\026\001\029\001\031\001\032\001\
\033\001\000\001\000\000\002\001\006\001\002\001\090\000\005\001\
\022\001\000\000\000\000\006\001\000\001\000\000\002\001\003\001\
\004\001\097\000\098\000\021\001\000\000\014\001\015\001\021\001\
\026\001\022\001\021\001\015\001\027\001\015\001\024\001\000\000\
\013\001\006\001\006\001\006\001\198\000\018\001\028\001\002\001\
\028\001\243\000\000\000\031\001\032\001\129\000\130\000\018\001\
\021\001\021\001\021\001\002\001\015\001\137\000\002\001\135\000\
\013\001\000\001\002\001\002\001\000\000\018\001\146\000\021\001\
\015\001\046\001\017\001\015\001\016\001\017\001\021\001\000\000\
\015\001\021\001\154\000\015\001\000\001\006\001\002\001\003\001\
\004\001\002\001\244\000\007\001\008\001\021\001\002\001\006\001\
\055\001\013\001\014\001\015\001\021\001\035\001\015\001\011\001\
\020\001\021\001\006\001\023\001\081\001\181\000\021\001\036\001\
\028\001\038\001\006\001\031\001\032\001\033\001\194\000\021\001\
\000\001\021\001\002\001\003\001\004\001\027\001\018\001\007\001\
\008\001\021\001\006\001\207\000\031\001\205\000\014\001\015\001\
\074\001\002\001\021\001\006\001\020\001\021\001\022\001\023\001\
\006\001\021\001\011\001\000\001\028\001\002\001\006\001\031\001\
\032\001\033\001\021\001\006\001\006\001\229\000\000\001\021\001\
\002\001\014\001\015\001\239\000\022\001\021\001\006\001\006\001\
\021\001\245\000\021\001\021\001\010\001\249\000\246\000\247\000\
\000\001\030\001\002\001\255\000\018\001\021\001\021\001\021\001\
\000\001\000\001\021\001\000\001\000\001\002\001\002\001\005\001\
\006\001\000\001\000\001\026\001\010\001\006\001\012\001\022\001\
\018\001\002\001\025\001\021\001\024\001\019\001\029\001\020\001\
\022\001\027\001\011\001\002\001\032\001\027\001\030\001\021\001\
\036\001\015\001\033\001\035\001\035\001\033\001\022\001\006\001\
\040\001\025\001\026\001\027\001\048\001\029\001\046\001\018\001\
\026\001\002\001\021\001\018\001\056\001\022\001\021\001\059\001\
\025\001\026\001\027\001\025\001\029\001\022\001\062\001\029\001\
\025\001\026\001\027\001\022\001\029\001\005\001\006\001\026\001\
\027\001\077\001\010\001\079\001\012\001\018\001\002\001\026\001\
\021\001\081\001\018\001\019\001\088\001\021\001\022\001\005\001\
\006\001\002\001\018\001\027\001\010\001\021\001\012\001\000\001\
\026\001\002\001\005\001\006\001\018\001\019\001\025\001\010\001\
\022\001\012\001\029\001\018\001\018\001\027\001\021\001\021\001\
\019\001\028\001\002\001\022\001\005\001\006\001\021\001\021\001\
\027\001\010\001\022\001\012\001\022\001\025\001\026\001\027\001\
\006\001\005\001\019\001\015\001\010\001\022\001\012\001\025\001\
\022\001\027\001\027\001\029\001\018\001\019\001\012\001\025\001\
\022\001\005\001\006\001\029\001\018\001\027\001\010\001\021\001\
\012\001\026\001\025\001\026\001\005\001\006\001\029\001\019\001\
\025\001\010\001\022\001\012\001\029\001\018\001\022\001\027\001\
\021\001\022\001\019\001\022\001\000\001\022\001\002\001\003\001\
\004\001\029\001\027\001\007\001\008\001\025\001\026\001\037\001\
\025\001\029\001\014\001\015\001\029\001\037\001\025\001\026\001\
\020\001\021\001\029\001\023\001\027\001\037\001\025\001\026\001\
\028\001\022\001\029\001\031\001\032\001\033\001\000\001\002\001\
\002\001\003\001\004\001\025\001\006\001\027\001\000\001\029\001\
\002\001\003\001\004\001\025\001\026\001\015\001\018\001\029\001\
\000\001\021\001\002\001\021\001\022\001\015\001\000\001\025\001\
\002\001\027\001\028\001\029\001\022\001\031\001\032\001\033\001\
\018\001\027\001\028\001\021\001\006\001\031\001\032\001\033\001\
\000\001\006\001\002\001\003\001\004\001\000\001\000\001\002\001\
\002\001\003\001\004\001\022\001\025\001\026\001\006\001\015\001\
\029\001\000\001\022\001\002\001\000\001\015\001\002\001\003\001\
\004\001\006\001\022\001\027\001\028\001\002\001\002\001\031\001\
\032\001\033\001\028\001\015\001\021\001\031\001\032\001\033\001\
\000\001\028\001\002\001\003\001\004\001\006\001\025\001\026\001\
\028\001\006\001\029\001\031\001\032\001\022\001\014\001\015\001\
\002\001\003\001\004\001\025\001\026\001\021\001\015\001\029\001\
\018\001\019\001\021\001\021\001\028\001\015\001\030\001\031\001\
\032\001\036\001\025\001\038\001\022\001\006\001\006\001\022\001\
\006\001\027\001\028\001\025\001\021\001\021\001\032\001\033\001\
\001\000\002\000\003\000\004\000\005\000\006\000\007\000\008\000\
\002\001\022\001\006\001\022\001\027\001\022\001\018\001\022\001\
\000\000\000\000\000\000\000\000\022\001\022\001\022\001\022\001\
\022\001\037\001\000\000\000\000\025\001\022\001\025\001\000\000\
\022\001\000\000\000\000\000\000\000\000\006\001\000\000\071\000\
\177\000\120\000\167\000\061\000\163\000\223\000\052\001\195\000\
\056\000\058\000\160\000"

let yynames_const = "\
  UNDERSCORE\000\
  FUN\000\
  PIPE\000\
  IN\000\
  IF\000\
  MATCH\000\
  AS\000\
  WITH\000\
  REC\000\
  THEN\000\
  TYPE\000\
  ARO\000\
  SEMICOLON\000\
  ELSE\000\
  LET\000\
  LPAREN\000\
  RPAREN\000\
  CAML\000\
  IMPORT\000\
  ARROW\000\
  EQ\000\
  COMMA\000\
  BANG\000\
  STAR\000\
  EOF\000\
  DIESE\000\
  LESS\000\
  GREATER\000\
  SLASH\000\
  INTER\000\
  "

let yynames_block = "\
  IDENT\000\
  INT\000\
  UIDENT\000\
  IIDENT\000\
  PIDENT\000\
  VAR\000\
  STRING\000\
  LEXERROR\000\
  XML_IDENT\000\
  XML_HEADER\000\
  BTAG_IDENT\000\
  ETAG_IDENT\000\
  BETAG_IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'l_prm) in
    Obj.repr(
# 230 "own_parser.mly"
                                  ( (_1, _3) )
# 644 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 231 "own_parser.mly"
                                  ( (_1, []) )
# 651 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'l_prm) in
    Obj.repr(
# 232 "own_parser.mly"
                                  (print_message 5 Eof)
# 659 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_prm) in
    Obj.repr(
# 233 "own_parser.mly"
                                  (print_message 4 Rparen)
# 667 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 234 "own_parser.mly"
                                  (print_message 2 Lparen)
# 674 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    Obj.repr(
# 235 "own_parser.mly"
                                  (print_message 1 Specname)
# 680 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 236 "own_parser.mly"
                                  (print_message 1 Invalidchar)
# 687 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    Obj.repr(
# 237 "own_parser.mly"
                                  (print_message 1 Specname)
# 693 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm) in
    Obj.repr(
# 240 "own_parser.mly"
                  ( [_1] )
# 700 "own_parser.ml"
               : 'l_prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_prm) in
    Obj.repr(
# 241 "own_parser.mly"
                  ( _1::_3 )
# 708 "own_parser.ml"
               : 'l_prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prm) in
    Obj.repr(
# 242 "own_parser.mly"
                  (print_message 2 Twoparam)
# 716 "own_parser.ml"
               : 'l_prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 246 "own_parser.mly"
                 (print_message 1 Invalidchar)
# 723 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm_collection) in
    Obj.repr(
# 247 "own_parser.mly"
                 ( InstPrmColl(None,_1) )
# 730 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prm_collection) in
    Obj.repr(
# 248 "own_parser.mly"
                          ( InstPrmColl(Some _1, _3) )
# 738 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 249 "own_parser.mly"
                 ( InstPrmEnt _1 )
# 745 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 253 "own_parser.mly"
        (_1)
# 752 "own_parser.ml"
               : 'prm_collection))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 257 "own_parser.mly"
                                ( [_1] )
# 759 "own_parser.ml"
               : 'l_prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prm_entity) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_prm_entity) in
    Obj.repr(
# 258 "own_parser.mly"
                                ( _1::_3 )
# 767 "own_parser.ml"
               : 'l_prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 262 "own_parser.mly"
                                        ( expr_string _1)
# 774 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 263 "own_parser.mly"
                                        ( expr_int _1)
# 781 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 264 "own_parser.mly"
                                        ( expr_meth focself _2 [])
# 788 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 265 "own_parser.mly"
                                        ( expr_meth _1 _3 [])
# 796 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 266 "own_parser.mly"
                                        ( expr_glob (Prefix(None, _2)) )
# 803 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 267 "own_parser.mly"
                                        ( expr_glob (Prefix(Some _1, _3)) )
# 811 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 269 "own_parser.mly"
                                        ( expr_fun  _2 _4 _6 )
# 820 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prm_entity) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_prm_entity) in
    Obj.repr(
# 270 "own_parser.mly"
                                        ( expr_app _1 _3)
# 828 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "own_parser.mly"
                                        ( print_message 2 Ident)
# 834 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 272 "own_parser.mly"
                                        ( print_message 3 Ident)
# 841 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "own_parser.mly"
                                        ( print_message 2 Ident)
# 847 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 274 "own_parser.mly"
                                        ( print_message 3 Ident)
# 854 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 275 "own_parser.mly"
                                        ( print_message 2 BangDiese)
# 861 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "own_parser.mly"
                                        ( print_message 1 Syntax)
# 867 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 295 "own_parser.mly"
        ( _1 )
# 874 "own_parser.ml"
               : 'ident_uident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 296 "own_parser.mly"
         ( _1 )
# 881 "own_parser.ml"
               : 'ident_uident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident_uident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'species_context) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Context_test.test_context) in
    Obj.repr(
# 301 "own_parser.mly"
                    ( tc_add_bc _6 (create_bc _2 (bca_c _4)) )
# 890 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident_uident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'entity) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Context_test.test_context) in
    Obj.repr(
# 303 "own_parser.mly"
                    ( tc_add_bc _6 (create_bc _2 (bca_e _4)) )
# 899 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'species_context) in
    Obj.repr(
# 304 "own_parser.mly"
                    ( create_tc [] _1 )
# 906 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    Obj.repr(
# 305 "own_parser.mly"
                    (print_message 1 Specname)
# 912 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    Obj.repr(
# 306 "own_parser.mly"
                    (print_message 1 Syntax)
# 918 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'species_name) in
    Obj.repr(
# 309 "own_parser.mly"
               ( create_sc _1 [] )
# 925 "own_parser.ml"
               : 'species_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'species_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'test_context_param_list) in
    Obj.repr(
# 310 "own_parser.mly"
                                                     ( create_sc _1 _3 )
# 933 "own_parser.ml"
               : 'species_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 313 "own_parser.mly"
                     (create_species_name _1 _3)
# 941 "own_parser.ml"
               : 'species_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident_uident) in
    Obj.repr(
# 316 "own_parser.mly"
               ( [_1] )
# 948 "own_parser.ml"
               : 'test_context_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_uident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'test_context_param_list) in
    Obj.repr(
# 317 "own_parser.mly"
                                             ( _1::_3 )
# 956 "own_parser.ml"
               : 'test_context_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 320 "own_parser.mly"
                                        ( expr_string _1)
# 963 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 321 "own_parser.mly"
                                        ( expr_int _1)
# 970 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 322 "own_parser.mly"
                                        ( expr_meth focself _2 [])
# 977 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 323 "own_parser.mly"
                                        ( expr_meth _1 _3 [])
# 985 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 324 "own_parser.mly"
                                        ( expr_glob (Prefix(None, _2)) )
# 992 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 325 "own_parser.mly"
                                        ( expr_glob (Prefix(Some _1, _3)) )
# 1000 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 326 "own_parser.mly"
                                                      ( expr_fun  _2 _4 _6 )
# 1009 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prm_entity) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_prm_entity) in
    Obj.repr(
# 327 "own_parser.mly"
                                        ( expr_app _1 _3)
# 1017 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 328 "own_parser.mly"
                                        (print_message 2 Ident)
# 1023 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 329 "own_parser.mly"
                                        (print_message 3 Ident)
# 1030 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "own_parser.mly"
                                        (print_message 2 Ident)
# 1036 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 331 "own_parser.mly"
                                        (print_message 3 Ident)
# 1043 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 332 "own_parser.mly"
                                        (print_message 2 BangDiese)
# 1050 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 333 "own_parser.mly"
                                        (print_message 1 Syntax)
# 1056 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 345 "own_parser.mly"
                              ( [_1] )
# 1063 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 346 "own_parser.mly"
                              ( _1::_3 )
# 1071 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 347 "own_parser.mly"
                              (print_message 1 Invalidchar)
# 1078 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 348 "own_parser.mly"
                              (print_message 2 Commaeof)
# 1085 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 349 "own_parser.mly"
                              (print_message 2 Twoprop)
# 1093 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 350 "own_parser.mly"
                              (print_message 1 Propname)
# 1099 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 369 "own_parser.mly"
  ( ObjToplet (_2, None, _4) )
# 1107 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 371 "own_parser.mly"
  ( ObjToplet (_2,Some _4, _6) )
# 1116 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'list_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 373 "own_parser.mly"
  ( ObjToplet (_2,Some _7, _4 _9) )
# 1126 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 375 "own_parser.mly"
  ( ObjToplet (_2,Some _6, _8) )
# 1135 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 377 "own_parser.mly"
  ( ObjTopcall _1 )
# 1142 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 379 "own_parser.mly"
   (ObjType(type_name_of_uident _2 2,_4) )
# 1150 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 381 "own_parser.mly"
   (ObjType(_2,_4) )
# 1158 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 382 "own_parser.mly"
        ( print_message 1 Syntax )
# 1164 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 383 "own_parser.mly"
             (print_message 1 Invalidchar)
# 1171 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 388 "own_parser.mly"
   ((_1,[])::_3)
# 1179 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'l_type_focal) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 390 "own_parser.mly"
   ((_1,_3)::_6)
# 1188 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'l_type_focal) in
    Obj.repr(
# 392 "own_parser.mly"
   ([_1,_3])
# 1196 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 394 "own_parser.mly"
   ([_1,[]])
# 1203 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 425 "own_parser.mly"
  ( expr_fun_notyp _2 _4 )
# 1211 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 427 "own_parser.mly"
  ( MFun(_2, Some _5, _8) )
# 1220 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Own_expr.myexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 429 "own_parser.mly"
  ( MIfte(_2,_4,_6) )
# 1229 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_simpl) in
    Obj.repr(
# 430 "own_parser.mly"
             ( _1 )
# 1236 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 432 "own_parser.mly"
    ( MVarloc(false, (_2, None),_4,_6) )
# 1245 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 434 "own_parser.mly"
    ( MVarloc(true, (_3, None),_5,_7) )
# 1254 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 436 "own_parser.mly"
    ( _2 )
# 1261 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 438 "own_parser.mly"
    ( MGlob_id(Prefix(None, _2)) )
# 1268 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 440 "own_parser.mly"
    ( MGlob_id(Prefix(Some _1, _3)) )
# 1276 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 442 "own_parser.mly"
    ( MGlob_id(Infix(_2)) )
# 1283 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 444 "own_parser.mly"
    ( MGlob_id(Prefix(Some _1, _3)) )
# 1291 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 446 "own_parser.mly"
    ( MGlob_id(Prefix(None, _2)) )
# 1298 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 448 "own_parser.mly"
    ( expr_seq _1 _3 (use_seq_function ()) )
# 1306 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 450 "own_parser.mly"
    ( MGlob_id(ident_of_uident _2 2) )
# 1313 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 452 "own_parser.mly"
    ( MGlob_id(Prefix(None, _2)) )
# 1320 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 454 "own_parser.mly"
    ( MGlob_id(focunit) )
# 1326 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 456 "own_parser.mly"
    ( MGlob_id(Prefix(Some _1, _3)) )
# 1334 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 458 "own_parser.mly"
    ( MGlob_id(focunit) )
# 1341 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 460 "own_parser.mly"
    ( MCaml_def(_3) )
# 1348 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'l_case) in
    Obj.repr(
# 462 "own_parser.mly"
(MMatch((_2, None),_4) )
# 1356 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 464 "own_parser.mly"
    ( MMeth(None, _2) )
# 1363 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 467 "own_parser.mly"
    ( MMeth(Some _1, _3) )
# 1371 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Own_expr.myexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_expr_focal) in
    Obj.repr(
# 476 "own_parser.mly"
( MApp(_1, None, _3) )
# 1379 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    Obj.repr(
# 478 "own_parser.mly"
( MApp(_1, None, []) )
# 1386 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 479 "own_parser.mly"
         (MString _1)
# 1393 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 480 "own_parser.mly"
        ( print_message 1 Syntax )
# 1399 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 481 "own_parser.mly"
             (print_message 1 Invalidchar)
# 1406 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 485 "own_parser.mly"
              ( [_1, Own_types.TAtom(Some focbasics, "unit")] )
# 1413 "own_parser.ml"
               : 'l_expr_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_expr_focal) in
    Obj.repr(
# 486 "own_parser.mly"
                                 ( (_1, Own_types.TAtom(Some focbasics, "unit")) :: _3 )
# 1421 "own_parser.ml"
               : 'l_expr_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 490 "own_parser.mly"
        ( [_1] )
# 1428 "own_parser.ml"
               : 'l_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_ident) in
    Obj.repr(
# 491 "own_parser.mly"
                      ( _1::_3 )
# 1436 "own_parser.ml"
               : 'l_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 496 "own_parser.mly"
   ( [let a,b = _2 in a,b,_4] )
# 1444 "own_parser.ml"
               : 'l_case))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'l_case) in
    Obj.repr(
# 498 "own_parser.mly"
   ( (let a,b = _2 in a,b,_4)::_5)
# 1453 "own_parser.ml"
               : 'l_case))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 502 "own_parser.mly"
  (ident_of_uident _2 2, [] )
# 1460 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 504 "own_parser.mly"
  ( Prefix(None, _1), [] )
# 1467 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'l_ident) in
    Obj.repr(
# 506 "own_parser.mly"
  ( ident_of_uident _2 2, List.map (fun e -> Some e) _4 )
# 1475 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_ident) in
    Obj.repr(
# 508 "own_parser.mly"
  ( Prefix(None, _1), List.map (fun e -> Some e) _3 )
# 1483 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 519 "own_parser.mly"
                                            (meth_create _2 _4 _6 false)
# 1492 "own_parser.ml"
               : Own_expr.a_method))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 520 "own_parser.mly"
                                            (meth_create _3 _5 _7 true)
# 1501 "own_parser.ml"
               : Own_expr.a_method))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 521 "own_parser.mly"
                                            ( print_message 4 Syntax )
# 1509 "own_parser.ml"
               : Own_expr.a_method))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'list_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 523 "own_parser.mly"
                                            (meth_create _2 _7 (_4 _9) false)
# 1519 "own_parser.ml"
               : Own_expr.a_method))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 525 "own_parser.mly"
                                            (meth_create _2 _6 _8 false)
# 1528 "own_parser.ml"
               : Own_expr.a_method))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'list_var) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 527 "own_parser.mly"
                                            (meth_create _3 _8 (_5 _10) true)
# 1538 "own_parser.ml"
               : Own_expr.a_method))
; (fun __caml_parser_env ->
    Obj.repr(
# 528 "own_parser.mly"
        ( print_message 1 Syntax )
# 1544 "own_parser.ml"
               : Own_expr.a_method))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 529 "own_parser.mly"
             (print_message 1 Invalidchar)
# 1551 "own_parser.ml"
               : Own_expr.a_method))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 539 "own_parser.mly"
                      ( fun e -> MFun(_1, Some _3,e) )
# 1559 "own_parser.ml"
               : 'list_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'list_var) in
    Obj.repr(
# 540 "own_parser.mly"
                                     ( fun e -> MFun(_1, Some _3,_5 e))
# 1568 "own_parser.ml"
               : 'list_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 551 "own_parser.mly"
    ( MInt(_1) )
# 1575 "own_parser.ml"
               : 'expr_simpl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 553 "own_parser.mly"
    ( MVar(_1, None) )
# 1582 "own_parser.ml"
               : 'expr_simpl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 564 "own_parser.mly"
                                      ( TAtom(None, type_name_of_uident _2 1) )
# 1589 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 565 "own_parser.mly"
                                      ( TAtom(None, _1) )
# 1596 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 566 "own_parser.mly"
                                      ( TAtom(None, _1) )
# 1603 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 567 "own_parser.mly"
                                      ( TAtom(None, _1) )
# 1610 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 568 "own_parser.mly"
                                      ( TFct(_1, _3) )
# 1618 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Own_types.typ) in
    Obj.repr(
# 569 "own_parser.mly"
                                      ( _2 )
# 1625 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_type_focal) in
    Obj.repr(
# 570 "own_parser.mly"
                                      ( TPrm(None, _1, _3) )
# 1633 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'l_type_focal) in
    Obj.repr(
# 571 "own_parser.mly"
                                          ( TPrm(None, type_name_of_uident _2 1, _4) )
# 1641 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_type_focal) in
    Obj.repr(
# 572 "own_parser.mly"
                                      ( TPrm(None, _1, _3) )
# 1649 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 573 "own_parser.mly"
                                      ( TProd(_1,_3) )
# 1657 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 574 "own_parser.mly"
                                      ( print_message 1 Syntax )
# 1663 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 577 "own_parser.mly"
               ( [_1] )
# 1670 "own_parser.ml"
               : 'l_type_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_type_focal) in
    Obj.repr(
# 578 "own_parser.mly"
                                  (_1::_3)
# 1678 "own_parser.ml"
               : 'l_type_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'xml_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 590 "own_parser.mly"
                    ( _2 )
# 1686 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 591 "own_parser.mly"
            (print_message 1 Invalidchar)
# 1693 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    Obj.repr(
# 592 "own_parser.mly"
            (print_message 1 Invalidkeyword)
# 1699 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    Obj.repr(
# 593 "own_parser.mly"
            (print_message 1 Invalidchar)
# 1705 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 596 "own_parser.mly"
              ( () )
# 1712 "own_parser.ml"
               : 'xml_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'xml_header) in
    Obj.repr(
# 597 "own_parser.mly"
                         ( () )
# 1720 "own_parser.ml"
               : 'xml_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 601 "own_parser.mly"
        ( [_1] )
# 1727 "own_parser.ml"
               : 'tag_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tag) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tag_list) in
    Obj.repr(
# 602 "own_parser.mly"
                 ( _1::_2 )
# 1735 "own_parser.ml"
               : 'tag_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tag_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 607 "own_parser.mly"
            ( if _1 = _3 then Node(_1,_2) else failwith "erreur" )
# 1744 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 609 "own_parser.mly"
            ( if _1 = _3 then Leave(_1,Some _2) else failwith "erreur" )
# 1753 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 611 "own_parser.mly"
            ( if _1 = _3 then Leave(_1,Some _2) else failwith "erreur" )
# 1762 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 613 "own_parser.mly"
            ( if _1 = _2 then Leave(_1,None) else failwith "erreur" )
# 1770 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 615 "own_parser.mly"
            ( Leave(_1,None) )
# 1777 "own_parser.ml"
               : 'tag))
(* Entry expr_species *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry properties_test *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry topexpr_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry type_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry meth_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr_xml *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry test_context *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr_species (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Own_expr.species_test)
let properties_test (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : string list)
let topexpr_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Own_expr.toplevel_def)
let expr_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Own_expr.myexpr)
let type_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Own_types.typ)
let meth_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : Own_expr.a_method)
let expr_xml (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 7 lexfun lexbuf : Own_xml.xml_tree)
let test_context (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 8 lexfun lexbuf : Context_test.test_context)
