type token =
  | UNDERSCORE
  | IDENT of (string)
  | INT of (int)
  | FUN
  | PIPE
  | IN
  | IF
  | MATCH
  | AS
  | WITH
  | REC
  | THEN
  | TYPE
  | ARO
  | UIDENT of (string)
  | IIDENT of (string)
  | PIDENT of (string)
  | SEMICOLON
  | ELSE
  | LET
  | LPAREN
  | RPAREN
  | CAML
  | IMPORT
  | ARROW
  | EQ
  | COMMA
  | BANG
  | STAR
  | VAR of (string)
  | EOF
  | DIESE
  | STRING of (string)
  | LEXERROR of (string)
  | XML_IDENT of (string)
  | XML_HEADER of (string)
  | BTAG_IDENT of (string)
  | ETAG_IDENT of (string)
  | BETAG_IDENT of (string)
  | LESS
  | GREATER
  | SLASH
  | INTER

open Parsing;;
# 2 "own_parser.mly"
open Own_expr;;
open Own_basics;;
open Own_types;;
open Lexing;;
open Whattodo;;
open Own_xml;;
open Context_test;;


let print_pos n =
   let s = rhs_start_pos n in
   let e = rhs_end_pos n in
   match get_input_lexbuf () with
   | None ->
       Printf.printf "Line %d: characters %d-%d.\n"
                   s.pos_lnum
                   (s.pos_cnum - s.pos_bol)
                   (e.pos_cnum - s.pos_bol)
   | Some lb ->
     let pos0 = -lb.lex_abs_pos in
     if pos0 < 0 then
       Printf.printf "Line %d: characters %d-%d:\n"
                     s.pos_lnum
                     (s.pos_cnum - s.pos_bol)
                     (e.pos_cnum - s.pos_bol)
     else
      let end_pos = lb.lex_buffer_len - pos0 - 1 in     
      let line_start = ref 0 and line_end = ref 0 in
      for pos = 0 to end_pos do
        if lb.lex_buffer.[pos + pos0] = '\n' then begin
          if s.pos_cnum > pos then incr line_start;
          if e.pos_cnum > pos then incr line_end;
        end
      done;
     let line = ref 0 in
     prerr_string "  "; 
     for pos = 0 to end_pos do
       let c = lb.lex_buffer.[pos + pos0] in
       if !line <= !line_start && c <> '\n' then 
          prerr_char c;
       if c = '\n' then
         begin
         line := !line + 1;
         if !line <= !line_start then
           prerr_string "\n  ";
         end;
     done;
     prerr_char '\n';
     prerr_string "  "; 
     for i = 0 to (s.pos_cnum - s.pos_bol) - 1 do
       prerr_char ' '
     done;
     for i = s.pos_cnum - s.pos_bol to e.pos_cnum - e.pos_bol - 1 do
       prerr_char '^'
     done;
     prerr_newline ();;

type parse_error =
| Rparen | Lparen | Eof | Specname | Propname
| Invalidchar | Commaeof | Twoparam | Twoprop
| Invalidkeyword | Ident | BangDiese | Syntax;;

let print_message i err =
  print_pos i;
  prerr_string "Syntax error";
  begin
  match err with
  | Rparen -> prerr_string ": ')' expected"
  | Lparen -> prerr_string ": '(' expected"
  | Ident -> prerr_string ": identifier expected";
  | Eof -> prerr_string ": End of input expected"
  | Specname -> prerr_string ": species name expected"
  | Propname -> prerr_string ": property name expected"
  | Invalidchar -> prerr_string ": invalid character"
  | Commaeof -> prerr_string ": ',' or end of input expected"
  | Twoparam ->
    prerr_string ": two parameters in sequence, maybe you forgot a ','"
  | Twoprop ->
    prerr_string ": two property in sequence, maybe you forgot a ','"
  | Invalidkeyword -> prerr_string ": invalid keyword"
  | BangDiese -> prerr_string ": '#' or '!' expected"
  | Syntax -> ()
  end;
  prerr_newline ();
  exit 10;;

let type_name_of_uident s i =
  match s with
  | "INT" -> foctint
  | "Self" -> foctself
  | "UNIT" -> foctunit
  | "LIST" -> foctlist
  | "BOOL" -> foctbool
  | "STRING" -> foctstring
  | "RESULT" -> result_type
  | "VERDICT" -> verdict_type
  | "OPTION" -> foctoption
  | "FLOAT" -> foctfloat 
  | _ -> print_message i Invalidkeyword;;

let ident_of_uident s i =
  match s with
  | "FST" -> focfst
  | "NIL" -> focnil
  | "CONS" -> foccons
  | "OR" -> focor
  | "AND" -> focand
  | "PRED" -> focpred
  | "SUCC" -> focsucc
  | "ADD_INT" -> focaddint
  | "SND" -> focsnd
  | "INT_EQUAL" -> focintequal
  | "INT_GT" -> focintgt
  | "SC" -> focstringconcat
  | "CRP" -> foccrp
  | "STRUCT_EQUAL" -> focequal
  | "VUNIT" -> focunit
  | "TRUE" -> foctrue
  | "FALSE" -> focfalse
  | "UNFAILED" -> focunfailed
  | "FAILED" -> focfailed
  | "FOC_ERROR" -> focerror
  | _ -> print_message i Invalidkeyword;;
# 172 "own_parser.ml"
let yytransl_const = [|
  257 (* UNDERSCORE *);
  260 (* FUN *);
  261 (* PIPE *);
  262 (* IN *);
  263 (* IF *);
  264 (* MATCH *);
  265 (* AS *);
  266 (* WITH *);
  267 (* REC *);
  268 (* THEN *);
  269 (* TYPE *);
  270 (* ARO *);
  274 (* SEMICOLON *);
  275 (* ELSE *);
  276 (* LET *);
  277 (* LPAREN *);
  278 (* RPAREN *);
  279 (* CAML *);
  280 (* IMPORT *);
  281 (* ARROW *);
  282 (* EQ *);
  283 (* COMMA *);
  284 (* BANG *);
  285 (* STAR *);
    0 (* EOF *);
  287 (* DIESE *);
  295 (* LESS *);
  296 (* GREATER *);
  297 (* SLASH *);
  298 (* INTER *);
    0|]

let yytransl_block = [|
  258 (* IDENT *);
  259 (* INT *);
  271 (* UIDENT *);
  272 (* IIDENT *);
  273 (* PIDENT *);
  286 (* VAR *);
  288 (* STRING *);
  289 (* LEXERROR *);
  290 (* XML_IDENT *);
  291 (* XML_HEADER *);
  292 (* BTAG_IDENT *);
  293 (* ETAG_IDENT *);
  294 (* BETAG_IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\009\000\009\000\009\000\010\000\010\000\010\000\010\000\011\000\
\013\000\013\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\014\000\014\000\008\000\008\000\008\000\008\000\008\000\015\000\
\015\000\017\000\018\000\018\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\020\000\020\000\020\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\024\000\024\000\025\000\
\025\000\023\000\023\000\026\000\026\000\026\000\026\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\019\000\019\000\
\022\000\022\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\021\000\021\000\007\000\
\007\000\007\000\007\000\027\000\027\000\029\000\029\000\028\000\
\028\000\028\000\028\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\005\000\002\000\005\000\004\000\002\000\001\000\001\000\001\000\
\001\000\003\000\002\000\001\000\001\000\003\000\001\000\001\000\
\001\000\003\000\001\000\001\000\002\000\003\000\002\000\003\000\
\006\000\004\000\002\000\003\000\002\000\003\000\002\000\001\000\
\001\000\001\000\006\000\006\000\001\000\001\000\001\000\001\000\
\004\000\003\000\001\000\003\000\001\000\001\000\002\000\003\000\
\002\000\003\000\006\000\004\000\002\000\003\000\002\000\003\000\
\002\000\001\000\001\000\003\000\001\000\002\000\002\000\001\000\
\005\000\007\000\010\000\009\000\001\000\004\000\004\000\001\000\
\001\000\003\000\006\000\005\000\004\000\008\000\006\000\001\000\
\006\000\007\000\003\000\002\000\003\000\002\000\003\000\002\000\
\003\000\002\000\002\000\003\000\003\000\004\000\002\000\003\000\
\004\000\003\000\001\000\001\000\001\000\001\000\003\000\001\000\
\003\000\004\000\005\000\002\000\001\000\005\000\004\000\006\000\
\007\000\009\000\008\000\010\000\001\000\001\000\003\000\005\000\
\001\000\001\000\002\000\001\000\001\000\001\000\003\000\003\000\
\004\000\005\000\004\000\003\000\001\000\001\000\003\000\002\000\
\001\000\001\000\001\000\001\000\002\000\001\000\002\000\003\000\
\003\000\003\000\002\000\001\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\006\000\007\000\149\000\064\000\000\000\
\061\000\150\000\000\000\000\000\121\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\151\000\000\000\080\000\100\000\000\000\101\000\
\000\000\133\000\000\000\000\000\000\000\000\000\126\000\000\000\
\117\000\000\000\118\000\154\000\138\000\139\000\137\000\000\000\
\155\000\000\000\039\000\000\000\000\000\038\000\156\000\037\000\
\000\000\005\000\000\000\002\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\090\000\000\000\000\000\
\000\000\000\000\000\000\095\000\084\000\091\000\086\000\088\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\141\000\000\000\148\000\136\000\000\000\
\033\000\034\000\000\000\000\000\032\000\000\000\020\000\000\000\
\000\000\000\000\000\000\019\000\012\000\000\000\000\000\013\000\
\000\000\060\000\092\000\085\000\087\000\000\000\000\000\000\000\
\000\000\000\000\000\000\096\000\000\000\000\000\000\000\000\000\
\083\000\093\000\000\000\098\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\147\000\000\000\000\000\042\000\000\000\
\000\000\000\000\031\000\000\000\000\000\000\000\000\000\027\000\
\021\000\029\000\023\000\004\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\094\000\000\000\071\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\000\000\000\000\129\000\000\000\131\000\000\000\000\000\000\000\
\000\000\000\000\146\000\145\000\143\000\144\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\016\000\014\000\030\000\024\000\000\000\
\028\000\022\000\003\000\001\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\000\000\000\103\000\135\000\
\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\026\000\000\000\000\000\000\000\
\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\036\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\111\000\107\000\000\000\120\000\000\000\000\000\000\000\
\000\000\000\000\000\000\110\000\105\000\075\000\068\000\000\000\
\000\000\000\000\000\000\067\000\000\000"

let yydgoto = "\009\000\
\014\000\018\000\035\000\141\000\144\000\052\000\057\000\063\000\
\118\000\119\000\120\000\121\000\232\000\161\000\064\000\217\000\
\065\000\162\000\188\000\183\000\145\000\037\000\181\000\142\000\
\045\001\237\000\058\000\157\000\158\000"

let yysindex = "\081\002\
\004\000\015\255\190\255\223\000\236\255\012\255\003\000\093\000\
\000\000\000\000\005\000\000\000\000\000\000\000\000\000\036\255\
\000\000\000\000\000\000\051\255\000\000\041\255\223\000\223\000\
\072\255\088\255\091\255\026\255\223\000\106\255\136\255\120\255\
\000\000\000\000\000\000\050\255\000\000\000\000\158\255\000\000\
\050\255\000\000\140\255\192\255\207\255\236\255\000\000\017\000\
\000\000\197\255\000\000\000\000\000\000\000\000\000\000\232\255\
\000\000\092\000\000\000\042\000\076\255\000\000\000\000\000\000\
\012\000\000\000\043\001\000\000\000\000\000\000\015\255\116\255\
\010\255\085\000\073\000\037\000\062\000\000\000\112\000\046\255\
\115\000\208\255\123\000\000\000\000\000\000\000\000\000\000\000\
\223\000\189\000\109\000\236\255\120\000\236\255\102\000\236\255\
\236\255\096\255\152\000\000\000\022\255\000\000\000\000\133\000\
\000\000\000\000\151\000\076\255\000\000\023\255\000\000\163\000\
\131\000\032\000\087\000\000\000\000\000\042\255\009\001\000\000\
\162\000\000\000\000\000\000\000\000\000\179\000\223\000\223\000\
\202\000\209\000\209\000\000\000\236\255\067\255\223\000\192\000\
\000\000\000\000\050\255\000\000\228\255\172\000\223\000\083\000\
\219\000\236\255\227\000\000\000\017\000\224\000\236\255\068\255\
\105\255\215\000\221\000\000\000\092\000\229\000\000\000\081\255\
\235\000\242\000\000\000\012\001\186\000\011\001\206\000\000\000\
\000\000\000\000\000\000\000\000\009\000\043\001\000\000\151\255\
\236\255\050\255\235\255\199\000\000\000\168\255\000\000\000\000\
\249\255\013\001\014\001\249\000\010\000\223\000\223\000\000\000\
\102\255\236\255\000\000\252\000\000\000\127\000\015\001\003\001\
\236\255\025\001\000\000\000\000\000\000\000\000\000\000\031\255\
\000\000\029\001\007\001\240\000\245\000\000\000\017\001\033\001\
\038\001\076\255\000\000\000\000\000\000\000\000\000\000\236\255\
\000\000\000\000\000\000\000\000\000\000\034\255\129\255\026\001\
\114\000\223\000\035\001\034\001\031\001\209\000\236\255\223\000\
\236\255\236\255\048\001\223\000\000\000\123\255\000\000\000\000\
\000\000\223\000\236\255\051\001\146\000\037\001\000\000\092\255\
\054\001\248\000\000\000\000\000\000\000\000\000\151\255\093\000\
\093\000\000\000\071\000\151\255\000\000\036\001\041\001\044\001\
\064\001\223\000\000\000\045\001\030\000\117\000\156\000\236\255\
\050\255\223\000\050\255\173\000\236\255\223\000\062\001\000\000\
\000\000\236\255\000\000\000\000\047\001\000\000\000\000\049\001\
\000\000\223\000\064\001\046\001\050\001\020\255\060\001\000\000\
\025\001\223\000\190\000\050\255\223\000\203\000\050\255\236\255\
\094\000\000\000\000\000\019\255\191\255\162\000\050\255\068\001\
\064\001\000\000\000\000\209\000\000\000\046\000\223\000\050\255\
\223\000\210\000\049\001\000\000\000\000\000\000\000\000\051\000\
\050\255\223\000\162\000\000\000\050\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\091\002\
\000\000\000\000\053\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\000\000\092\002\000\000\000\000\000\000\000\000\
\093\002\000\000\027\000\000\000\033\000\000\000\000\000\094\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\212\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\073\001\000\000\
\143\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\099\000\000\000\074\001\000\000\000\000\075\001\
\000\000\000\000\000\000\000\000\039\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\001\000\000\000\000\000\000\
\077\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\110\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\121\255\000\000\
\142\255\000\000\000\000\000\000\000\000\156\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\001\000\000\
\000\000\000\000\000\000\076\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\167\255\000\000\
\000\000\000\000\174\255\175\255\179\255\185\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\079\001\
\000\000\000\000\000\000\000\000\000\000\080\001\000\000\000\000\
\128\000\000\000\103\002\000\000\000\000\000\000\000\000\203\255\
\211\255\000\000\214\255\227\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\001\000\000\139\000\000\000\000\000\
\000\000\000\000\000\000\157\000\000\000\000\000\106\002\000\000\
\000\000\252\255\001\001\135\000\176\000\073\255\168\000\000\000\
\000\000\000\000\000\000\107\002\000\000\000\000\000\000\108\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\109\002\000\000\104\001\000\000\111\002"

let yygindex = "\000\000\
\000\000\041\002\000\000\253\255\001\000\000\000\000\000\225\000\
\195\001\251\001\207\001\109\255\160\255\055\002\213\001\000\000\
\000\000\156\001\115\255\133\255\176\255\000\000\081\001\184\001\
\235\254\000\000\064\002\063\002\221\001"

let yytablesize = 639
let yytable = "\036\000\
\041\000\079\000\054\000\012\000\068\000\048\000\040\000\184\000\
\228\000\245\000\200\000\049\000\215\000\147\000\015\000\126\000\
\016\000\132\000\163\000\074\000\075\000\064\001\163\000\154\000\
\180\000\082\000\125\000\080\000\231\000\048\001\255\000\050\000\
\124\000\163\000\127\000\069\000\081\000\070\000\127\000\092\000\
\090\000\172\000\073\000\077\001\051\000\079\001\095\000\017\000\
\164\000\165\000\084\001\133\000\072\000\165\000\123\000\155\000\
\073\000\101\000\156\000\102\000\254\000\000\001\071\000\173\000\
\165\000\196\000\134\000\089\000\186\000\186\000\090\000\135\000\
\025\000\076\000\025\000\025\000\025\000\105\000\025\000\122\000\
\207\000\072\000\208\000\209\000\210\000\139\000\077\000\025\000\
\187\000\199\000\106\000\032\001\062\000\033\001\025\000\211\000\
\149\000\150\000\089\000\025\000\025\000\151\000\078\000\025\000\
\025\000\025\000\159\000\244\000\212\000\077\000\201\000\213\000\
\214\000\248\000\019\001\231\000\152\000\123\000\079\000\089\000\
\231\000\085\000\090\000\178\000\179\000\202\000\058\000\081\000\
\026\001\083\000\124\000\189\000\125\000\185\000\086\000\087\000\
\088\000\084\000\106\000\193\000\089\000\032\000\015\000\090\000\
\015\000\015\000\015\000\046\000\062\001\176\000\109\000\198\000\
\230\000\111\000\112\000\012\001\082\000\015\000\020\001\091\000\
\092\000\045\000\020\000\069\001\015\000\113\000\037\001\078\000\
\081\000\015\000\015\000\041\001\057\000\015\000\015\000\015\000\
\019\000\233\000\114\000\053\000\047\000\115\000\116\000\083\001\
\055\000\238\000\246\000\031\000\239\000\019\000\049\000\020\000\
\021\000\022\000\027\000\021\000\023\000\024\000\098\000\029\000\
\078\001\253\000\025\000\026\000\027\000\023\000\093\000\099\000\
\056\000\028\000\029\000\094\000\030\000\016\000\016\000\016\000\
\050\000\031\000\167\000\054\000\032\000\033\000\034\000\030\000\
\011\001\089\000\016\000\094\000\090\000\137\000\015\001\024\000\
\048\000\016\000\028\000\042\000\021\001\043\000\016\000\016\000\
\025\001\022\001\023\001\016\000\016\000\089\000\027\001\022\000\
\090\000\044\000\045\000\028\001\089\000\234\000\191\000\090\000\
\046\000\052\000\053\000\010\000\066\000\011\000\079\000\079\000\
\227\000\047\000\056\000\079\000\040\000\079\000\046\001\244\000\
\026\000\096\000\240\000\079\000\079\000\097\000\052\001\079\000\
\051\001\067\000\055\001\089\000\079\000\054\001\090\000\168\000\
\108\000\169\000\057\001\055\000\013\000\056\000\063\001\132\000\
\149\000\096\000\132\000\132\000\132\000\097\000\070\001\089\000\
\125\000\072\001\090\000\125\000\125\000\125\000\124\000\125\000\
\074\001\124\000\124\000\124\000\127\000\124\000\130\000\089\000\
\127\000\127\000\090\000\080\001\089\000\081\001\100\000\090\000\
\104\000\100\000\101\000\149\000\123\000\101\000\085\001\123\000\
\123\000\123\000\129\000\123\000\122\000\122\000\170\000\131\000\
\171\000\122\000\089\000\122\000\059\000\090\000\060\000\040\001\
\128\000\122\000\122\000\097\000\122\000\122\000\089\000\089\000\
\089\000\090\000\122\000\096\000\089\000\194\000\089\000\097\000\
\061\000\132\000\077\000\077\000\136\000\089\000\075\001\077\000\
\089\000\077\000\097\000\148\000\138\000\089\000\096\000\101\000\
\077\000\102\000\097\000\077\000\081\000\081\000\143\000\014\001\
\077\000\081\000\096\000\081\000\146\000\096\000\097\000\049\001\
\106\000\097\000\081\000\159\000\106\000\081\000\106\000\096\000\
\250\000\153\000\081\000\097\000\106\000\106\000\167\000\125\000\
\106\000\082\000\082\000\125\000\166\000\106\000\082\000\140\000\
\082\000\140\000\096\000\030\001\078\000\078\000\097\000\082\000\
\160\000\078\000\082\000\078\000\096\000\050\001\176\000\082\000\
\097\000\222\000\078\000\223\000\038\000\078\000\020\000\021\000\
\022\000\192\000\078\000\023\000\024\000\096\000\053\001\177\000\
\124\000\097\000\026\000\027\000\124\000\225\000\180\000\226\000\
\039\000\029\000\140\000\030\000\235\000\236\000\096\000\071\001\
\031\000\190\000\097\000\032\000\033\000\040\000\038\000\182\000\
\020\000\021\000\022\000\096\000\073\001\023\000\024\000\097\000\
\038\001\039\001\096\000\082\001\026\000\027\000\097\000\003\001\
\195\000\004\001\039\000\029\000\005\001\030\000\006\001\035\001\
\197\000\036\001\031\000\203\000\097\000\032\000\033\000\040\000\
\032\000\204\000\032\000\032\000\032\000\218\000\032\000\219\000\
\109\000\206\000\110\000\111\000\112\000\220\000\243\000\032\000\
\224\000\249\000\241\000\242\000\251\000\032\000\032\000\113\000\
\252\000\133\000\186\000\032\000\032\000\133\000\001\001\032\000\
\032\000\032\000\002\001\174\000\114\000\007\001\008\001\115\000\
\116\000\117\000\109\000\009\001\110\000\111\000\112\000\013\001\
\059\001\016\001\060\001\111\000\112\000\024\001\017\001\018\001\
\029\001\113\000\031\001\034\001\042\001\090\000\044\000\061\001\
\043\001\044\001\047\001\056\001\058\001\046\000\114\000\066\001\
\065\001\115\000\116\000\117\000\114\000\068\001\047\000\115\000\
\116\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\
\008\000\076\001\059\000\069\000\152\000\153\000\009\000\102\000\
\134\000\142\000\043\000\017\000\109\000\119\000\112\000\108\000\
\104\000\113\000\076\000\115\000\114\000\051\000\116\000\122\000\
\229\000\175\000\221\000\107\000\216\000\010\001\247\000\100\000\
\103\000\205\000\000\000\000\000\000\000\000\000\067\001"

let yycheck = "\003\000\
\004\000\000\000\000\000\000\000\000\000\005\000\000\000\131\000\
\000\000\000\000\152\000\000\001\160\000\094\000\000\001\006\001\
\002\001\000\000\000\001\023\000\024\000\043\001\000\001\002\001\
\005\001\029\000\000\000\002\001\176\000\000\000\000\001\020\001\
\000\000\000\001\025\001\000\001\011\001\002\001\000\000\021\001\
\021\001\000\001\002\001\065\001\033\001\000\000\046\000\033\001\
\026\001\031\001\000\000\006\001\000\000\031\001\000\000\034\001\
\000\000\036\001\037\001\038\001\202\000\031\001\027\001\022\001\
\031\001\146\000\021\001\018\001\002\001\002\001\021\001\026\001\
\000\001\002\001\002\001\003\001\004\001\002\001\006\001\000\000\
\000\001\031\001\002\001\003\001\004\001\089\000\015\001\015\001\
\022\001\022\001\015\001\000\001\000\000\002\001\022\001\015\001\
\096\000\097\000\000\000\027\001\028\001\006\001\015\001\031\001\
\032\001\033\001\015\001\006\001\028\001\000\000\006\001\031\001\
\032\001\194\000\238\000\007\001\021\001\002\001\028\001\018\001\
\012\001\002\001\021\001\127\000\128\000\021\001\006\001\000\000\
\006\001\024\001\015\001\135\000\017\001\133\000\015\001\016\001\
\017\001\002\001\000\000\143\000\018\001\021\001\000\001\021\001\
\002\001\003\001\004\001\006\001\040\001\021\001\000\001\151\000\
\002\001\003\001\004\001\027\001\000\000\015\001\239\000\002\001\
\021\001\006\001\021\001\049\001\022\001\015\001\007\001\000\000\
\011\001\027\001\028\001\012\001\006\001\031\001\032\001\033\001\
\021\001\177\000\028\001\006\001\006\001\031\001\032\001\075\001\
\006\001\018\001\190\000\021\001\021\001\000\001\006\001\002\001\
\003\001\004\001\021\001\021\001\007\001\008\001\002\001\021\001\
\068\001\201\000\013\001\014\001\015\001\021\001\015\001\011\001\
\006\001\020\001\021\001\021\001\023\001\002\001\003\001\004\001\
\006\001\028\001\028\001\006\001\031\001\032\001\033\001\021\001\
\224\000\018\001\015\001\021\001\021\001\022\001\234\000\021\001\
\006\001\022\001\021\001\000\001\240\000\002\001\027\001\028\001\
\244\000\241\000\242\000\032\001\033\001\018\001\250\000\021\001\
\021\001\014\001\015\001\251\000\018\001\019\001\027\001\021\001\
\021\001\006\001\000\001\000\001\000\001\002\001\005\001\006\001\
\000\001\030\001\035\001\010\001\006\001\012\001\018\001\006\001\
\021\001\025\001\026\001\018\001\019\001\029\001\026\001\022\001\
\024\001\021\001\030\001\018\001\027\001\029\001\021\001\000\001\
\021\001\002\001\034\001\033\001\033\001\035\001\042\001\022\001\
\040\001\025\001\025\001\026\001\027\001\029\001\050\001\018\001\
\022\001\053\001\021\001\025\001\026\001\027\001\022\001\029\001\
\056\001\025\001\026\001\027\001\022\001\029\001\026\001\018\001\
\026\001\027\001\021\001\071\001\018\001\073\001\018\001\021\001\
\031\001\021\001\018\001\075\001\022\001\021\001\082\001\025\001\
\026\001\027\001\010\001\029\001\005\001\006\001\000\001\026\001\
\002\001\010\001\018\001\012\001\000\001\021\001\002\001\025\001\
\012\001\018\001\019\001\029\001\021\001\022\001\018\001\005\001\
\006\001\021\001\027\001\025\001\010\001\027\001\012\001\029\001\
\020\001\002\001\005\001\006\001\002\001\019\001\025\001\010\001\
\022\001\012\001\029\001\022\001\002\001\027\001\025\001\036\001\
\019\001\038\001\029\001\022\001\005\001\006\001\026\001\022\001\
\027\001\010\001\025\001\012\001\021\001\025\001\029\001\027\001\
\006\001\029\001\019\001\015\001\010\001\022\001\012\001\025\001\
\026\001\002\001\027\001\029\001\018\001\019\001\028\001\025\001\
\022\001\005\001\006\001\029\001\002\001\027\001\010\001\036\001\
\012\001\038\001\025\001\026\001\005\001\006\001\029\001\019\001\
\026\001\010\001\022\001\012\001\025\001\026\001\021\001\027\001\
\029\001\000\001\019\001\002\001\000\001\022\001\002\001\003\001\
\004\001\022\001\027\001\007\001\008\001\025\001\026\001\021\001\
\025\001\029\001\014\001\015\001\029\001\000\001\005\001\002\001\
\020\001\021\001\022\001\023\001\014\001\015\001\025\001\026\001\
\028\001\026\001\029\001\031\001\032\001\033\001\000\001\015\001\
\002\001\003\001\004\001\025\001\026\001\007\001\008\001\029\001\
\008\001\009\001\025\001\026\001\014\001\015\001\029\001\000\001\
\022\001\002\001\020\001\021\001\000\001\023\001\002\001\000\001\
\022\001\002\001\028\001\037\001\029\001\031\001\032\001\033\001\
\000\001\037\001\002\001\003\001\004\001\027\001\006\001\022\001\
\000\001\037\001\002\001\003\001\004\001\002\001\022\001\015\001\
\006\001\022\001\006\001\006\001\006\001\021\001\022\001\015\001\
\022\001\025\001\002\001\027\001\028\001\029\001\002\001\031\001\
\032\001\033\001\028\001\027\001\028\001\021\001\006\001\031\001\
\032\001\033\001\000\001\006\001\002\001\003\001\004\001\022\001\
\000\001\015\001\002\001\003\001\004\001\006\001\021\001\025\001\
\006\001\015\001\022\001\006\001\025\001\021\001\014\001\015\001\
\021\001\002\001\022\001\006\001\022\001\021\001\028\001\022\001\
\027\001\031\001\032\001\033\001\028\001\018\001\030\001\031\001\
\032\001\001\000\002\000\003\000\004\000\005\000\006\000\007\000\
\008\000\022\001\000\000\000\000\000\000\000\000\022\001\022\001\
\022\001\037\001\022\001\022\001\025\001\022\001\000\000\025\001\
\022\001\000\000\000\000\000\000\000\000\006\001\000\000\071\000\
\174\000\119\000\164\000\061\000\160\000\218\000\191\000\056\000\
\058\000\157\000\255\255\255\255\255\255\255\255\046\001"

let yynames_const = "\
  UNDERSCORE\000\
  FUN\000\
  PIPE\000\
  IN\000\
  IF\000\
  MATCH\000\
  AS\000\
  WITH\000\
  REC\000\
  THEN\000\
  TYPE\000\
  ARO\000\
  SEMICOLON\000\
  ELSE\000\
  LET\000\
  LPAREN\000\
  RPAREN\000\
  CAML\000\
  IMPORT\000\
  ARROW\000\
  EQ\000\
  COMMA\000\
  BANG\000\
  STAR\000\
  EOF\000\
  DIESE\000\
  LESS\000\
  GREATER\000\
  SLASH\000\
  INTER\000\
  "

let yynames_block = "\
  IDENT\000\
  INT\000\
  UIDENT\000\
  IIDENT\000\
  PIDENT\000\
  VAR\000\
  STRING\000\
  LEXERROR\000\
  XML_IDENT\000\
  XML_HEADER\000\
  BTAG_IDENT\000\
  ETAG_IDENT\000\
  BETAG_IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'l_prm) in
    Obj.repr(
# 227 "own_parser.mly"
                                  ( (_1, _3) )
# 635 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 228 "own_parser.mly"
                                  ( (_1, []) )
# 642 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'l_prm) in
    Obj.repr(
# 229 "own_parser.mly"
                                  (print_message 5 Eof)
# 650 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_prm) in
    Obj.repr(
# 230 "own_parser.mly"
                                  (print_message 4 Rparen)
# 658 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 231 "own_parser.mly"
                                  (print_message 2 Lparen)
# 665 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "own_parser.mly"
                                  (print_message 1 Specname)
# 671 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 233 "own_parser.mly"
                                  (print_message 1 Invalidchar)
# 678 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    Obj.repr(
# 234 "own_parser.mly"
                                  (print_message 1 Specname)
# 684 "own_parser.ml"
               : Own_expr.species_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm) in
    Obj.repr(
# 237 "own_parser.mly"
                  ( [_1] )
# 691 "own_parser.ml"
               : 'l_prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_prm) in
    Obj.repr(
# 238 "own_parser.mly"
                  ( _1::_3 )
# 699 "own_parser.ml"
               : 'l_prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prm) in
    Obj.repr(
# 239 "own_parser.mly"
                  (print_message 2 Twoparam)
# 707 "own_parser.ml"
               : 'l_prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 243 "own_parser.mly"
                 (print_message 1 Invalidchar)
# 714 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm_collection) in
    Obj.repr(
# 244 "own_parser.mly"
                 ( InstPrmColl(None,_1) )
# 721 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prm_collection) in
    Obj.repr(
# 245 "own_parser.mly"
                          ( InstPrmColl(Some _1, _3) )
# 729 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 246 "own_parser.mly"
                 ( InstPrmEnt _1 )
# 736 "own_parser.ml"
               : 'prm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 250 "own_parser.mly"
        (_1)
# 743 "own_parser.ml"
               : 'prm_collection))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 254 "own_parser.mly"
                                ( [_1] )
# 750 "own_parser.ml"
               : 'l_prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prm_entity) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_prm_entity) in
    Obj.repr(
# 255 "own_parser.mly"
                                ( _1::_3 )
# 758 "own_parser.ml"
               : 'l_prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 259 "own_parser.mly"
                                        ( expr_string _1)
# 765 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 260 "own_parser.mly"
                                        ( expr_int _1)
# 772 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 261 "own_parser.mly"
                                        ( expr_meth focself _2 [])
# 779 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 262 "own_parser.mly"
                                        ( expr_meth _1 _3 [])
# 787 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 263 "own_parser.mly"
                                        ( expr_glob (Prefix(None, _2)) )
# 794 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 264 "own_parser.mly"
                                        ( expr_glob (Prefix(Some _1, _3)) )
# 802 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 266 "own_parser.mly"
                                        ( expr_fun  _2 _4 _6 )
# 811 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prm_entity) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_prm_entity) in
    Obj.repr(
# 267 "own_parser.mly"
                                        ( expr_app _1 _3)
# 819 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "own_parser.mly"
                                        ( print_message 2 Ident)
# 825 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 269 "own_parser.mly"
                                        ( print_message 3 Ident)
# 832 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "own_parser.mly"
                                        ( print_message 2 Ident)
# 838 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 271 "own_parser.mly"
                                        ( print_message 3 Ident)
# 845 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 272 "own_parser.mly"
                                        ( print_message 2 BangDiese)
# 852 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "own_parser.mly"
                                        ( print_message 1 Syntax)
# 858 "own_parser.ml"
               : 'prm_entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 292 "own_parser.mly"
        ( _1 )
# 865 "own_parser.ml"
               : 'ident_uident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 293 "own_parser.mly"
         ( _1 )
# 872 "own_parser.ml"
               : 'ident_uident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident_uident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'species_context) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Context_test.test_context) in
    Obj.repr(
# 298 "own_parser.mly"
                    ( tc_add_bc _6 (create_bc _2 (bca_c _4)) )
# 881 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident_uident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'entity) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Context_test.test_context) in
    Obj.repr(
# 300 "own_parser.mly"
                    ( tc_add_bc _6 (create_bc _2 (bca_e _4)) )
# 890 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'species_context) in
    Obj.repr(
# 301 "own_parser.mly"
                    ( create_tc [] _1 )
# 897 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    Obj.repr(
# 302 "own_parser.mly"
                    (print_message 1 Specname)
# 903 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    Obj.repr(
# 303 "own_parser.mly"
                    (print_message 1 Syntax)
# 909 "own_parser.ml"
               : Context_test.test_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'species_name) in
    Obj.repr(
# 306 "own_parser.mly"
               ( create_sc _1 [] )
# 916 "own_parser.ml"
               : 'species_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'species_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'test_context_param_list) in
    Obj.repr(
# 307 "own_parser.mly"
                                                     ( create_sc _1 _3 )
# 924 "own_parser.ml"
               : 'species_context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 310 "own_parser.mly"
                     (create_species_name _1 _3)
# 932 "own_parser.ml"
               : 'species_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident_uident) in
    Obj.repr(
# 313 "own_parser.mly"
               ( [_1] )
# 939 "own_parser.ml"
               : 'test_context_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_uident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'test_context_param_list) in
    Obj.repr(
# 314 "own_parser.mly"
                                             ( _1::_3 )
# 947 "own_parser.ml"
               : 'test_context_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 317 "own_parser.mly"
                                        ( expr_string _1)
# 954 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 318 "own_parser.mly"
                                        ( expr_int _1)
# 961 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 319 "own_parser.mly"
                                        ( expr_meth focself _2 [])
# 968 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 320 "own_parser.mly"
                                        ( expr_meth _1 _3 [])
# 976 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 321 "own_parser.mly"
                                        ( expr_glob (Prefix(None, _2)) )
# 983 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 322 "own_parser.mly"
                                        ( expr_glob (Prefix(Some _1, _3)) )
# 991 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prm_entity) in
    Obj.repr(
# 323 "own_parser.mly"
                                                      ( expr_fun  _2 _4 _6 )
# 1000 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prm_entity) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_prm_entity) in
    Obj.repr(
# 324 "own_parser.mly"
                                        ( expr_app _1 _3)
# 1008 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 325 "own_parser.mly"
                                        (print_message 2 Ident)
# 1014 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 326 "own_parser.mly"
                                        (print_message 3 Ident)
# 1021 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 327 "own_parser.mly"
                                        (print_message 2 Ident)
# 1027 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 328 "own_parser.mly"
                                        (print_message 3 Ident)
# 1034 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 329 "own_parser.mly"
                                        (print_message 2 BangDiese)
# 1041 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "own_parser.mly"
                                        (print_message 1 Syntax)
# 1047 "own_parser.ml"
               : 'entity))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 342 "own_parser.mly"
                              ( [_1] )
# 1054 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 343 "own_parser.mly"
                              ( _1::_3 )
# 1062 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 344 "own_parser.mly"
                              (print_message 1 Invalidchar)
# 1069 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 345 "own_parser.mly"
                              (print_message 2 Commaeof)
# 1076 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 346 "own_parser.mly"
                              (print_message 2 Twoprop)
# 1084 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 347 "own_parser.mly"
                              (print_message 1 Propname)
# 1090 "own_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 366 "own_parser.mly"
  ( ObjToplet (_2, None, _4) )
# 1098 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 368 "own_parser.mly"
  ( ObjToplet (_2,Some _4, _6) )
# 1107 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'list_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 370 "own_parser.mly"
  ( ObjToplet (_2,Some _7, _4 _9) )
# 1117 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 372 "own_parser.mly"
  ( ObjToplet (_2,Some _6, _8) )
# 1126 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 374 "own_parser.mly"
  ( ObjTopcall _1 )
# 1133 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 376 "own_parser.mly"
   (ObjType(type_name_of_uident _2 2,_4) )
# 1141 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 378 "own_parser.mly"
   (ObjType(_2,_4) )
# 1149 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 379 "own_parser.mly"
        ( print_message 1 Syntax )
# 1155 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 380 "own_parser.mly"
             (print_message 1 Invalidchar)
# 1162 "own_parser.ml"
               : Own_expr.toplevel_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 385 "own_parser.mly"
   ((_1,[])::_3)
# 1170 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'l_type_focal) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type_def) in
    Obj.repr(
# 387 "own_parser.mly"
   ((_1,_3)::_6)
# 1179 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'l_type_focal) in
    Obj.repr(
# 389 "own_parser.mly"
   ([_1,_3])
# 1187 "own_parser.ml"
               : 'expr_type_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 420 "own_parser.mly"
  ( expr_fun_notyp _2 _4 )
# 1195 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Own_types.typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 422 "own_parser.mly"
  ( MFun(_2, Some _5, _8) )
# 1204 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Own_expr.myexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 424 "own_parser.mly"
  ( MIfte(_2,_4,_6) )
# 1213 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_simpl) in
    Obj.repr(
# 425 "own_parser.mly"
             ( _1 )
# 1220 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 427 "own_parser.mly"
    ( MVarloc(false, (_2, None),_4,_6) )
# 1229 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 429 "own_parser.mly"
    ( MVarloc(true, (_3, None),_5,_7) )
# 1238 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    Obj.repr(
# 431 "own_parser.mly"
    ( _2 )
# 1245 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 433 "own_parser.mly"
    ( MGlob_id(Prefix(None, _2)) )
# 1252 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 435 "own_parser.mly"
    ( MGlob_id(Prefix(Some _1, _3)) )
# 1260 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 437 "own_parser.mly"
    ( MGlob_id(Infix(_2)) )
# 1267 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 439 "own_parser.mly"
    ( MGlob_id(Prefix(Some _1, _3)) )
# 1275 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 441 "own_parser.mly"
    ( MGlob_id(Prefix(None, _2)) )
# 1282 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 443 "own_parser.mly"
    ( expr_seq _1 _3 (use_seq_function ()) )
# 1290 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 445 "own_parser.mly"
    ( MGlob_id(ident_of_uident _2 2) )
# 1297 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 447 "own_parser.mly"
    ( MGlob_id(Prefix(None, _2)) )
# 1304 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 449 "own_parser.mly"
    ( MGlob_id(Prefix(Some _1, _3)) )
# 1312 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 451 "own_parser.mly"
    ( MCaml_def(_3) )
# 1319 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'l_case) in
    Obj.repr(
# 453 "own_parser.mly"
(MMatch((_2, None),_4) )
# 1327 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 455 "own_parser.mly"
    ( MMeth(None, _2) )
# 1334 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 458 "own_parser.mly"
    ( MMeth(Some _1, _3) )
# 1342 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Own_expr.myexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_expr_focal) in
    Obj.repr(
# 467 "own_parser.mly"
( MApp(_1, _3) )
# 1350 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    Obj.repr(
# 469 "own_parser.mly"
( MApp(_1, []) )
# 1357 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 470 "own_parser.mly"
         (MString _1)
# 1364 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 471 "own_parser.mly"
        ( print_message 1 Syntax )
# 1370 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 472 "own_parser.mly"
             (print_message 1 Invalidchar)
# 1377 "own_parser.ml"
               : Own_expr.myexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 476 "own_parser.mly"
              ( [_1, Own_types.TAtom(Some focbasics, "unit")] )
# 1384 "own_parser.ml"
               : 'l_expr_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_expr.myexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_expr_focal) in
    Obj.repr(
# 477 "own_parser.mly"
                                 ( (_1, Own_types.TAtom(Some focbasics, "unit")) :: _3 )
# 1392 "own_parser.ml"
               : 'l_expr_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 481 "own_parser.mly"
        ( [_1] )
# 1399 "own_parser.ml"
               : 'l_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_ident) in
    Obj.repr(
# 482 "own_parser.mly"
                      ( _1::_3 )
# 1407 "own_parser.ml"
               : 'l_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 487 "own_parser.mly"
   ( [let a,b = _2 in a,b,_4] )
# 1415 "own_parser.ml"
               : 'l_case))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Own_expr.myexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'l_case) in
    Obj.repr(
# 489 "own_parser.mly"
   ( (let a,b = _2 in a,b,_4)::_5)
# 1424 "own_parser.ml"
               : 'l_case))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 493 "own_parser.mly"
  (ident_of_uident _2 2, [] )
# 1431 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 495 "own_parser.mly"
  ( Prefix(None, _1), [] )
# 1438 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'l_ident) in
    Obj.repr(
# 497 "own_parser.mly"
  ( ident_of_uident _2 2, List.map (fun e -> Some e) _4 )
# 1446 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_ident) in
    Obj.repr(
# 499 "own_parser.mly"
  ( Prefix(None, _1), List.map (fun e -> Some e) _3 )
# 1454 "own_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 510 "own_parser.mly"
                                            (meth_create _2 _4 _6 false)
# 1463 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 511 "own_parser.mly"
                                            (meth_create _3 _5 _7 true)
# 1472 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'list_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 513 "own_parser.mly"
                                            (meth_create _2 _7 (_4 _9) false)
# 1482 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 515 "own_parser.mly"
                                            (meth_create _2 _6 _8 false)
# 1491 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'list_var) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Own_expr.myexpr) in
    Obj.repr(
# 517 "own_parser.mly"
                                            (meth_create _3 _8 (_5 _10) true)
# 1501 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    Obj.repr(
# 518 "own_parser.mly"
        ( print_message 1 Syntax )
# 1507 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 519 "own_parser.mly"
             (print_message 1 Invalidchar)
# 1514 "own_parser.ml"
               : Own_expr.methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 529 "own_parser.mly"
                      ( fun e -> MFun(_1, Some _3,e) )
# 1522 "own_parser.ml"
               : 'list_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'list_var) in
    Obj.repr(
# 530 "own_parser.mly"
                                     ( fun e -> MFun(_1, Some _3,_5 e))
# 1531 "own_parser.ml"
               : 'list_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 541 "own_parser.mly"
    ( MInt(_1) )
# 1538 "own_parser.ml"
               : 'expr_simpl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 543 "own_parser.mly"
    ( MVar(_1, None) )
# 1545 "own_parser.ml"
               : 'expr_simpl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 554 "own_parser.mly"
                                      ( TAtom(None, type_name_of_uident _2 1) )
# 1552 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 555 "own_parser.mly"
                                      ( TAtom(None, _1) )
# 1559 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 556 "own_parser.mly"
                                      ( TAtom(None, _1) )
# 1566 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 557 "own_parser.mly"
                                      ( TAtom(None, _1) )
# 1573 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 558 "own_parser.mly"
                                      ( TFct(_1, _3) )
# 1581 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Own_types.typ) in
    Obj.repr(
# 559 "own_parser.mly"
                                      ( _2 )
# 1588 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_type_focal) in
    Obj.repr(
# 560 "own_parser.mly"
                                      ( TPrm(None, _1, _3) )
# 1596 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'l_type_focal) in
    Obj.repr(
# 561 "own_parser.mly"
                                          ( TPrm(None, type_name_of_uident _2 1, _4) )
# 1604 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'l_type_focal) in
    Obj.repr(
# 562 "own_parser.mly"
                                      ( TPrm(None, _1, _3) )
# 1612 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 563 "own_parser.mly"
                                      ( TProd(_1,_3) )
# 1620 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 564 "own_parser.mly"
                                      ( print_message 1 Syntax )
# 1626 "own_parser.ml"
               : Own_types.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Own_types.typ) in
    Obj.repr(
# 567 "own_parser.mly"
               ( [_1] )
# 1633 "own_parser.ml"
               : 'l_type_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Own_types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'l_type_focal) in
    Obj.repr(
# 568 "own_parser.mly"
                                  (_1::_3)
# 1641 "own_parser.ml"
               : 'l_type_focal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'xml_header) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 580 "own_parser.mly"
                    ( _2 )
# 1649 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 581 "own_parser.mly"
            (print_message 1 Invalidchar)
# 1656 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    Obj.repr(
# 582 "own_parser.mly"
            (print_message 1 Invalidkeyword)
# 1662 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    Obj.repr(
# 583 "own_parser.mly"
            (print_message 1 Invalidchar)
# 1668 "own_parser.ml"
               : Own_xml.xml_tree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 586 "own_parser.mly"
              ( () )
# 1675 "own_parser.ml"
               : 'xml_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'xml_header) in
    Obj.repr(
# 587 "own_parser.mly"
                         ( () )
# 1683 "own_parser.ml"
               : 'xml_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 591 "own_parser.mly"
        ( [_1] )
# 1690 "own_parser.ml"
               : 'tag_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tag) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tag_list) in
    Obj.repr(
# 592 "own_parser.mly"
                 ( _1::_2 )
# 1698 "own_parser.ml"
               : 'tag_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tag_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 597 "own_parser.mly"
            ( if _1 = _3 then Node(_1,_2) else failwith "erreur" )
# 1707 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 599 "own_parser.mly"
            ( if _1 = _3 then Leave(_1,Some _2) else failwith "erreur" )
# 1716 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 601 "own_parser.mly"
            ( if _1 = _3 then Leave(_1,Some _2) else failwith "erreur" )
# 1725 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 603 "own_parser.mly"
            ( if _1 = _2 then Leave(_1,None) else failwith "erreur" )
# 1733 "own_parser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 605 "own_parser.mly"
            ( Leave(_1,None) )
# 1740 "own_parser.ml"
               : 'tag))
(* Entry expr_species *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry properties_test *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry topexpr_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry type_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry meth_focal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr_xml *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry test_context *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr_species (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Own_expr.species_test)
let properties_test (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : string list)
let topexpr_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Own_expr.toplevel_def)
let expr_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Own_expr.myexpr)
let type_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Own_types.typ)
let meth_focal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : Own_expr.methods)
let expr_xml (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 7 lexfun lexbuf : Own_xml.xml_tree)
let test_context (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 8 lexfun lexbuf : Context_test.test_context)
