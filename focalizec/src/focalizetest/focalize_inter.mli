(** {6 All functions linking focalize and focaltest types} *)

exception No_module_opened;;
(** Raised when the environnement were no initialized. *)

exception Not_a_concrete_type of Own_types.typ option;;
(** Raised when attempts to access the constructors of a non concrete type. *)

exception Cant_convert_texpr
(** Raised when attempts to convert a focal expression not handle by this
program. *)

exception Cant_convert_typ of string;;
(** Raised when attempts to convert a focal type not handle by this
program. *)

exception Not_a_property of string
(** Raised when searching for a property that is actually a method. *)

exception Rep_not_defined of string
(** Raised when the rep of a species is no defined. *)

exception Type_dont_exists of string;;
(** Raised when a type don't exists. *)

exception Species_dont_exists of string
(** Raised when a species was not found. *)

exception Property_doesnt_exists of string
(** Raised when a property was not found. *)

exception Function_doesnt_exists of string
(** Raised when a function is not found. *)

exception Bad_parameters of string
(** Raised when a bad parameters is met. *)

(*
exception Foc_Failure of string
(** The focal [Foc_Failure] binding. *)
*)

exception Bad_parameters_numbers of int * int;;
(** Raise when attempts to instantiate a species with a bad numbers of
parameters. *)

exception Not_defined of string * (string list);;
(** Raise when a complete species is expected and some methods/properties are
only declared. *)

(*
type focal_error
(** An alias types for error message generated by focal. *)
*)

(*
exception Foc_def_err of focal_error
(** A binding exception for focal definition error. *)
*)

type focalize_species;;

type focalize_species_field;;

type focalize_species_param;;

type focalize_type;;
(** The abstract focalize types. *)

type focalize_expr;;
(** The abstract focalize expressions. *)

type focalize_prop;;
(** The abstract focalize propositions. *)

type myfield = 
  | Signature of string * Own_types.typ
  | Definition of string * focalize_expr
  | RecDef     of myfield list
  | PropDef    of string * Own_prop.proposition
  | Property   of string * Own_prop.proposition
  | Theorem    of string * Own_prop.proposition;;

 (**/**)
(** {6 Conversions between Focal type and own types} *)

val typ_of_foctyp : focalize_type -> Own_types.typ
(** Convert a focc types to [typ] *)

val typ_of_const : (string * Own_types.typ) list -> focalize_type -> Own_types.typ option
(**
[typ_of_const prm t] converts the constructor's type [t] in product's type style.
It transforms a type of style [t_1 -> ... -> t_n] to [t_1 * ... * t_(n-1)].
It also instantiates the parameters of the constructor by applying the
association list [prm] on the subtypes [Var v].

@raise No_conversion if [t] cannot be converted. *)

val myexpr_of_texpr : string -> string list -> focalize_expr -> Own_expr.myexpr
(** [myexpr_of_texpr mod texpt] convert a focal texpr value to a [myexpr] value. Can
raise [myexpr_of_texpr]. *)

val proposition_of_tprop : string -> focalize_prop -> Own_prop.proposition
(** [proposition_of_tprop tprop] convert a focal proposition [tprop] to the same
proposition of type [proposition]. *)

(*
    val simple_expr_of_myexpr : Own_expr.myexpr -> Ast_types.simple_expr
    (** Convert a [myexpr] value to focal [simple_expr] value.

    Raise failwith if no conversion is possible.*)
*)

val foctyp_of_typ : Own_types.typ -> focalize_type
(** converts a [foctyp] value to [typ]. *)

(**/**)

(** {6 Focal's object queries} *)

val get_rep : Own_expr.species_name -> Own_types.typ
(** [get_rep spec] returns the rep type of spec [spec].

@raise Species_dont_exists if the species don't exists.

@raise Rep_not_defined if the rep is not defined. *)

val get_parameters : Own_expr.species_name -> Own_expr.parameters_expect list
(** [get_parameters spec] returns the list of parameters the species [spec] expect.

@raise Species_dont_exists if the species don't exists.

@raise Bad_parameters if [spec] expect a parameters type the programs
don't handle. *)

val get_prop_def : Own_expr.species_name -> string -> Own_prop.proposition
(** [get_prop_def spec prop] returns the property  named [prop] defined in the
species [spec].

If the species [spec] don't exists, raise [Species_dont_exists spec].

@raise Property_dont_exists if [prop] don't exists.

@raise Not_a_property prop if [prop] is not a property (a method for
example).

@raise Cant_convert_texpr if the proposition contains a focal expression
that can't be converted. Mostly a type error in the proposition. *)

val get_meth_def : Own_expr.species_name -> string -> Own_expr.myexpr * Own_types.typ 
(** [get_meth_def spec meth] returns the property  named [prop] defined in the
species [meth].

If the species [spec] don't exists, raise [Species_dont_exists spec].

@raise Property_dont_exists if [meth] don't exists.

@raise Cant_convert_texpr if the method contains a focal expression
that can't be converted. Mostly a type error in the method. *)

val is_concrete_type : Own_types.typ -> bool
(** [is_concrete_type t] returns [true] if [t] is a concrete type in environment
*)

val get_concrete_def : Own_types.typ -> Own_types.constructor list
(** [get_concrete_def t] returns the list of constructor corresponding to the
type [t].

@raise Type_dont_exists if [t] is not found in focal environment.

@raise Not_a_concrete_type if [t] if the definition of type is not found
in focal environment. *)

(*
val display_foc_def_err : string -> focal_error -> unit
(** [display_foc_def_err msg err] display an error message generated bu the
focal compiler. *) 
*)

val is_complete : string -> string -> bool
(** [is_complete species] returns [true] if the species names [species] is
complete else its raise an exception.

@raise Not_defined if some elements in the species ares not defined. *)

(** {6 Environment's load directives} *)

(*
val load_basics : unit -> unit
(** [load_basics] loads in environment the basics.fo file present in the
focal standard library directory. *)

val load_library : string -> unit
(** [load_library file] loads in focal environment the file [file]. [file]
should be a .fo binary file. It can be a library from the focal standard
library. *)

val load_fichier : string -> unit
(** [load_fichier file] loads in focal environment the file [file]. [file]
should be a .foc filename. *)
*)

val focalize_init : string -> string -> unit;;
(** [focalize_init lib_dir module_name] loads the .fo file corresponding to
[module_name]. All others functions defined in this module refer to the
environment given by this function. [lib_dir] must be the library directory
of focalizec, found in [Installation.install_lib_dir]. *)

(** {6 Verifying types} *)

 (**/**)

(*
val verify_prm : Own_expr.parameters_expect -> Own_expr.parameters_instance -> unit
(** [verify_prm expect test] takes a parameters types expected and effective
parameter. Raise an exception if the instance is a bad type

@raise Foc_def_err if an type error occurred. *)

val verify_prms : Own_expr.parameters_expect list -> Own_expr.parameters_instance list -> unit
(** Like [verify_prm] but for a list of parameters.

@raise Tmp if the two list have different length.*)
*)

(**/**)

(*
val good_prms : (string * Own_expr.parameters_instance list) -> unit
(** [good_prms spec prm_test] verify if [prm_test] have good type. *)
*)

(* ********************** *)

val add_path : string -> unit;;

val get_all_types : unit -> (string * Own_types.typ_body) list
(** Returns the list of all defined type in the Focal environnement *)

val expr_for_prolog_of_texpr :
  (string * string) -> string -> string list * Expr_prolog.minifoc_expr
(** [expr_for_prolog_of_texpr species name] 

Returns the expr_prolog expression corresponding to definition of the
methods/global definition [name]. If it's a method, search the species
[species]. It also returns the list of argument if it's a function.
*)

val get_parameters_number : Own_expr.species_name -> string -> int

val is_constructor : Own_basics.ident -> bool

val get_meth_def_split : Own_expr.species_name -> string -> (string *
Own_types.typ option) list * (Own_expr.myexpr * Own_types.typ)



val extract_vname : Parsetree.vname -> string;;

type expr_or_logic =
| FExpr of  Own_expr.myexpr
| FLogic of Own_prop.proposition;;

val expr_or_logic_of_body : Parsetree.binding_body -> expr_or_logic;;

val focalize_get_species : string * string -> focalize_species;;
val focalize_get_fields : focalize_species -> focalize_species_field list;;
val convert_field : focalize_species_field -> myfield;;

val focalize_get_species_list : string -> string list;;

val is_complete_def : focalize_species -> bool;;
val is_collection : focalize_species -> bool;;



val focalize_get_params : focalize_species -> focalize_species_param list;;

val focalize_get_param_name : focalize_species_param -> string;;
val focalize_get_param_type : focalize_species_param -> string;;
val focalize_param_is_ent : focalize_species_param -> bool;;
val open_module_cumul : string -> unit;;
