<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <xs:import namespace="http://www.w3.org/2001/XMLSchema-instance"
             schemaLocation="xsi.xsd"/>
  <xs:element name="focdoc">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:general-informations"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="foc:collection"/>
          <xs:element ref="foc:type-def"/>
          <xs:element ref="foc:global-fun"/>
          <xs:element ref="foc:species"/>
          <xs:element ref="foc:directive"/>
          <xs:element ref="foc:global-theorem"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute ref="xsi:schemaLocation" use="required"/>
    </xs:complexType>
  </xs:element>


  <!-- Comments kept from the source code. -->
  <xs:element name="comments" type="xs:string"/>

  <!-- Parameters bound by a let (method, expression, global). -->
  <xs:element name="binding-param">
    <xs:complexType>
      <xs:element ref="foc:fcl-name"/>
      <xs:element ref="foc:type-expr"/>
    </xs:complexType>
  </xs:element>

  <!-- Toplevel let definition. -->
  <xs:element name="global-fun">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:sequence>
          <xs:element ref="foc:binding-param"/>
        </xs:sequence>
        <xs:element ref="foc:type-expr"/>
        <xs:element ref="foc:let-body"/>
      </xs:sequence>
      <xs:attribute name="recursive" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>

  <!-- Toplevel theorem. -->
  <xs:element name="global-theorem">
    <xs:complexType>
      <xs:sequence>
       <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:logexpr"/>
        <xs:element ref="foc:proof"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- General informations. -->
  <xs:element name="general-informations">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="foc:title"/>
        <xs:element minOccurs="0" ref="foc:author"/>
        <xs:element minOccurs="0" ref="foc:comments"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

   <!-- Title for the generated documentation. -->
  <xs:element name="title" type="xs:string"/>

  <!-- Author of the generated documentation. -->
  <xs:element name="author" type="xs:string"/>

  <!-- Toplevel directive. -->
  <xs:element name="directive">
  <xs:complexType>
    <xs:choice maxOccurs="unbounded">
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="foc:dir-load"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="foc:dir-open"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="foc:dir-coq-require"/>
    </xs:choice>
  </xs:complexType>
  </xs:element>

  <!-- "Load" directive. -->
  <xs:element name="dir-load" type="xs:NCName"/>

  <!-- "Open" directive. -->
  <xs:element name="dir-open" type="xs:NCName"/>

  <!-- "Coq_require" directive. -->
  <xs:element name="dir-coq-require" type="xs:NCName"/>

  <xs:element name="informations">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="foc:math"/>
        <xs:element minOccurs="0" ref="foc:comments"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Property. -->
  <xs:element name="meth-property">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:history"/>
        <xs:element ref="foc:informations"/>
        <xs:element ref="foc:logexpr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Theorem. -->
  <xs:element name="meth-theorem">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:history"/>
        <xs:element ref="foc:informations"/>
        <xs:element ref="foc:logexpr"/>
        <xs:element ref="foc:proof"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Theorem's proof. -->
  <xs:element name="proof">
    <xs:complexType/>
  </xs:element>

  <!-- Collection "implements" clause. -->
  <xs:element name="implements">
    <xs:complexType>
        <xs:element ref="foc:spe-expr"/>
    </xs:complexType>
  </xs:element>

  <!-- Collection. -->
  <xs:element name="collection">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:informations"/>
        <xs:element ref="foc:implements"/>
        <xs:element ref="foc:method"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="tydef-external"/>

  <!-- Alias type definition with its equivalent type expression. -->
  <xs:element name="tydef-alias">
    <xs:complexType>
      <xs:element ref="foc:type-expr"/>
    </xs:complexType>
  </xs:element>

  <!-- Sum type definition with all its value constructors. -->
  <xs:element name="tydef-sum">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="foc:ty-val-constr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Record type definition with all its fields. -->
  <xs:element name="tydef-record">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:type-expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="type-def-body">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="tydef-record"/>
        <xs:element ref="tydef-sum"/>
        <xs:element ref="tydef-alias"/>
        <xs:element ref="tydef-external"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!-- Type definition. -->  <!-- TODO: records and aliases. -->
  <xs:element name="type-def">
    <xs:complexType>
      <xs:element ref="foc:fcl-name"/>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="foc:ty-var"/>
      </xs:sequence>
      <xs:element ref="type-def-body"/>
    </xs:complexType>
  </xs:element>

  <!-- Sum type value constructor. -->
  <xs:element name="ty-val-constr">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:type-expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="let-bkind-comp"/>  <!-- Computational. -->
  <xs:element name="let-bkind-log"/>   <!-- Logical. -->

  <!-- Kind of let-binding body (logical or computational). -->
  <xs:element name="let-body-kind">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="foc:let-bkind-comp"/>
        <xs:element ref="foc:let-bkind-log"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!-- Let-binding body (logical,computational, method, let-in or toplevel. -->
  <xs:element name="let-body">
    <xs:complexType>
      <xs:element ref="foc:let-body-kind"/>
      <xs:choice>
        <xs:element ref="foc:logexpr"/>
        <xs:element ref="foc:expr"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!-- Let-def method. -->
  <xs:element name="meth-let">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:history"/>
        <xs:element ref="foc:informations"/>
        <xs:sequence>
          <xs:element ref="foc:binding-param"/>
        </xs:sequence>
        <xs:element ref="foc:type-expr"/>
        <xs:element ref="foc:let-body"/>
      </xs:sequence>
      <xs:attribute name="recursive" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>

  <!-- Signature of a method. -->
  <xs:element name="meth-signature">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:history"/>
        <xs:element ref="foc:informations"/>
        <xs:element ref="foc:type-expr"/>
      </xs:sequence>
    </xs:complexType>


  <!-- Representation of a species. -->
  <xs:element name="meth-repr">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:history"/>
        <xs:element ref="foc:informations"/>
        <xs:element ref="foc:type-expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <!-- Description of a species. -->
  <xs:element name="species">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:informations"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="foc:spe-param"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="foc:inherits"/>
        <xs:element ref="foc:method"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Various cases of methods. -->
  <xs:element name="method">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="foc:meth-repr"/>
        <xs:element ref="foc:meth-let"/>
        <xs:element ref="foc:meth-letprop"/>
        <xs:element ref="foc:meth-theorem"/>
        <xs:element ref="foc:meth-property"/>
        <xs:element ref="foc:meth-signature"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>



  <!-- *********** METHOD HISTORY. ************ -->
  <xs:element name="history">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:initial-apparition"/>
        <xs:element ref="foc:comes-from"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="initial-apparition">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:NCName">
          <xs:attribute name="infile" type="xs:NCName"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="comes-from">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:NCName">
          <xs:attribute name="infile" type="xs:NCName"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>



  <!-- *********** SPECIES PARAMETERS IN SPECIES DESCRIPTION ************ -->

  <!-- Collection species parameter. -->
  <xs:element name="spe-param-kind-collection">
    <xs:complexType>
      <xs:element ref="foc:spe-expr"/>
    </xs:complexType>
  </xs:element>

  <!-- Entity species parameter. -->
  <xs:element name="spe-param-kind-entity">
    <xs:complexType>
      <xs:element ref="foc:fcl-name"/>
      <xs:attribute name="infile" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>

  <!-- Species parameter kind (collection of entity). -->
  <xs:element name="spe-param-kind">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="foc:spe-param-kind-collection"/>
        <xs:element ref="foc:spe-param-kind-entity"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!-- Species parameter. -->
  <xs:element name="spe-param">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element ref="foc:informations"/>
        <xs:element ref="foc:spe-param-kind"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>



  <!-- **************** SPECIES EXPRESSIONS **************** -->

  <!-- Atomic species expression. -->
  <xs:element name="spe-expr-atom">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="foc:self"/>
        <xs:element ref="foc:fcl-name"/>
      </xs:choice>
      <xs:attribute name="infile" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>

  <!-- Parametrized species expression. -->
  <xs:element name="spe-expr-paramd">
    <xs:complexType>
      <xs:element ref="foc:fcl-name"/>
      <xs:sequence>
        <xs:element ref="foc:spe-expr-atom"/>
      </xs:sequence>
      <xs:attribute name="infile" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>

  <!-- Species expression. -->
  <xs:element name="spe-expr">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="foc:spe-expr-paramd"/>
        <xs:element ref="foc:spe-expr-atom"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!-- Inheritance species expression. -->
  <xs:element name="spe-inherits">
    <xs:complexType>
      <xs:element ref="foc:spe-expr"/>
    </xs:complexType>
  </xs:element>



  <!-- **************** MISC & BASICS **************** -->

  <!-- A local variable. -->
    <xs:element name="var">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- A name in any context (file, species, module, whatever). -->
  <xs:element name="fcl-name" type="xs:NCName"/>

  <!-- Under foc:math any well-formed tree may appear. -->
  <xs:group name="anyElement">
    <xs:sequence>
      <xs:any processContents="skip"/>
    </xs:sequence>
  </xs:group>

  <!-- Math annotation to render a symbol. -->
  <xs:element name="math">
    <xs:complexType mixed="true">
      <xs:group minOccurs="0" ref="foc:anyElement"/>
      <xs:attribute name="xmlns" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>

  <!-- To qualify an identifier coming from another species. -->
    <xs:element name="of-species">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Identifier in any context. May have an OpenMath representation. -->
  <xs:element name="identifier">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="foc:math"/>
        <xs:element minOccurs="0" ref="foc:of-species"/>
      </xs:sequence>
      <xs:attribute name="infile" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>

  <!-- Self in any context. -->
  <xs:element name="self"/>



  <!-- **************** TYPE EXPRESSIONS **************** -->

  <!-- Type variable -->
  <xs:element name="ty-var" type="xs:NCName"/>

  <!-- Type function -->
  <xs:element name="ty-fun">
    <xs:complexType>
      <xs:element ref="foc:type-expr"/>
      <xs:element ref="foc:type-expr"/>
    </xs:complexType>
  </xs:element>

  <!-- Type sum constructor's arguments. -->
  <xs:element name="ty-sum-args">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:type-expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Type tuple. -->
  <xs:element name="ty-prod">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="foc:type-expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Type constructor. -->
  <xs:element name="ty-cstr">
    <xs:complexType>
      <xs:element ref="foc:identifier"/>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="foc:type-expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Type species representation. -->
  <xs:element name="ty-species-rep">
    <xs:complexType>
      <xs:element ref="foc:identifier"/>
    </xs:complexType>
  </xs:element>

  <!-- Type expression. -->
    <xs:element name="type-expr">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="foc:ty-var"/>
        <xs:element ref="foc:ty-fun"/>
        <xs:element ref="foc:ty-sum-args"/>
        <xs:element ref="foc:ty-prod"/>
        <xs:element ref="foc:ty-cstr"/>
        <xs:element ref="foc:self"/>
        <xs:element ref="foc:ty-species-rep"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>



  <!-- **************** CONSTANTS **************** -->

  <!-- Integer constant. -->
  <xs:element name="cst-int">
    <xs:complexType>
      <xs:attribute name="val" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Float constant. -->
  <xs:element name="cst-float">
    <xs:complexType>
      <xs:attribute name="val" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Boolean constant -->
  <xs:element name="cst-bool">
    <xs:complexType>
      <xs:attribute name="val" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- String constant. -->
  <xs:element name="cst-string">
    <xs:complexType>
      <xs:attribute name="val" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Character constant. -->
  <xs:element name="cst-char">
    <xs:complexType>
      <xs:attribute name="val" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Constants. -->
  <xs:element name="cst">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="foc:cst-int"/>
        <xs:element ref="foc:cst-float"/>
        <xs:element ref="foc:cst-bool"/>
        <xs:element ref="foc:cst-string"/>
        <xs:element ref="foc:cst-char"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>



  <!-- **************** EXPRESSIONS **************** -->

  <!-- Expression "Self". -->
  <xs:element name="expr-self">
    <xs:complexType>
      <xs:element ref="foc:self"/>
    </xs:complexType>
  </xs:element>

  <!-- Expression constant. -->
  <xs:element name="expr-cst">
    <xs:complexType>
      <xs:element ref="foc:cst"/>
    </xs:complexType>
  </xs:element>

  <!-- Expression function. -->
  <xs:element name="expr-fun">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="foc:fcl-name"/>
      </xs:sequence>
      <xs:element ref="foc:expr"/>
    </xs:complexType>
  </xs:element>

  <!-- Expression variable/identifier -->
  <xs:element name="expr-var">
    <xs:complexType>
      <xs:element ref="foc:identifier"/>
    </xs:complexType>
  </xs:element>

  <!-- Expression application. -->
  <xs:element name="expr-app">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="2" maxOccurs="unbounded" ref="foc:expr"/>
      </xs:sequence>
      <xs:element ref="foc:expr"/>
    </xs:complexType>
  </xs:element>

  <!-- Expression sum type value constructor. -->
  <xs:element name="expr-constructor">
    <xs:complexType>
      <xs:element ref="foc:identifier"/>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="foc:expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Expression it-then-else. -->
  <xs:element name="expr-if">
    <xs:complexType>
      <xs:element ref="foc:expr"/>
      <xs:element ref="foc:expr"/>
      <xs:element ref="foc:expr"/>
    </xs:complexType>
  </xs:element>

  <!-- Expression record. -->
  <xs:element name="expr-record">
    <xs:complexType>
      <xs:sequence>
      <xs:element ref="foc:identifier"/>
      <xs:element ref="foc:type-expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Expression record access. -->
  <xs:element name="expr-record-access">
    <xs:complexType>
      <xs:element ref="foc:expr"/>
      <xs:element ref="foc:identifier"/>
    </xs:complexType>
  </xs:element>

  <!-- Expression tuple. -->
  <xs:element name="expr-tuple">
    <xs:complexType>
      <xs:sequence>
      <xs:element ref="foc:expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Expression between parens. -->
  <xs:element name="expr-paren">
    <xs:complexType>
      <xs:element ref="foc:expr"/>
    </xs:complexType>
  </xs:element>

  <!-- Expression let (rec) in. -->
  <xs:element name="expr-let-in">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:fcl-name"/>
        <xs:sequence>
          <xs:element ref="foc:binding-param"/>
        </xs:sequence>
        <xs:element ref="foc:type-expr"/>
        <xs:element ref="foc:let-body"/>
      </xs:sequence>
      <xs:element ref="foc:expr"/>           <!-- "in" expression -->
      <xs:attribute name="recursive" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>

  <!-- Expression of external code -->
  <xs:element name="expr-external"/>   <!-- TODO -->

  <!-- Expression sequence. -->
  <xs:element name="expr-sequence">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:expr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Expression match with -->
  <xs:element name="expr-match"/>   <!-- TODO -->

  <!-- Expressions. -->
  <xs:element name="expr">
    <xs:complexType>
      <xs:choice minOccurs="1" maxOccurs="unbounded">
        <xs:element ref="foc:expr-self"/>
        <xs:element ref="foc:expr-cst"/>
        <xs:element ref="foc:expr-fun"/>
        <xs:element ref="foc:expr-var"/>
        <xs:element ref="foc:expr-app"/>
        <xs:element ref="foc:expr-constructor"/>
        <xs:element ref="foc:expr-match"/>
        <xs:element ref="foc:expr-if"/>
        <xs:element ref="foc:expr-let-in"/>
        <xs:element ref="foc:expr-record"/>
        <xs:element ref="foc:expr-record-access"/>
        <xs:element ref="foc:expr-tuple"/>
        <xs:element ref="foc:expr-external"/>
        <xs:element ref="foc:expr-sequence"/>
        <xs:element ref="foc:expr-paren"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>



  <!-- **************** LOGICAL EXPRESSIONS **************** -->

  <!-- Logical expression "forall". -->
  <xs:element name="logexpr-all">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:var"/>
        <xs:element ref="foc:type"/>
      </xs:sequence>
      <xs:element ref="foc:logexp"/>
    </xs:complexType>
  </xs:element>

  <!-- Logical expression "exists". -->
  <xs:element name="logexpr-ex">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="foc:var"/>
        <xs:element ref="foc:type"/>
      </xs:sequence>
      <xs:element ref="foc:logexp"/>
    </xs:complexType>
  </xs:element>

  <!-- Logical expression "=>". -->
  <xs:element name="logexpr-implies">
    <xs:complexType>
      <xs:element ref="foc:logexp"/>
      <xs:element ref="foc:logexp"/>
    </xs:complexType>
  </xs:element>

  <!-- Logical expression "\/". -->
  <xs:element name="logexpr-or">
    <xs:complexType>
      <xs:element ref="foc:logexp"/>
      <xs:element ref="foc:logexp"/>
    </xs:complexType>
  </xs:element>

  <!-- Logical expression "/\". -->
  <xs:element name="logexpr-and">
    <xs:complexType>
      <xs:element ref="foc:logexp"/>
      <xs:element ref="foc:logexp"/>
    </xs:complexType>
  </xs:element>

  <!-- Logical expression "<=>". -->
  <xs:element name="logexpr-equiv">
    <xs:complexType>
      <xs:element ref="foc:logexp"/>
      <xs:element ref="foc:logexp"/>
    </xs:complexType>
  </xs:element>

  <!-- Logical expression "(...)". -->
  <xs:element name="logexpr-paren">
    <xs:complexType>
      <xs:element ref="foc:logexp"/>
    </xs:complexType>
  </xs:element>

  <!-- Logical expression "(...)". -->
  <xs:element name="logexpr-expr">
    <xs:complexType>
      <xs:element ref="foc:logexp"/>
    </xs:complexType>
  </xs:element>

  <!-- Logical expressions. -->
  <xs:element name="logexpr">
    <xs:complexType>
      <xs:choice minOccurs="1" maxOccurs="unbounded">
        <xs:element ref="foc:logexpr-all"/>
        <xs:element ref="foc:logexpr-ex"/>
        <xs:element ref="foc:logexpr-implies"/>
        <xs:element ref="foc:logexpr-or"/>
        <xs:element ref="foc:logexpr-and"/>
        <xs:element ref="foc:logexpr-equiv"/>
        <xs:element ref="foc:logexpr-not"/>
        <xs:element ref="foc:logexpr-expr"/>
        <xs:element ref="foc:logexpr-paren"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
