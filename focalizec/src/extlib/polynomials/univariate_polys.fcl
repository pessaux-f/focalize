(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6   -  INRIA Rocquencourt          *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: univariate_polys.fcl,v 1.4 2011-06-14 13:12:32 rr Exp $ *)

open "basics";;
open "rings_fields";;
open "integers";;
open "polys_abstract";;
open "distributed_polys";;

(* Abstract univariate polynomials over a commutative ring *)
species Formal_univariate_polynomials_commutative_ring
      (R is Commutative_ring,
       N is Natural_number_system) =

  inherit Formal_polynomials_commutative_ring (R, N);

(*   (\** a derivation rule *\) *)
(*   let differentiate : self -> self = *)
(*     let pred (n) = nat!predecessor (n) in *)
(*     let lc (p) = self!leading_coefficient (p) in *)
(*     let reductum (p) = self!reductum (p) in *)
(*     let monomial (coeff, deg) = self!monomial (coeff, deg) in *)
(*     let degree (p) = self!degree (p) in *)
(*     let plus (x, y) = self!plus (x, y) in *)
(*     let mult (x, y) = self!module_mult (x, y) in *)
(*     let coeff_of_deg = *)
(*        let foo = unitary_additive_monoid_as_nat_semi_module (nat, r) in *)
(*        fun d -> foo!of_nat (d) *)
(*     in *)
(*     let rec aux (res, p) = *)
(*         let deg = degree (p) in *)
(*           if nat!is_min (deg) then *)
(*             res *)
(*           else *)
(*             aux ( *)
(*                     plus ( mult ((coeff_of_deg (deg)), (monomial (lc (p), pred (deg)))), *)
(*                                   res), *)
(*               reductum (p)) *)
(*     in *)
(*       aux (self!zero); *)

end
;;

(* Type pdiv_result ('a) = { *)
(*  quotient : 'a ; *)
(*  remainder : 'a *)
(* } ;; *)

(* let pdiv_quotient(res) = res.quotient;; *)
(* let pdiv_remainder(res) = res.remainder;; *)


-- open "iterators";;
(** Univariate abstract polynomials over an integral domain *)
species Formal_univariate_polynomials_integral_domain
  (R is Integral_domain, N is Natural_number_system) =
  inherit Formal_polynomials_integral_domain(R, N),
          Formal_univariate_polynomials_commutative_ring(R, N);
(*   (\** pseudo division of two polynomials*\) *)
(*   signature pseudo_divide: Self -> Self -> pdiv_result(Self); *)

(*   (\*[rr]:   try to lift next 3 to dichotomy *\) *)
(*   local let pow (c, n) = *)
(*     let dicho = monoid_as_power (nat, r) in *)
(*     dicho!expt (c, n); *)

(*   local theorem pow_0: all c : r, *)
(*     r!equal (r!one, !pow (c, nat!zero)) *)
(*     proof = assumed; *)

(*   local theorem pow_ind: all c : r, all n : nat, *)
(*     r!equal (!pow (c, nat!successor (n)), r!mult (c, !pow (c, n))) *)
(*     proof = assumed; *)

  (* [rr] this has nothing to do here! *)
  let rec r_pow(x, n) =
     if N!is_zero(n)
     then R!one
     else R!mult(x, !r_pow(x, N!predecessor(n)));

  (** polynomial pseudo remainder *)
  signature pseudo_remainder: Self -> Self -> Self;

  (** polynomial pseudo quotient *)
  signature pseudo_quotient: Self -> Self -> Self;

  (**
    pseudo division is only defined for non null divisor
    and we have
     lc(Q)^ (|P|-|Q|+1) P = pquo(P, Q) Q + prem(P, Q)
   *)
  property pseudo_divide_relation: all p q : Self,
    !is_zero (q)
      \/
    !equal (!plus (!mult (!pseudo_quotient (p, q), q),
		   !pseudo_remainder (p, q)),
           !module_mult (!r_pow (!leading_coefficient (q),
				 N!successor (N!minus (!degree (p),
						       !degree (q)))),
			 p));

  property pseudo_remainder_has_lower_degree: all p q r : Self,
    ~(!is_zero (q)) ->
      (*[rr] sort of let *)
      !equal(r,  !pseudo_remainder (p, q)) ->
	~(!is_zero (r)) -> N!lt (!degree (r), !degree (q))
    ;

end
;;


(* (\**  *)
(*    Karatsuba multiplication for univariate sparse polynomials. Needs check ! *)
(*         This is currently not used ([rr]) *)
(* *\) *)
(* species algebre_indexee_karatsuba *)
(*     (r is commutative_ring, *)
(*      int_coll is small_naturals,i : int_coll) *)
(*   inherits formal_univariate_polynomials_com_ring(r,int_coll), *)
(*            distributed_polynomials_com_ring(r,int_coll) = *)

(*   let karatsuba_terme  = i; (\* nb de terme a partir duquel on utilise  *)
(*                               Karatsuba *\)  *)

(*   (\* l'algo de Karatsuba :                             *\) *)
(*   (\* p = p1 +  X^m.p2 et q = q1 +  X^m.q2              *\) *)
(*   (\* ou m=n/2+1 et n est le degre max de p et q        *\) *)
(*   (\* p.q = a1 + X^m.[(a3-a2-a1) + X^m.a2]              *\) *)
(*   (\* ou a1 = p1.q1, a2 = p2.q2, a3 = (p1.q2 + p2.q1)   *\) *)

(*   (\* mult p par q avec l'algo de Karatsuba        *\) *)
(*   let mult_karatsuba = *)

(*      (\* coupe le polymome en p en deux : p1 et p2 tels que p = p1 + X^d.p2*\)  *)
(*      (\* np1 : nbre de monome de p1; dp1 : degre de p1                     *\) *)
(*      let coupe (p : self, d) =  *)
(*        let ilt = int_coll!lt in *)
(*        let iminus  = int_coll!minus in *)
(*        let rec coupe (p1 : self, p2 : self) = *)
(*          match p1 with *)
(*            |#Nil -> #crp(#Nil, #rev(p2)) *)
(*            |#Cons(hp1, tp1) -> *)
(*               let dp1 = #scnd(hp1) in *)
(*               if ilt(dp1, d)  *)
(*               then #crp(p1, #rev(p2)) *)
(*               else let hp2 = #crp(#first(hp1), iminus(dp1, d)) in *)
(*                    coupe(tp1, #Cons(hp2, p2)) *)
(*          end *)
(*        in coupe (p, #Nil)   *)
(*      in *)

(*      let isup  = int_coll!sup in *)
(*      let iplus = int_coll!plus in *)
(*      let iun  = int_coll!one in *)

(*      (\* [rr]: ca a l' air bien foireux, il faudrait revoir *\) *)
(*      let rec kara(p : self, q : self) : self =  *)
(*       (\* match p with *)
(*        |#Nil -> #Nil *)
(*        |#Cons(hp, tp) ->  *)
(*          if !is_zero(tp) *)
(*          then  *)
(*            !fmecg(#Nil, #first(hp), #scnd(hp), q)   *)
(*           else  *)
(*             match q with  *)
(*             |#Nil -> #Nil *)
(*             |#Cons(hq, tq) ->  *)
(*                if !is_zero(tq) *)
(*                then  *)
(*                  !fmecg(#Nil, #first(hq), #scnd(hq), p)   *)
(*                else *\)                  *)
(*                  let n = isup(!degree(p), !degree(q)) *)
(*                  in *)
(*                  let m = iplus(int_coll!div2(n), iun) in *)
(*                  if int_coll!lt(m, !karatsuba_terme) *)
(*                  (\*if  *)
(*                  #or_b(#int_lt(int_coll!to_int(!degree(p)),!karatsuba_terme), *)
(*                          #int_lt(int_coll!to_int(!degree(q)),!karatsuba_terme)) *)
(*                     *\) *)
(*                    (\*#and_b(#int_lt(#length(p),!karatsuba_terme), *)
(*                          #int_lt(#length(q),!karatsuba_terme))*\) *)

(*                  then !mult_naive(p, q)  *)
(*                  else  *)
(*                    let cp  = coupe(p, m) in *)
(*                    let cq  = coupe(q, m) in *)
(*                    let p1  = #first(cp) in  *)
(*                    let p2  = #scnd(cp) in  *)
(*                    let q1  = #first(cq) in  *)
(*                    let q2  = #scnd(cq) in  *)
(*                    let a1 = kara(p1, q1) in *)
(*                    let a2 = kara(p2, q2) in *)
(*                    let a3 = kara(!plus(p1, p2), !plus(q1, q2)) in *)
(*                        !fmecg(a1, r!one, m, *)
(*                              !fmecg(!minus(!minus(a3, a2), a1), r!one, m, a2) *)
(*                              )    *)
(*       (\*     end *)
(*        end*\)  *)
(*      in fun p -> fun q -> kara(p, q); *)

(*   let mult (p, q) =  *)
(*      if #and_b(int_coll!lt(!degree(p),!karatsuba_terme), *)
(*                int_coll!lt(!degree(q),!karatsuba_terme)) *)
(*      then  !mult_naive (p, q) *)
(*      else !mult_karatsuba (p, q);            *)
(* end *)

(* (\** usable naturals *\) *)
(* (\* collection int_coll implements small_naturals_int = *\) *)
(* (\* end *\) *)

(*[rr] This does not go to Coq because small_integers are undafe *)
open "small_integers" ;;

(** Univariate sparse polynomials for integral domains *)
species Algebre_univariee (R is Integral_domain) =
  inherit Formal_univariate_polynomials_integral_domain(R, Foc_small_naturals),
          Distributed_polynomials_integral_domain(R, Foc_small_naturals);

  let pseudo_quotient(_p, _q) =
    focalize_error("Algebre_univariee: pseudo_quotient: not implemented");

  (*[rr]: this is a high level definition! Move to abstract? *)
  let pseudo_remainder =
    let ( <_i )(n, m) = Foc_small_naturals!lt(n, m) in
    let ( -_i )(n, m) = Foc_small_naturals!minus(n, m) in
    let r_opp(c) = R!opposite(c) in
    (*[rr]: division of p by cqX^dq + rq *)
    let rec my_prem(p, cq, dq, rq) =
      let dp = degree(p) in
      if (is_zero(p) || (dp <_i dq)) then p
      else
        let delta = dp -_i dq in
(*         let cp = leading_coefficient(p) in *)
        let one_step = fmecg(module_mult(cq, reductum(p)),
			     r_opp(leading_coefficient(p)),
			     delta,
			     rq) in
            (*[rr]: usually this is 0 *)
        let dd = Foc_small_naturals!predecessor(dp -_i degree(one_step)) in
        (*[rr]: try to keep result small during computations *)
        let res = my_prem(one_step, cq, dq, rq)
        in
        (*[rr]: rearrange for pseudo division relation *)
        module_mult(r_pow(cq, dd), res)
    in function p -> function q -> my_prem(p,
					   leading_coefficient(q),
					   degree(q),
					   reductum(q)
					  );

  proof of pseudo_remainder_has_lower_degree = assumed;
  proof of pseudo_divide_relation = assumed;


(*   local let r_expt = *)
(*      let dicho = monoid_as_power(int_coll, r) in *)
(*      fun x -> fun n -> dicho!expt(x,n); *)
(*   (\** Polynomial pseudo division *\) *)
(*   let pseudo_divide (p, q) =  *)
(*      (\*                                            *\) *)
(*      (\* patched 2002-06-29 [rr] : incorrect result *\) *)
(*      (\* original caml version used ints            *\) *)
(*      (\*                                            *\) *)
(*      let degree(p) = self!degree(p) in *)
(*      let lc(p) = self!leading_coefficient(p) in *)
(*      let reductum(p) = self!reductum(p) in *)
(*      let smmult(x,y) = self!module_mult(x,y) in *)
(*      let rmult (x,y) = r!mult(x,y) in *)
(*      let rexpt (x,y) = !r_expt(x,y) in *)
(*      let opp(x) = r!opposite(x) in *)
(*      let int_minus(x,y) =  *)
(*        if int_coll!lt(x,y) *)
(*        then #foc_error("pseudo_divide: bad degreee") *)
(*        else int_coll!minus(x,y) in *)
(*      let int_max(x,y) = int_coll!sup(x,y) in *)
(*      let int_lt(x,y) = int_coll!lt(x,y) in *)
(*      (\*let int_eq(x,y) = int_coll!equal(x,y) in*\) *)
(*      let int_plus(x,y) = int_coll!plus(x,y) in *)
(*      let int_un = int_coll!one in *)
(*      let rec p_div(p,q,cq,dq) =  *)
(*        (\*                     *\) *)
(*        (\* original wrong code *\) *)
(*        (\*                     *\) *)
(*        (\* *)
(*        let delta = int_minus(degree(p),dq) in *)
(*        let cp = lc(p) in *)
(*        if #or_b(int_lt(delta,int_zero), is_zero(cp)) then  *)
(*               (\*                     *\) *)
(*               (\* Argh !!! Impossible *\) *)
(*               (\*                     *\) *)
(*            #cr_pr (#Nil,p) *)
(*        else *)
(*          if int_eq(delta,int_zero) *)
(*          then  *)
(*           #cr_pr(#Cons(#crp(cp,int_zero),#Nil),  *)
(*                                                  splus(smmult(cq,reductum(p)),(smmult(opp(cp),q)))) *)
(*          else *)
(*        *\) *)
(*        let cp = lc(p) in *)
(*        let dp = degree(p) in *)
(*        if #or_b(self!is_zero(p), int_lt(dp,dq)) *)
(*        then *)
(*          #cr_pr (#Nil,p) *)
(*        else *)
(*          let delta = int_minus(dp,dq) in *)
(*          (\*                     *\) *)
(*          (\* is always >= 0      *\) *)
(*          (\*                     *\) *)
(*            let pp = self!fmecg(smmult(cq,reductum(p)),opp(cp),delta,q) in *)
(*            let res = p_div(pp, q , cq, dq) in *)
(*            let a = #pdiv_quo(res) in  *)
(*                  let b = #pdiv_res(res) in *)
(*            let ccq =  *)
(*                    rexpt(cq,int_minus(degree(p),  *)
(*                    int_max(int_plus(degree(pp),int_un),dq)))  *)
(*            in *)
(*              #cr_pr (#Cons(#crp(rmult(ccq,rmult( *)
(*                                                   rexpt(cq,int_minus(int_max(int_plus(degree(pp), *)
(*           int_un),dq), *)
(*          dq)),cp)), *)
(*            delta), smmult(ccq,a)), *)
(*           smmult(ccq,b)) *)
(*      in *)
(*        match q with *)
(*          | #Nil -> #foc_error(" q must be nonzero") *)
(*          | #Cons(m,q) -> *)
(*              let cq = #first(m) in let dq = #scnd(m) in p_div(p,q,cq,dq)  *)
(*        end; *)
(*   proof of pseudo_divide_relation = assumed; *)
(*   proof of pseudo_remainder_has_lower_degree = assumed; *)
end
;;

open "big_integers";;
collection Foc_Univ_Polys_Integers =
  implement Algebre_univariee(Foc_big_integers);
end;;

(** Univariate abstract polynomials over a gcd_domain *)
species Formal_univariate_polynomials_gcd_domain
         (R is Gcd_domain,
          N is Natural_number_system) =

  inherit Formal_polynomials_gcd_domain(R, N),
          Formal_univariate_polynomials_integral_domain(R, N);

end
;;


(** Univariate abstract polynomials over a field *)
species Formal_univariate_polynomials_field
     (K is Field,
      N is Natural_number_system) =
  inherit Euclidean_domain,
          (* [rr]: Here we don't want such things as pseudo division *)
          Formal_univariate_polynomials_commutative_ring (K, N);

  (* assumes q is not null *)

(*   local let rec inner_quo_rem (p, lcq, dq, q, res) = *)
(*     let dp = !degree (p) in *)
(*     let cp = !leading_coefficient (p) in *)
(*     if nat!lt (dq,dp) *)
(*     then #cr_qrr (res,p) *)
(*     else *)
(*       let diff = nat!minus (dp,dq) in *)
(*       !inner_quo_rem (!fmecg (!reductum (p),cp,diff,q), *)
(*                      lcq, *)
(*              dq, *)
(*              q, *)
(*              !plus (!monomial (lcq, diff), res)); *)


(*   let quo_rem (p,q) = *)
(*     if !is_zero (q) *)
(*     then #foc_error ("UPF: division by zero") *)
(*     else *)
(*      !inner_quo_rem (p, *)
(*                     !leading_coefficient (q), *)
(*                     !degree (q), *)
(*                     !opposite (!reductum (q)), *)
(*                     !zero); *)

(*   proof of remainder_is_smaller = assumed; *)

(*   letprop euclidean_ordering (p,q) = *)
(*     nat!lt (!degree (p),!degree (q)); *)

(*   proof of euclidean_ordering_is_transitive = *)
(*     by nat!lt_is_irreflexive def !euclidean_ordering ; *)
(*   proof of euclidean_order_is_antisymmetric = assumed; *)
(*   proof of euclidean_ordering_is_irreflexive = assumed; *)

(*   let monic_gcd (p,q) = *)
(*     let g = !gcd (p,q) in *)
(*     !plus (!monomial (r!one,!degree (g)), *)
(*           !module_mult (r!inv (!leading_coefficient (g)), *)
(*                        !reductum (g))); *)

end
;;



(* (\** random polynomials *\) *)
(* (\* [rr]: design a better model ? *\) *)
(* species random_poly ( r is commutative_ring,  *)
(*                       int_coll is small_naturals, *)
(*                       afi is formal_polynomials_commutative_ring(r, int_coll)) *)
(*  inherits basic_object =  *)
(*    rep = unit; *)
(*    let spare(deg) =  *)
(*    (\* genere un polymome dense p de degre deg *\) *)
(*      let _s = int_coll!seed(int_coll!zero) in *)
(*      let rand_int = *)
(*         let dicho = unitary_additive_monoid_as_nat_semi_module(int_coll, r) in *)
(*         fun k -> dicho!of_nat(int_coll!random(k)) in *)
(*      let randpos(k) = r!plus(rand_int(k), r!one) in *)
(*          (\* genere un nbre compris entre 1 et k inclus *\) *)
(*      let rec boucle (n, p) =  *)
(*        if #int_eq(n, 0)  *)
(*        then p  *)
(*        else (\* let mono = afi!monomial(randpos(30000),  *)
(*                                   int_coll!of_int(n)) in *\) *)
(*             let mono = afi!monomial(randpos(int_coll!of_int(30000)), *)
(*             int_coll!of_int(n)) in *)
(*             let p = afi!plus(p, mono) in *)
(*             boucle (#int_minus(n, 1), p) *)
(*        in *)
(*      afi!plus(boucle (deg, afi!zero), *)
(*               afi!monomial( randpos(int_coll!of_int(30000)), int_coll!zero) *)
(*              ); *)

(*    let unspare(deg) =  *)
(*    (\* genere un polymome creux p de degre deg (contient ~n/10 terme)*\) *)
(*      let _s = int_coll!seed(int_coll!zero) in *)
(*      let rand_int = *)
(*         let dicho = unitary_additive_monoid_as_nat_semi_module(int_coll, r) in *)
(*         fun k -> dicho!of_nat(int_coll!random(k)) in *)
(*      let randpos(k) = r!plus(rand_int(k), r!one) in *)
(*      let rec boucle (n, i, p) =  *)
(*         if #int_lt (i, n)  *)
(*         then if #int_gt(#random_int(100), 10)  *)
(*              then boucle (n, #int_plus(i, 1), p)          *)
(*              else  (\* let mono = afi!monomial(randpos(30000),  *)
(*                                   int_coll!of_int(n)) in *\) *)
(*             let mono = afi!monomial(randpos(int_coll!of_int(30000)), *)
(*             int_coll!of_int(i)) in *)
(*                   let p = afi!plus(p, mono) in *)
(*                   boucle (n, #int_plus(i, 1), p) *)
(*         else p in *)
(*      afi!plus(boucle (deg, 0, afi!zero), *)
(*               afi!monomial( randpos(int_coll!of_int(30000)), *)
(*             int_coll!of_int(deg)) *)
(*              ); *)

(* end *)

(** Resultant of univariate polynomials *)
(* species resultant(r is integral_domain) *)
species Resultant(R is Integral_domain,
          Pol is Algebre_univariee(R)) =
  inherit Basic_object; 
  representation = unit ;

    (** (alpha^delta def0) / psi^(delta-1), this is called Lazard Formula*)
  let next_non_defective =
     let int_minus(x, y) =
        if Foc_small_naturals!lt(x, y) then focalize_error("next_non_def")
        else Foc_small_naturals!minus(x, y) in
     let pred(x) = int_minus(x, Foc_small_naturals!one) in
     let int_zero = Foc_small_naturals!zero in
     let int_eq(x, y) = Foc_small_naturals!equal(x, y) in
     let smmult(x, y) = Pol!module_mult(x, y) in
     let smdiv (p, a) =
        let res = Pol!module_exquo(p, a) in
        if is_failed(res)
	then focalize_error("next_non_def")
	else non_failed(res) in
     let rec next_non_def(alpha, psi, def_0, delta) =
        if int_eq(delta, int_zero)
        then def_0
        else next_non_def(alpha,
			  psi,
			  smdiv(smmult(alpha, def_0), psi),
			  pred(delta))
     in function alpha -> function psi -> function def_0 -> function delta ->
       next_non_def(alpha, psi, def_0, delta) ;

     (** Again iterative definition for (alpha^delta psi0) psi^(delta-1) *)
  let next_psi =
    let int_minus(x, y) = Foc_small_naturals!minus(x, y) in
    let pred(x) = int_minus(x, Foc_small_naturals!one) in
    let int_zero = Foc_small_naturals!zero in
    let int_eq(x, y) = Foc_small_naturals!equal(x, y) in
    let rmult (x, y) = R!mult(x, y) in
    let rdiv (a, b) =
      let res = R!exquo(a, b) in
       if is_failed(res)
       then focalize_error("rdiv")
       else non_failed(res) in
    let rec next_psi(alpha, psi, psi0, delta) =
      if int_eq(delta, int_zero)
      then psi0
      else next_psi(alpha, psi, (rdiv(rmult(alpha, psi0), psi)), pred(delta))
    in function alpha -> function psi -> function psi0 -> function delta ->
      next_psi(alpha, psi, psi0, delta) ;



(* (\* *)
(*   let next_def(p : pol,q : pol,alpha,psi,delta) : pol= *)
(*      let smdiv (p,a) = let res = pol!module_exquo(p,a) in *)
(*        if #is_failed(res) then #foc_error("smdiv") else #non_failed(res) in *)
(*      let prem(p,q) = pol!pseudo_reste(p,q) in  *)
(*      smdiv(prem(p,q),r!mult(alpha,r!expt(psi,delta))) ; *)
(* *\) *)

  (** prem(p,q)/(alpha psi^delta) Loos method *)
  let next_defective =
     let rmult(x, y) = R!mult(x, y) in
     let rec rexpt(x, n) =
       if Foc_small_naturals!is_zero(n)
       then R!one
       else rmult(x, rexpt(x, Foc_small_naturals!predecessor(n)))
     in
     let prem(p, q) = Pol!pseudo_remainder(p, q) in
     let smdiv (p, a) =
        let res = Pol!module_exquo(p, a) in
        if is_failed(res)
        then
          focalize_error("smdiv")
        else non_failed(res) 
     in
     function p ->
       function q ->
	 function alpha ->
	   function psi ->
	     function delta ->
	       let r = prem(p, q) in
	       let _foo = print_string(Foc_small_naturals!print(Pol!degree(p))) in
	       let _foo= print_string(", ") in
	       let _foo = print_string(Foc_small_naturals!print(Pol!degree(q))) in
	       let _foo= print_string(", ") in
	       let _foo = print_string(Foc_small_naturals!print(Pol!degree(r))) in
               let _foo = print_string("\n") in
	       smdiv(r, rmult(alpha, rexpt(psi, delta))) ;

(*   let subres_pseudo_gcd(p,q) = *)
(*      let degree(p) = pol!degree(p) in *)
(*      let lc(p) = pol!leading_coefficient(p) in *)
(*      let int_zero = int_coll!zero in *)
(*      let int_un = int_coll!one in *)
(*      let int_eq(x,y) = int_coll!equal(x,y) in *)
(*      let int_lt(x,y) = int_coll!lt(x,y) in *)
(*      let int_minus(x,y) = int_coll!minus(x,y) in *)
(*      let pred(x) = int_minus(x,int_un) in *)
(*      let rec gcd(p,q,alpha,psi,delta) =  *)
(*        if int_eq(degree(q),int_zero) *)
(*        then  *)
(*               if pol!is_zero(q)  *)
(*         then p *)
(*         else pol!one *)
(*        else *)
(*         let r = self!next_defective(p,q,alpha,psi,delta) in *)
(*         let alpha = lc(q) in *)
(*         let psi =  *)
(*           if int_eq(delta,int_zero)  *)
(*           then psi *)
(*           else self!next_psi(alpha,psi,lc(q),pred(delta)) in *)
(*         gcd(q,r,alpha,psi,int_minus(degree(q),degree(r))) *)
(*      in *)
(*        if int_lt(degree(p),degree(q))  *)
(*        then gcd(q,p,r!one,r!one,int_minus(degree(q),degree(p))) *)
(*        else gcd(p,q,r!one,r!one,int_minus(degree(p),degree(q))); *)


(*    (\* the vector of all subresultants *\) *)
(*    let subres_vector(p,q) =  *)
(*      let degree(p) = pol!degree(p) in *)
(*      let lc(p) = pol!leading_coefficient(p) in *)
(*      (\*let rmult (x,y) = r!mult(x,y) in*\) *)
(*      (\*let smmult(x,y) = pol!module_mult(x,y) in*\) *)
(*      (\*let splus (x,y) = pol!plus(x,y) in*\) *)
(*      (\*let rexpt (x,y) = r!expt(x,int_coll!to_int(y)) in*\) *)
(*      let un = r!one in *)
(*      (\*let is_un(x) = r!is_one (x) in*\) *)
(*      (\*let rdiv (a,b) = #non_failed(r!exquo(a,b)) in*\) *)
(* (\* *)
(*      let smdiv (p,a) = let res = pol!module_exquo(p,a) in *)
(*        if #is_failed(res) then #foc_error("") else #non_failed(res) in *)
(* *\) *)
(*      let pred (x) = int_coll!minus(x,int_coll!one) in *)
(*      let succ(x) = int_coll!successor(x) in *)
(*      let int_eq(x,y) = int_coll!equal(x,y) in *)
(*      let zero = int_coll!zero in *)
(*      let int_minus(x,y) = int_coll!minus(x,y) in *)
(*      let rec gcd(p,q,alpha,psi,delta,v) =  *)
(*        let _foo = #array_set(v,int_coll!to_int(pred(degree(p))),q) in *)
(*        if int_eq(degree(q),zero) then *)
(*          let _foo =  *)
(*           #array_set(v,0,self!next_non_defective(lc(q),psi,q,pred(delta))) in v *)
(*        else *)
(*          let r = self!next_defective(p,q,alpha,psi,delta) in *)
(*          let alpha=lc(q) in *)
(*          let qq = self!next_non_defective(alpha,psi,q,pred(delta)) in *)
(*          gcd(q,r,alpha,lc(qq),int_minus(degree(p),degree(q)),  *)
(*               let _foo = #array_set(v,int_coll!to_int(degree(q)),qq) in v) *)
(*      in if int_coll!leq(degree(p),degree(q))  *)
(*                then #foc_error("")  *)
(*               else gcd(p,q,un,un,int_minus(degree(p),degree(q)), *)
(*                   let v = #array_create(int_coll!to_int(succ(degree(p))), *)
(*         pol!zero) in  *)
(*           let _foo = #array_set(v,int_coll!to_int(degree(p)),p) in v ); *)


  (** Loos 1982 algorithm *)
  let resultant =
(*      let degree(p) = pol!degree(p) in *)
(*      let lc(p) = pol!leading_coefficient(p) in *)
(*      let un = r!one in *)
(*      (\*let rexpt (x,y) = r!expt(x,int_coll!to_int(y)) in*\) *)
(*      (\*let rmult (x,y) = r!mult(x,y) in*\) *)
(*      (\*let int_max(x,y) = int_coll!sup(x,y) in*\) *)
(*      let int_lt(x,y) = int_coll!lt(x,y) in *)
(*      (\*let int_gt(x,y) = int_coll!gt(x,y) in*\) *)
(*      let int_eq(x,y) = int_coll!equal(x,y) in *)
(*      (\*let int_plus(x,y) = int_coll!plus(x,y) in*\) *)
(*      let int_minus(x,y) =  *)
(*        if int_coll!lt(x,y) then #foc_error("resultant") *)
(*        else int_coll!minus(x,y) in *)
(*      let pred(x) = int_minus(x,int_coll!one) in  *)
(*      let int_zero = int_coll!zero in *)
(*      (\*let int_un = int_coll!one in*\) *)
(*      (\*let succ(x) = int_coll!plus(x,int_coll!one) in*\) *)
     let ( =_n ) (x, y) = Foc_small_naturals!equal(x, y) in
     let ( -_n ) (x, y) = Foc_small_naturals!minus(x, y) in 
     let ( <_n ) (x, y) = Foc_small_naturals!lt(x, y) in
     let int_zero = Foc_small_naturals!zero in
     let pred(n) = Foc_small_naturals!predecessor(n) in
     let lc(p) = Pol!leading_coefficient(p) in
     let degree(p) = Pol!degree(p) in
     let un = R!one in
     let rec gcd (p, q, alpha, psi, delta) =
       if (degree(q) =_n int_zero)
       then
         next_psi(lc(q), psi, lc(q), pred(degree(p)))
       else
         let r = next_defective(p, q, alpha, psi, delta) in
         let alpha = lc(q) in
         let psi =
                 if (delta =_n int_zero)
		 then let _foo = focalize_error("0 delta") in psi
		 else next_psi(alpha, psi, lc(q), pred(delta)) in
         gcd(q, r, alpha, psi, (degree(q) -_n degree(r)))
     in function p -> function q ->
       if (degree(p) <_n degree(q))
       then gcd(q, p, un, un, (degree(q) -_n degree(p)))
       else
         if (degree(p) =_n int_zero)
         then focalize_error("resultant: constant polynomials")
	 else gcd(p, q, un, un, (degree(p) -_n degree(q)));

end;;

collection Resultant_integer_univ_polys =
  implement Resultant(Foc_big_integers, Foc_Univ_Polys_Integers);
end;;

(* (\** General form of Horner evaluation scheme uses two rings *\) *)
(* species Horner_eval *)
(*      (R is Commutative_ring, *)
(*       Pol is Formal_univariate_polynomials_com_ring(R), *)
(*       R1 is Commutative_ring, *)
(*       lift : R -> R1) = *)
(*   inherit Basic_object; *)
(*   representation = unit ; *)

(*   local let r1_expt = let pow = monoid_as_power(nat, r1) in *)
(*     fun x -> fun n -> pow!expt(x,n); *)

(*   local let rec my_horner(a_pol, a_val, a_deg, a_res) = *)
(*     if pol!is_zero(a_pol) *)
(*     then r1!mult(a_res, !r1_expt(a_val,a_deg)) *)
(*     else  *)
(*       let r_deg = nat!minus(a_deg, pol!degree(a_pol)) in *)
(*       self!my_horner(pol!reductum(a_pol), *)
(*                      a_val, *)
(*                      pol!degree(a_pol),  *)
(*                      r1!plus(r1!mult(a_res, *)
(*                                      !r1_expt(a_val, *)
(*                                               r_deg)), *)
(*                              lift(pol!leading_coefficient(a_pol)))); *)

(*   let horner(p,v) =  *)
(*     self!my_horner(pol!reductum(p), *)
(*                    v, *)
(*                    pol!degree(p), *)
(*                    lift(pol!leading_coefficient(p))) ; *)
(* end;; *)
