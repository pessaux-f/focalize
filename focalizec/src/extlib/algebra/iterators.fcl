(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6   -  INRIA Rocquencourt          *)
(*                                                                     *)
(*  Copyright 2007, 2008 LIP6 and INRIA                                *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: iterators.fcl,v 1.16 2009-06-27 01:29:03 weis Exp $ *)

(** Basic techniques to iterate a process including very simple numbers. *)

use "basics";;
use "sets";;
open "sets";;

open "basics";;
use "constants";;
open "constants";;

use "integers";;
open "integers";;

(** Abstraction of an binary function over a set (Setoid) *)
species Binop (S is Setoid) =

  inherit Basic_object;

  signature binop : S -> S -> S;

  property binop_substitution_rule: all x_1 x_2 y_1 y_2 : S,
    S!equal (x_1, x_2) -> S!equal (y_1, y_2) ->
      S!equal (!binop (x_1, y_1), !binop (x_2, y_2));

end
;;

(**
   Iteration of an arbitrary binary operation. This is not intended to be
   effectively used in the library but can be used to specify functions.
 *)

species Iteration (Nat is Ordered_Enumerated_system, S is Setoid,
                   F_binary is Binop (S), zero in S) =
  representation = unit;
  let rec iterate (x : S, n : Nat) : S =
    if Nat!equal (n, Nat!start) then zero
    else F_binary!binop (x, !iterate (x, Nat!predecessor (n)))
    termination proof = order Nat!lt on n
      assumed (* *);

  theorem iterate_spec_base: all x : S,
    S!equal (!iterate (x, Nat!start), zero)
    proof = by property S!equal_reflexive, Nat!equal_reflexive
               definition of iterate;

(*    theorem iterate_spec_ind: all x : S, all n : Nat, *)
(*      S!equal (!iterate (x, Nat!successor (n)), *)
(*              F_binary!binop (x, !iterate (x, n))) *)
(*      proof =  *)
(*        <1>1 assume x : S, assume n : Nat, *)
(*             prove S!equal (!iterate (x,  Nat!successor (n)), *)
(*           F_binary!binop (x, !iterate (x, n))) *)
(*             <2>1 prove Nat!equal (Nat!predecessor (Nat!successor (n)), n) *)
(*                  by property Nat!predecessor_reverses_successor,  *)
(*                              Nat!equal_reflexive,  *)
(*                              Nat!equal_symmetric,  *)
(*                              Nat!equal_transitive *)
(*             <2>2 prove ~ (Nat!equal (Nat!successor (n), Nat!start)) *)
(*                  by property Nat!successor_is_non_trivial *)
(*             <2>3 prove S!equal (F_binary!binop (x, !iterate (x, Nat!predecessor (Nat!successor (n)))), *)
(*                F_binary!binop (x, !iterate (x, n))) *)
(*                  assumed (* *) *)
(*             <2>4 prove S!equal (!iterate (x, Nat!successor (n)), *)
(*                F_binary!binop (x,  *)
(*                                               !iterate (x, Nat!predecessor (Nat!successor (n))))) *)
(*                  by step <2>2 property S!equal_reflexive definition of iterate *)
(*             <2>f qed by step <2>3, <2>4 *)
(*                         property S!equal_transitive *)
(*        <1>f conclude; *)

end
;;



(**
   By a dichotomic system we mean a structure that could be obtained with
   0, 1, multiplication by two and successor.
*)

species Dichotomic_system =

  inherit Setoid_with_zero, Enumeration_system, Setoid_with_one;

  (*[rr]: to be moved on integers *)
  let start = !zero;

  (** Tells that 1 is the successor of 0 *)
  property one_successes_zero: !equal (!successor (!zero), !one);

  (** multiplication by two *)
  signature mult2 : Self -> Self;
  (** compatibility with equality *)
  property mult2_substitution_rule: all n m : Self,
   !equal (n, m) -> !equal (!mult2 (n), !mult2 (m));

  property zero_fixes_mult2: !equal (!mult2 (!zero), !zero);
  property mult2_is_injective: all n m : Self,
   !equal (!mult2 (n), !mult2 (m)) -> !equal (n, m);

  (* we can check if an element is even *)
  signature is_even : Self -> bool;
  property is_even_substitution_rule: all n m : Self,
   !is_even (n) -> !equal (n, m) -> !is_even (m);
  (* [rr]: this may be a theorem *)
  property zero_is_even: !is_even (!zero);

  (* we can check if an element is odd *)
  signature is_odd : Self -> bool;
  property is_odd_substitution_rule: all n m : Self,
   !is_odd (n) -> !equal (n, m) -> !is_odd (m);
  (* [rr]: this may be a theorem *)
  property one_is_odd: !is_odd (!one);
  (* any number is odd or even *)
  property even_odd_complete: all n : Self, !is_odd (n) \/ !is_even (n);

  property mult2_produces_even: all n : Self, !is_even (!mult2 (n));
  (** division by two almost inverses multiplication by two *)
  signature div2 : Self -> Self;
  property div2_inverses_even: all n : Self,
   !is_even (n) -> !equal (!mult2 (!div2 (n)), n);
  property div2_inverses_odd: all n : Self,
   !is_odd (n) -> !equal (!successor (!mult2 (!div2 (n))), n);

  property successor_of_odd_is_even: all n : Self,
   !is_odd (n) -> !is_even (!successor (n));
  property successor_of_even_is_odd: all n : Self,
   !is_even (n) -> !is_odd (!successor (n));

  theorem zero_images_by_div2: all n : Self, !equal (!div2 (n), !zero) ->
   (!equal (n, !zero) \/ !equal (n, !one))
  proof = assumed (* Because todo *);

(*    (\** an induction principle for dichotomy *\)  *)
(*   theorem dichotomic_principle: all p : (Self -> Prop), *)
(*     p (!zero) -> *)
(*       (all n : Self, (p(n) -> (p (!mult2 (n)) /\ p (!successor (!mult2 (n)))))) -> *)
(*          (all n : Self, p (n)) *)
(*     proof = assumed (* Because todo *) *)
(*     ; *)

end
;;



(**
   A species to perform dichotomy.
   The result is the same than that of iteration only if operation f is
   associative
*)
species Dichotomy (Nat is Dichotomic_system,
                   S is Setoid,
                   Bins is Binop (S),
                   stop in S) =

  inherit Basic_object;

  representation = unit;

   (** f (x,f (...f (x,stop))) *)
  let rec dichot (x : S, n : Nat) : S =
     let n_2 = Nat!div2 (n) in
     if Nat!equal (n_2, Nat!zero)
     then
       if Nat!equal (n, Nat!zero)
       then stop
       else (* we know n is 1 *)
         Bins!binop (x, stop)
     else
       let e = !dichot (x, n_2) in
       if Nat!is_odd (n)
       then Bins!binop (x, Bins!binop (e, e))
       else (* we know it is even *)
         Bins!binop (e, e);

end
;;

