(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6   -  INRIA Rocquencourt          *)
(*                                                                     *)
(*  Copyright 2007, 2008 LIP6 and INRIA                                *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: big_integers.fcl,v 1.14 2009-06-27 01:29:03 weis Exp $ *)

use "basics";;

(** Ocamls bigint in FoCaLize. *)

type big_int =
  internal
  external
  | caml -> {* Big_int.big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

type foc_nat =
  internal
  external
  | caml -> {* Nat.nat *}
  | coq -> {* (* [Unsure] *) *}
;;

let zero_big_int =
  internal big_int
  external
  | caml -> {* Big_int.zero_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let unit_big_int =
  internal big_int
  external
  | caml -> {* Big_int.unit_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let minus_big_int =
  internal big_int -> big_int
  external
  | caml -> {* Big_int.minus_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let abs_big_int =
  internal big_int -> big_int
  external
  | caml -> {* Big_int.abs_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let add_big_int =
  internal big_int -> big_int -> big_int
  external
  | caml -> {* Big_int.add_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let succ_big_int =
  internal big_int -> big_int
  external
  | caml -> {* Big_int.succ_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let add_int_big_int =
  internal basics#int -> big_int -> big_int
  external
  | caml -> {* Big_int.add_int_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let sub_big_int =
  internal big_int -> big_int -> big_int
  external
  | caml -> {* Big_int.sub_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let pred_big_int =
  internal big_int -> big_int
  external
  | caml -> {* Big_int.pred_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let mult_big_int =
  internal big_int -> big_int -> big_int
  external
  | caml -> {* Big_int.mult_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let mult_int_big_int =
  internal basics#int -> big_int -> big_int
  external
  | caml -> {* Big_int.mult_int_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let square_big_int =
  internal big_int -> big_int
  external
  | caml -> {* Big_int.square_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let sqrt_big_int =
  internal big_int -> big_int
  external
  | caml -> {* Big_int.sqrt_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let quomod_big_int =
  internal big_int -> big_int -> (big_int * big_int)
  external
  | caml -> {* Big_int.quomod_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let div_big_int =
  internal  big_int -> big_int -> big_int
  external
  | caml -> {* Big_int.div_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let mod_big_int =
  internal big_int -> big_int -> big_int
  external
  | caml -> {* Big_int.mod_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let gcd_big_int =
  internal big_int -> big_int -> big_int
  external
  | caml -> {* Big_int.gcd_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let power_int_positive_int =
  internal basics#int -> basics#int -> big_int
  external
  | caml -> {* Big_int.power_int_positive_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let power_big_int_positive_int =
  internal big_int -> basics#int -> big_int
  external
  | caml -> {* Big_int.power_big_int_positive_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let power_int_positive_big_int =
  internal basics#int -> big_int -> big_int
  external
  | caml -> {* Big_int.power_int_positive_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let power_big_int_positive_big_int =
  internal big_int -> big_int -> big_int
  external
  | caml -> {* Big_int.power_big_int_positive_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let sign_big_int =
  internal big_int -> basics#int
  external
  | caml -> {* Big_int.sign_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let compare_big_int =
  internal big_int -> big_int -> basics#int
  external
  | caml -> {* Big_int.compare_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let eq_big_int =
  internal big_int -> big_int -> basics#bool
  external
  | caml -> {* Big_int.eq_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let le_big_int =
  internal big_int -> big_int -> basics#bool
  external
  | caml -> {* Big_int.le_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let ge_big_int =
  internal big_int -> big_int -> basics#bool
  external
  | caml -> {* Big_int.ge_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let lt_big_int =
  internal big_int -> big_int -> basics#bool
  external
  | caml -> {* Big_int.lt_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let gt_big_int =
  internal big_int -> big_int -> basics#bool
  external
  | caml -> {* Big_int.gt_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let max_big_int =
  internal big_int -> big_int -> big_int
  external
  | caml -> {* Big_int.max_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let min_big_int =
  internal big_int -> big_int -> big_int
  external
  | caml -> {* Big_int.min_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let num_digits_big_int =
  internal big_int -> basics#int
  external
  | caml -> {* Big_int.num_digits_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let string_of_big_int =
  internal big_int -> basics#string
  external
  | caml -> {* Big_int.string_of_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let big_int_of_string =
  internal basics#string -> big_int
  external
  | caml -> {* Big_int.big_int_of_string *}
  | coq -> {* (* [Unsure] *) *}
;;

let big_int_of_int =
  internal basics#int -> big_int
  external
  | caml -> {* Big_int.big_int_of_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let is_int_big_int =
  internal big_int -> basics#bool
  external
  | caml -> {* Big_int.is_int_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let int_of_big_int =
  internal big_int -> basics#int
  external
  | caml -> {* Big_int.int_of_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let float_of_big_int =
  internal big_int -> basics#float
  external
  | caml -> {* Big_int.float_of_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let nat_of_big_int =
  internal big_int -> foc_nat
  external
  | caml -> {* Big_int.nat_of_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let big_int_of_nat =
  internal foc_nat -> big_int
  external
  | caml -> {* Big_int.big_int_of_nat *}
  | coq -> {* (* [Unsure] *) *}
;;

let base_power_big_int =
  internal basics#int -> basics#int -> big_int -> big_int
  external
  | caml -> {* Big_int.base_power_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

let sys_big_int_of_string =
  internal basics#string -> basics#int -> basics#int -> big_int
  external
  | caml -> {* Big_int.sys_big_int_of_string *}
  | coq -> {* (* [Unsure] *) *}
;;

let round_futur_last_digit =
  internal basics#string -> basics#int -> basics#int -> basics#bool
  external
  | caml -> {* Big_int.round_futur_last_digit *}
  | coq -> {* (* [Unsure] *) *}
;;

let approx_big_int =
  internal basics#int -> big_int -> basics#string
  external
  | caml -> {* Big_int.approx_big_int *}
  | coq -> {* (* [Unsure] *) *}
;;

use "additive_law";;
use "weak_structures";;
use "rings_fields";;
use "integers";;

open "weak_structures";;

(** Basic big integers simply form a monoid with an element one*)
species Base_big_int =

  inherit additive_law#Cancellative_additive_monoid, Unitary_additive_monoid;

  representation = big_int;

  let one = #unit_big_int;
  let zero = #zero_big_int;
  let is_zero (m) = #eq_big_int (m, #zero_big_int);

  proof of is_zero_spec = by definition of is_zero, zero, equal;

  let plus (m, n) = #add_big_int (m, n);

  proof of zero_is_neutral= assumed (* Because todo *);
  proof of plus_is_left_regular = assumed (* Because todo *);
  proof of plus_is_associative = assumed (* Because todo *);
  proof of plus_commutes = assumed (* Because todo *);
  proof of plus_right_substitution_rule = assumed (* Because todo *);

  let equal (m, n) =  #eq_big_int (m, n);

  proof of equal_symmetric = assumed (* Because todo *);
  proof of equal_reflexive = assumed (* Because todo *);
  proof of equal_transitive = assumed (* Because todo *);

  let of_int (n) = #big_int_of_int (n);
  let print = #string_of_big_int;
  let parse = #big_int_of_string;

end
;;

collection Foc_basic_integers =

  implement Base_big_int;

end
;;

open "basics";;

(** Big integers *)
species Integers_big_int =
  inherit integers#Integer_system, Base_big_int;

  proof of one_is_left_neutral = assumed (* Because todo *);

  let mult (m, n) = #mult_big_int (m, n);

  proof of mult_is_integral = assumed (* Because todo *);
  proof of mult_assoc = assumed (* Because todo *);
  proof of mult_commutes = assumed (* Because todo *);
  proof of mult_left_distributes_on_plus = assumed (* Because todo *);
  (*[rr]: needs check *)
  proof of mult_right_distributes_on_plus = assumed (* Because toto *);
  proof of mult_left_substitution_rule = assumed (* Because todo *);

  let sign (x) = #sign_big_int (x);

  proof of order_compatible_with_plus = assumed (* Because todo *);
  proof of mult_compat_with_order = assumed (* Because todo *);

  let quo_rem (m, n) =
    let nn = n in
    let mm = m in
      let s = #sign_big_int (nn) in
      if s =0x 0 then basics#focalize_error ("must be non zero")
      else
        let qr = #quomod_big_int (mm, (#mult_int_big_int (s, nn))) in
        let q = basics#fst (qr) in let r = basics#snd (qr) in
        cr_qrr (#mult_int_big_int (s, q), r);

  let opposite (x) = #minus_big_int (x);

  proof of opposite_is_opposite = assumed (* Because todo *);

  logical let euclidean_ordering (x, y) =
    if !sign (x) < 0 then
      if #sign_big_int (y) < 0 then !lt (x, y)
      else !lt (x, !opposite (y))
    else
      if #sign_big_int (y) < 0 then !lt (x, !opposite (y))
      else !lt (x, y);

  proof of euclidean_ordering_is_irreflexive = assumed (* Because todo *);
  proof of euclidean_order_is_antisymmetric = assumed (* Because todo *);
  proof of euclidean_ordering_is_transitive = assumed (* Because todo *);
  proof of remainder_is_smaller = assumed (* Because todo *);
  proof of equal_from_leq = assumed (* Because broken by equal redefinition.*);

end
;;

collection Foc_big_integers =

  implement Integers_big_int;

end
;;
