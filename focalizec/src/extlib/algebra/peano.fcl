(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6   -  INRIA Rocquencourt          *)
(*                                                                     *)
(*  Copyright 2007, 2008 LIP6 and INRIA                                *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: peano.fcl,v 1.8 2009-05-25 12:35:58 doligez Exp $ *)

(** We want here to provide abstract definitions for what is usually called
   integers. That is natural numbers, and integers. The problem is that. *)

use "basics";;
open "basics";;

(* use "iterators";; *)
(* open "iterators";; *)

use "sets";;
use "strict_orders";;
use "orders_and_lattices";;

open "sets";;
open "strict_orders";;
open "orders_and_lattices";;



(**
   An abstract enumeration system is a system where we have a
   successor and a predecessor function.
 *)

species Enumeration_system =

  inherit Setoid;

  signature start: Self;

  let element = !start;

  (** An abstract successor function *)
  signature successor : Self -> Self;

  (** Compatibility with equality *)
  property successor_substitution_rule: all x y in Self,
   !equal (x, y) -> !equal (!successor(x), !successor(y));

  (** Injectivity of successor is a Peano axiom *)
  property successor_is_injective: all x y in Self,
     !equal (!successor(x), !successor(y)) -> !equal (x, y);

end
;;

type peano =
  | P_zero
  | P_succ(peano)
;;
let my_order=
  internal peano -> peano -> prop
  external
  | caml -> {* fun _x _y -> assert false *}
  | coq -> {* (fun x y => magic_order x y) *}
;;


species Peano_enumeration_system =

  inherit Syntactical_setoid, Enumeration_system;

  representation = peano;

  let successor(x) = P_succ(x);

  (**
     functional model a = b -> f(a) = f(b) and = is least reflexive relation
   *)
  proof of successor_substitution_rule =
   by definition of successor
      property equal_reflexive, equal_is_syntactic;

  theorem equal_very_reflexive: all x y in Self, (x = y) -> !equal(x, y)
    proof = by property !equal_reflexive;

  proof of successor_is_injective =
    <1>0 prove all x y in Self, (P_succ(x) = P_succ(y)) -> (x = y)
         by type peano ;
(*
         assumed {* should be injectivity of constructor, needs Coq *}
*)
    <1>1 assume x in Self, assume y in Self,
         assume H: !equal(!successor(x), !successor(y)),
         prove !equal(x, y)
         <2>1 prove P_succ(x) = P_succ(y)
              by hypothesis H
                 definition of successor
                 property equal_is_syntactic
         <2>f qed
              (* [rr]: time limit!   *)
              (* by step <2>1, <1>0 property !equal_very_reflexive *)
              (* [rr]: exhausted! *)
              (* by step <2>1, <1>0 property !equal_reflexive *)
              property equal_reflexive
              assumed {*  *}
(*               coq proof *)
(*               property !equal_reflexive *)
(*               {* apply coq_builtins.magic_prove. Qed. *} *)
    <1>f conclude;
(*          qed assumed {* __A_1_LEMMA not found *}; *)


end
;;


(**
   An abstract enumeration system is a system that could be obtained
   by stating from the 0 element and iterating the successor function.
 *)
species Enumerated_system =

  inherit Enumeration_system, Partial_set;

  (** Zero is not a successor is a Peano axiom *)
  property successor_is_non_trivial: all n in Self,
    !different(!successor (n), !start);

  (**
     predecessor computes the unique y such that successor(y) = x
     This makes sense because predecessor is injective.
   *)
  signature predecessor : Self -> Self;
  property predecessor_reverses_successor : all x y in Self,
     !different(y, !start) ->
       !equal (x, !predecessor(y)) ->
         !equal (y, !successor(x));

  (** Weak injectivity of predecessor is a Peano axiom *)
  theorem predecessor_is_injective: all n m in Self,
    !different(n, !start) -> !different (m, !start) ->
      !equal (!predecessor (n), !predecessor (m)) -> !equal (n, m)
    proof =
    <1>1 assume x in Self, assume y in Self,
         assume H_x: !different(x, !start),
         assume H_y: !different(y, !start),
         (* sort of let *)
         assume px in Self, assume Px: px = !predecessor(x),
         assume py in Self, assume Py: py = !predecessor(y),
         assume H: !equal(!predecessor(x), !predecessor(y)),
         prove !equal(x, y)
         <2>1 prove !equal(px, py)
              by hypothesis H, Px, Py
                 property !equal_symmetric, !equal_transitive
         <2>2 prove !equal(x, !successor(px))
              by hypothesis Px, H_x
                 property !equal_reflexive, !predecessor_reverses_successor
         <2>3 prove !equal(y, !successor(py))
              by hypothesis Py, H_y
                 property !equal_reflexive, !predecessor_reverses_successor
         <2>f qed by step <2>1, <2>2, <2>3
                    property !equal_symmetric, !equal_transitive,
                             !successor_is_injective,
                             !successor_substitution_rule
    <1>f conclude;


  (** An induction principle for natural numbers *)
  logical let enumerated_induction(p in (Self -> bool)) =
    p (!start) -> (all n in Self, p (n) -> p (!successor (n)))
      -> (all n in Self, p (n));

end
;;

(**
  Here we state properties for a total ordering over an enumeration.
  Implicitely we orient the binary relation x = succ(y)
  and consider its transitive closure
 *)
species Ordered_Enumeration_system =

  inherit Enumeration_system, Strictly_ordered_set;


  (** The ordering is compatible with the successor function *)
  property successor_defines_bigger: all x in Self,
    !lt (x, !successor (x));

end
;;

species Ordered_Enumerated_system =

  inherit Enumerated_system, Ordered_Enumeration_system;

  (** a lower bound for the ordering *)
  property start_is_min: all x in Self,
    !leq(!start, x);

  (** the successor defines the weakest possible element *)
  property successor_defines_infimum: all x y in Self,
    !lt(x, y) -> !leq (!successor (x), y);

  (* [rr]:
     To be continued ... One should be able to implement something which
     reasonably describes natural numbers
   *)
end
;;

species Peano_base =
  inherit Peano_enumeration_system,
          Ordered_Enumerated_system;

  let start = P_zero;

  let predecessor(x) = match x with
    | P_zero -> P_zero
    | P_succ(x) -> x;

  proof of predecessor_reverses_successor =
    <1>1 assume x in Self, assume y in Self,
         assume H_y: !different(x, !start),
         assume H_xy: !equal(y, !predecessor(x)),
         prove !equal(x, !successor(y))
         assumed {* To do *}
    <1>f conclude;

  proof of successor_is_non_trivial =
    <1>0 prove all x in Self, ~(P_succ(x) = P_zero)
         assumed {* should be exclusivity of constructors needs Coq *}
    <1>1 assume x in Self,
         prove !different(!successor(x), !start)
         <2>1 prove ~(P_succ(x) = P_zero)
              assumed {* by step <1>0 *}
         <2>2 prove ~(!successor(x) = !start)
              (* by step <2>1  *)
              definition of successor, start
              assumed {* *}
         <2>f qed by step <2>2 property !different_is_syntactic
    <1>f qed by step <1>1 ;

end
;;


species Peano_dumb =

  inherit Peano_base;

  let lt(x, y) = false;

  proof of lt_is_irreflexive = by definition of lt;
  proof of lt_is_transitive = by definition of lt;

  proof of successor_defines_bigger = assumed {* this is wrong *};
  proof of successor_defines_infimum = assumed {* this is wrong *};

  proof of start_is_min = assumed {* this is wrong *};

  proof of equal_is_syntactic = assumed {* this is wrong *};

  proof of total_order = assumed {* this is true *};

end
;;

collection Peano_dumb_coll =

  implement Peano_dumb

end
;;

species Peano_order =

  inherit Peano_base, Ordered_Enumerated_system;

(*   (\* generic proof that syntactic equality induces total ordering *\) *)
(*   proof of total_order = *)
(*     <1>1 assume x in Self, assume y in Self, *)
(*          prove !leq(x, y) \/ !leq(y, x) *)
(*          <2>1 assume H_e: !equal(x, y), *)
(*               prove !leq(x, y)  *)
(*               by property !leq_from_lt,  *)
(*                           !equal_is_syntactic *)
(*          <2>2 assume H_d: !different(x, y), *)
(*               prove !leq(x, y) \/ !leq(y, x) *)
(*               <3>1 assume H_xy: !lt(x, y), *)
(*                    prove leq(x, y) by hypothesis H_xy property leq_from_lt *)
(*               <3>2 assume H_yx: !lt(y, x), *)
(*                    prove !leq(y, x) by hypothesis H_yx property leq_from_lt *)
(*               <3>f qed by step <3>1, <3>2  *)
(*                           hypothesis H_d  *)
(*                           definition of different *)
(*          <2>f qed by step <2>1, <2>2 property same_is_not_different *)
(*     <1>f conclude; *)

  let rec lt(x, y) = match x with
    | P_zero -> 
        (match y with 
          | P_zero -> false
          | _y -> true)
    | P_succ(x_1) ->
        (match y with 
          | P_zero -> false
          | P_succ(y_1) -> !lt(x_1, y_1))
    termination proof =
       order my_order on x, y
       assumed {* *}
    ;

  proof of lt_is_irreflexive =
    <1>0 prove ~(!lt(P_zero, P_zero))
         definition of lt assumed {* base case *}
    <1>1 prove all x in Self, ~(!lt(x, x)) -> ~(!lt(P_succ(x), P_succ(x)))
         <2>1 assume x in Self,
              assume H_x: !lt(P_succ(x), P_succ(x)),
              prove !lt(x, x)
              definition of lt
              assumed {* inductive step *}
         <2>f conclude
    <1>2 prove (all x in Self, ~(!lt(x, x)))
         (* definition of enumerated_induction *)
         assumed {* induction principle *}
    <1>f qed assumed {* by step <1>2 *};

  proof of total_order =
    definition of lt assumed {* *};

(*   proof of lt_is_transitive = *)
(*     definition of lt assumed {* *}; *)


(*   proof of successor_defines_infimum = *)
(*     definition of successor, lt *)
(*     property different_is_not_same, leq_from_lt *)
(*     assumed {* *}; *)

(*   proof of successor_defines_bigger = *)
(*     definition of successor, lt *)
(*     property different_is_not_same, leq_from_lt *)
(*     assumed {* *}; *)

(*   proof of predecessor_reverses_successor = *)
(*     definition of predecessor, successor, equal *)
(*     assumed {* *}; *)

  let start = P_zero;

  proof of start_is_min =
    (* transparent theorem reveals representation!*)
    <1>0 prove  all x in Self, !lt(P_zero, x) \/ (x = P_zero)
         definition of lt
         assumed {* should apply some form of discrimination *}
    (* transparent theorem !*)
    <1>1 prove all x in Self, !leq(P_zero, x)
         property leq_from_lt
         (* step <1>0 *)
         assumed {* direct consequence of <1>0 *}
    <1>f qed
         definition of start
         (* step <1>1 *)
         assumed {* direct consequence of <1>1 *}
 ;

end
;;

(*
 collection Peano_coll =
     implement Peano_order
 end
;; *)
