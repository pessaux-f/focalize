(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6   -  INRIA Rocquencourt          *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: multiplicative_law.fcl,v 1.11 2009-06-27 01:29:03 weis Exp $ *)

(** Common properties of multiplicative laws. *)

use "basics";;
use "sets";;
use "constants";;
open "basics";;
open "sets";;
open "constants";;

(** one associative multiplicative binop, this is sometimes called a magma *)
species Semi_group =

  inherit Setoid;

  (** @mathml <times/>*)
  signature mult : Self -> Self -> Self;

  (** associativity rule *)
  property mult_assoc : all x y z : Self,
   !equal (!mult (x, !mult (y, z)), !mult (!mult (x, y), z));

  (** compatibility with equality *)
  property mult_left_substitution_rule : all x y z : Self,
    !equal (x, y) -> (!equal (!mult (x, z), !mult (y, z)));

  (** compatibility with equality *)
  property mult_right_substitution_rule : all x y z : Self,
    !equal (x, y) -> (!equal (!mult (z, x), !mult (z, y)));

  (** users should use this property when possible *)
  theorem mult_substitution_rule: all x_1 x_2 y_1 y_2 : Self,
    !equal (x_1, x_2) -> !equal (y_1, y_2) ->
      !equal (!mult (x_1, y_1), !mult (x_2, y_2))
    proof =
     by property mult_left_substitution_rule, mult_right_substitution_rule,
       equal_transitive;

end
;;


(** multiplicative monoids  have a unit element one *)
species Monoid =

  inherit Setoid_with_one, Semi_group;

  (** right neutrality *)
  property one_is_right_neutral : all x : Self,
    !equal (!mult (x, !one), x);

  (** left neutrality *)
  property one_is_left_neutral : all x : Self,
   !equal (!mult (!one, x), x);

  (** neutrality *)
  theorem one_is_neutral: all x : Self,
    !equal (!mult (x, !one), x) /\ !equal (!mult (!one, x), x)
    proof =
      by property one_is_left_neutral, one_is_right_neutral;

  (** in a monoid the unit element is unique *)
  theorem one_is_unique :
    (all o : Self,
     (all x : Self, !equal (x, !mult (x, o)) \/ !equal (x, !mult (o, x)))
      -> !equal (o, !one))
    proof = by property one_is_neutral, equal_symmetric, equal_transitive;

end
;;



(* species Power_by_dichotomy (M is Monoid, *)
(*                             Nat is Dichotomic_system, *)
(*                             Bins is Binop (M), *)
(*                             Dicho is Dichotomy (Nat, M, Bins)) = *)
(*     inherit Basic_object; *)
(*   let expt (x, n) = Dicho!dichot (x, n); *)
(*
end
;; *)



(* (\* [rr]: this should be renamed *\) *)
(* species Power (M is Monoid, Nat is Dichotomic_system, *)
(*                Bins is Binop (M), Dicho is Dichotomy (Nat, M, Bins)) = *)
(*   inherit Power_by_dichotomy (M, Nat, Bins, Dicho); *)
(*   rep = unit; *)
(*
end
;; *)


(** A commutative monoid has a commutative multiplicative law.
   we shloud be able to reduce right neutrality to left neutrality *)
species Commutative_monoid =

  inherit Monoid;

  (** commutativity *)
  property mult_commutes: all x y : Self,
    !equal (!mult (x, y), !mult (y, x));

  (** *)
  proof of mult_right_substitution_rule =
    <1>1 assume x y_1 y_2 : Self,
         hypothesis H: !equal (y_1, y_2),
         prove !equal (!mult (x, y_1), !mult (x, y_2))
         <2>1 prove !equal (!mult (x, y_1), !mult (y_1, x))
              by property mult_commutes
         <2>2 prove !equal (!mult (y_2, x), !mult (x, y_2))
              by property mult_commutes
         <2>3 prove !equal (!mult (y_1, x), !mult (y_2, x))
              by hypothesis H property mult_left_substitution_rule
         <2>f qed by step <2>1, <2>2, <2>3 property equal_transitive
    <1>f conclude
   ;

end
;;

(** Commonly multiplication by zero gives zero  *)
species Monoid_with_absorbant =

  inherit Setoid_with_zero, Monoid;

  property zero_left_absorbes: all x : Self,
   !equal (!mult (!zero, x), !zero);

  property zero_right_absorbes: all x : Self,
   !equal (!mult (x, !zero), !zero);

  theorem zero_absorbes: all x : Self,
    !equal (!mult (x, !zero), !zero)
    /\
    !equal (!mult (!zero, x), !zero)
   proof = by property zero_right_absorbes, zero_left_absorbes;

end
;;

species Commutative_monoid_with_absorbant =

   inherit Monoid_with_absorbant, Commutative_monoid;

   proof of zero_right_absorbes =
     by property mult_commutes, zero_left_absorbes, equal_transitive;

end
;;

species Commutative_integral_monoid_with_absorbant =

  inherit Commutative_monoid_with_absorbant;

  property mult_is_integral: all x : Self, all a : Self,
    !equal (!mult (a, x), !zero) -> (!equal (a, !zero) \/ !equal (x, !zero));

end
;;

(**
   An attempt to define divisibility as the weakest ordering compatible
   with multiplication. In usual commutative algebra one expects that
   there is a function performing it.
   Units are commonly defined as divisors of one which leads to the notion
   od associated elements.
   Here we simply specify the preorder of divisibility. Usually one says that
   x divides y if there exists a z such that y = xz
   but this is not constructive.
   Here we simply express compatibility with multiplication
 *)
species Commutative_monoid_with_divisibility =

  inherit Commutative_monoid;

  signature divides : Self -> Self -> prop;

  (** A reflexive relation should be expressed as an extension of equality *)
  property divides_extends_equal: all x y : Self,
    !equal (x, y) -> !divides (x, y);

  theorem divides_reflexive: all x : Self, !divides (x, x)
     proof = by property divides_extends_equal, equal_reflexive;

  (**
     This is the main property which enables not to distinguish
     left and right divisibility. Otherwise things are more complicated...
   *)
  property divides_reverses_mult: all x y : Self,
    !divides (x, !mult (x, y)) /\ !divides (y, !mult (x, y));

  property divides_transitive: all x y z : Self,
    !divides (x, y) -> !divides (y, z) -> !divides (x, z);

  (**
     One is always minimal for divisibility
   *)
  theorem one_is_minimal: all x : Self, !divides (!one, x)
    proof =
    <1>1 assume x : Self,
          prove !divides (!one, x)
          <2>1 prove !divides (!one, !mult (!one, x))
               by property divides_reverses_mult
          <2>3 prove !divides (!mult (!one, x), x)
               <3>1 prove !equal (!mult (!one, x), x)
               by property one_is_neutral
               <3>f qed by step <3>1 property divides_extends_equal
          <2>f qed by step <2>1, <2>3 property divides_transitive
    <1>f conclude
   ;

end
;;

(**
   In a monoid with 0 and 1,
   0 acts as a biggest element and 1 as a smallest
 *)
species Commutative_monoid_with_absorbant_divibility =

  inherit Commutative_monoid_with_divisibility,
          Commutative_monoid_with_absorbant;

  theorem zero_is_maximal: all x : Self,
    !divides (x, !zero)
    proof =
      by property zero_absorbes, divides_reverses_mult, divides_transitive,
        divides_extends_equal;

end
;;

(** A cancellation monoid has some form of simplification property *)
species Cancellative_commutative_monoid =

  inherit Commutative_monoid_with_absorbant;

  (** Left cancellation by non null element *)
  property mult_is_left_regular: all x y z : Self,
    !equal (!mult (x, y), !mult (x, z)) -> ~ (!equal (x, !zero)) ->
      !equal (y, z);

  (** Right cancellation by non null element *)
  theorem mult_is_right_regular: all x y z : Self,
    !equal (!mult (y, x), !mult (z, x)) -> ~ (!equal (x, !zero)) ->
      !equal (y, z)
    proof = by property mult_is_left_regular, mult_commutes, equal_transitive;

  (** The cancellation property *)
  theorem mult_is_regular: all x y z : Self,
   ((!equal (!mult (x, y), !mult (x, z)) -> ~ (!equal (x, !zero)) ->
     !equal (y, z))
     /\
    (!equal (!mult (x, z), !mult (y, z)) -> ~ (!equal (z, !zero)) ->
      !equal (x, y)))
  proof = by property mult_is_left_regular, mult_is_right_regular;

end
;;

(**
   Regular multiplicative monoids are commutative multiplicative monoids
    with a special 0 element and a safe division named exquo
*)
species Regular_monoid =

  inherit Commutative_monoid_with_absorbant_divibility,
          Commutative_integral_monoid_with_absorbant,
          Cancellative_commutative_monoid;

  signature exquo : Self -> Self -> partiel (Self);

  property exquo_divides: all x y z : Self,
    (is_failed (!exquo (x, z)))
      \/
    (!equal
     (y, non_failed (!exquo (x, z))) -> !equal (x, !mult (z, y)));

  let recip (x) = Self!exquo (Self!one, x);

  (* [rr]: need to fill those *)
  logical let divides (x, y) = ~~ is_failed (!exquo (y, x));
  proof of divides_extends_equal =
    definition of divides
    assumed (* To do. *);

  proof of divides_transitive = assumed (* Because todo *);
  proof of divides_reverses_mult = assumed (* Because todo *);

end
;;

(** a division monoid is like a regular monoid but has a division
    which can raise an error
*)
species Division_monoid =

  inherit Commutative_monoid_with_absorbant_divibility,
          Commutative_integral_monoid_with_absorbant,
          Cancellative_commutative_monoid;

  (** @mathml <quotient/> *)
  signature div : Self -> Self -> Self;

  property div_divides: all x y : Self,
    !equal (y, !zero) \/ !equal (!mult (!div (x, y), y), x);

  theorem div_left_substitution_rule: all x_1 x_2 y : Self,
    !equal (x_1, x_2) -> ~ (!equal (y, !zero)) ->
       !equal (!div (x_1, y), !div (x_2, y))
    proof =
    <1>1 assume x_1 x_2 y : Self,
         hypothesis H_x : !equal (x_1, x_2), H_y : ~(!equal (y, !zero)),
         prove !equal (!div (x_1, y), !div (x_2, y))
         <2>1 prove !equal (!mult (!div (x_1, y), y), x_1)
              by property div_divides hypothesis H_y
         <2>2 prove !equal (!mult (!div (x_2, y), y), x_2)
              by property div_divides hypothesis H_y
         <2>3 prove !equal (!mult (!div (x_1, y), y),
                            !mult (!div (x_2, y), y))
              by step <2>1, <2>2
                 hypothesis H_x
                 property equal_transitive, equal_symmetric
         <2>f qed by step <2>3 hypothesis H_y property mult_is_regular
    <1>f qed assumed (* ASSUMED: exhausted search space *)
   ;

  theorem div_right_substitution_rule: all x y_1 y_2 : Self,
    !equal (y_1, y_2) -> ~(!equal (y_1, !zero)) ->
       !equal (!div (x, y_1), !div (x, y_2))
    (* [rr]: to do ! *)
    proof =
      <1>1 assume x y_1 y_2 : Self,
           hypothesis H_y : !equal (y_1, y_2), H_0 : ~(!equal (y_1, !zero)),
            prove !equal (!div (x, y_1), !div (x, y_2))
            <2>1 prove !equal (!mult (!div (x, y_1), y_1), x)
                 by property div_divides hypothesis H_0
            <2>2 prove !equal (!mult (!div (x, y_2), y_1), x)
                 <3>1 prove !equal (!mult (!div (x, y_2), y_2), x)
                      <4>1 prove ~(!equal (y_2, !zero))
                           by hypothesis H_y, H_0 property equal_transitive
                      <4>2 qed by step <4>1 property div_divides
                 <3>2 prove !equal (!mult (!div (x, y_2), y_1),
                                   !mult (!div (x, y_2), y_2))
                      (* [rr]: strange but zenon does not guess *)
                      <4>1 assume z : Self,
                           prove !equal (!mult (z, y_1), !mult (z, y_2))
                           by hypothesis H_y
                              property mult_right_substitution_rule
                      <4>f qed by step <4>1
                 <3>f qed by step <3>1, <3>2 property equal_transitive
            <2>3 prove !equal (!mult (!div (x, y_1), y_1),
                              !mult (!div (x, y_2), y_1))
                by step <2>1, <2>2
                   property equal_symmetric, equal_transitive
            <2>f qed  by step <2>3 hypothesis H_0 property mult_is_regular
      <1>f qed assumed (* ASSUMED exhausted search space *)
     ;

  theorem div_really_divides: all x y : Self,
    !equal (y, !zero) \/ !divides (!div (x, y), x)
    proof =
     <1>1 assume x y : Self,
          hypothesis H: !different(y, !zero),
          prove !divides (!div (x, y), x)
          <2>1 prove !equal (!mult (!div (x, y), y), x)
               by hypothesis H property div_divides, same_is_not_different
           <2>2 prove !divides (!div (x, y), !mult (!div (x, y), y))
               by property divides_reverses_mult
          <2>f qed by step <2>1, <2>2
                   property divides_extends_equal, divides_transitive
     <1>f qed by step <1>1 property same_is_not_different
    ;

  logical let divides (x, y) =
    !equal (y, !zero) ||  ~~ !equal (x, !zero);

  proof of divides_extends_equal =
  <1>1 assume x y : Self,
       hypothesis H: !equal (x, y),
          prove !divides (x, y)
          <2>1 hypothesis H_0: !equal (y, !zero),
                prove !divides (x, y)
                by hypothesis H_0 definition of divides
          <2>2 hypothesis H_1: !different (y, !zero),
               prove !divides (x, y)
               <3>1 prove ~ (!equal (x, !zero))
                    by hypothesis H, H_1
                       property !equal_transitive, !equal_symmetric,
                       !same_is_not_different
               <3>f qed by step <3>1 definition of divides
          <2>f qed by step <2>1, <2>2 property !same_is_not_different, divides
    <1>f qed by step <1>1 property divides;


  proof of divides_reverses_mult =
    <1>1 assume x y : Self,
         prove !divides (x, !mult (x, y))
         <2>1 hypothesis H_0: !equal (x, !zero),
              prove !divides (x, !mult (x, y))
              <3>1 prove !equal (!mult (x, y), !zero)
                   by hypothesis H_0
                   property !zero_absorbes, !equal_transitive,
                      !mult_left_substitution_rule
              <3>f qed by step <3>1 definition of divides
         <2>2 hypothesis H_1: !different (x, !zero),
              prove !divides (x, !mult (x, y))
              by hypothesis H_1 property !same_is_not_different
                 definition of divides
         <2>f qed by step <2>1, <2>2 property !same_is_not_different, divides
    <1>f qed by step <1>1
                property !mult_commutes, !divides_extends_equal,
                  !divides_transitive, divides;



  proof of divides_transitive =
    by definition of divides;

  let inv (x) = Self!div (Self!one, x);

  theorem inv_substitution_rule: all x_1 x_2 : Self,
    !equal (x_1, x_2) -> ~ (!equal (x_1, !zero)) ->
      !equal (!inv (x_1), !inv (x_2))
    proof = assumed (* ASSUMED (strange scoping error) by property div_right_substitution_rule *)
              (*ASSUMED definition of inv*);

end
;;

(* gcd (Original ocaml version by Louis Mandel) *)
species Factorization_monoid =

  inherit Regular_monoid;

  (** @mathml <gcd/>*)
  signature gcd : Self-> Self-> Self;

  property gcd_divides: all x y z : Self,
    !equal (z, !gcd (x, y)) ->
      (~ (is_failed (!exquo (x, z)))
        /\
       ~ (is_failed (!exquo (y, z))));

  property divisor_is_multiple_of_gcd: all x y d : Self,
    ~ (is_failed (!exquo (x, d))) ->
      ~ (is_failed (!exquo (y, d))) ->
        ~ (is_failed (!exquo (d, !gcd (x, y))));

end
;;
