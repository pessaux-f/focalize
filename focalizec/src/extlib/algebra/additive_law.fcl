(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6   -  INRIA Rocquencourt          *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: additive_law.fcl,v 1.14 2009-06-27 01:29:03 weis Exp $ *)

(** The FoCaLize library does not intend to model binary laws which are not
   associative, thus some mathematical notions such as magmas (groupoids) are
   meaningless in the library. For additive notations we restrict to abelian
   or commutative laws with neutral elements.

   By additive laws we thus mean abelian monoids with additive notation. *)

use "basics";;
use "sets";;
use "orders";;
use "orders_and_lattices";;
use "lattices";;
use "constants";;
open "basics";;
open "sets";;
open "orders";;
open "orders_and_lattices";;
open "constants";;
open "lattices";;

(** We state that checking to 0 is a unary operation distinct from equality *)
species Zero_check_set =

  inherit Setoid_with_zero;

 (**
    in the theory of zero checks we claim that checking to zero
    is a primitive operation.
  *)

  (**
     An element satisfying the check should be equal to 0
   *)
  property is_zero_checks_to_zero: all x : Self,
   (!is_zero (x)) -> ( !equal (x, Self!zero) /\ !equal (Self!zero, x));

  property is_zero_substitution_rule: all x y : Self,
    !is_zero (x) -> (!equal (x, y) \/ !equal (y, x)) -> !is_zero (y);

  theorem equals_zero_is_zero_check : all x : Self,
   (!equal (!zero, x) \/ !equal (x, !zero)) -> !is_zero (x)
     proof =
       by property zero_checks_to_zero, is_zero_substitution_rule
    ;

end
;;


(** semi_group with additive notation, these are commutative *)
species Additive_semi_group =

  inherit Setoid;

 (** @mathml <plus/>
     will be rendered as infix +
 *)
 signature plus : Self -> Self -> Self;


  (** We state that additive laws are commutative *)
  property plus_commutes : all x y : Self,
    !equal (!plus (x, y), !plus (y, x));

  property plus_is_associative : all x y z : Self,
    !equal (!plus (x, !plus (y, z)), !plus (!plus (x, y), z));

  (** Compatibility with equality *)
  property plus_right_substitution_rule : all x y z : Self,
     !equal (x, y) -> (!equal (!plus (z, x), !plus (z, y)));

  theorem plus_left_substitution_rule : all x y z : Self,
    !equal (x, y) -> (!equal (!plus (x, z), !plus (y, z)))
    proof =
     by property plus_commutes,
       plus_right_substitution_rule, equal_transitive;

  theorem plus_substitution_rule: all x1 x2 y1 y2 : Self,
    !equal (x1, x2) -> !equal (y1, y2) ->
      !equal (!plus (x1, y1), !plus (x2, y2))
    proof =
      by property plus_left_substitution_rule, plus_right_substitution_rule,
         equal_transitive;

end
;;

(** Monoids with additive notation, these are commutative *)
species Additive_monoid =

  inherit Additive_semi_group, Setoid_with_zero;

  (** @mathml <plus/>
      will be rendered as infix +
  *)
  signature plus : Self -> Self -> Self;

  property zero_is_neutral : all x : Self,
    !equal (!plus (x, !zero), x) /\ !equal (!plus (!zero, x), x);

  theorem zero_is_unique : all o : Self,
   (all x : Self, !equal (x, !plus (x, o))) -> !equal (o, !zero)
   proof =
          <1>1 assume o : Self,
               hypothesis H1: all x : Self, !equal (x, !plus (x, o)),
               prove !equal (o, !zero)
              <2>1 prove !equal (!zero, !plus (!zero, o))
                 by hypothesis H1
              <2>3 prove !equal (o, !zero)
                 by step <2>1
                 property zero_is_neutral, equal_transitive, equal_symmetric
              <2>4 conclude
         <1>2 conclude
   ;

end
;;

(** A semi_group is cancellative if we can simplify *)
species Cancellative_additive_semi_group =

  inherit Additive_semi_group;

  (** Left cancellation *)
  property plus_is_left_regular : all x y z : Self,
    !equal (!plus (x, y), !plus (x, z)) -> !equal (y, z);

  (** Right cancellation *)
  theorem plus_is_right_regular : all x y z : Self,
    !equal (!plus (x, z), !plus (y, z)) -> !equal (x, y)
    proof =
      by property plus_is_left_regular, plus_commutes, equal_transitive
  ;

  (** The cancellation property *)
  theorem plus_is_regular: all x y z : Self,
    ((!equal (!plus (x, y), !plus (x, z)) -> !equal (y, z))
     /\
     (!equal (!plus (x, z), !plus (y, z)) -> !equal (x, y)))
    proof =
      by property plus_is_left_regular, plus_is_right_regular
  ;

end
;;

(** A monoid is cancellative if we can simplify *)
species Cancellative_additive_monoid =

  inherit Cancellative_additive_semi_group, Additive_monoid;

end
;;


(**
a zero check additive monoid has a unary operation that checks
if an element is 0
*)
species Zero_check_additive_monoid =

  inherit Zero_check_set, Cancellative_additive_monoid;

  (* [rr]:
     here we should add some prperties about 0, zero check and addition
     I have to check which axioms are `primitive'

     Our goal is to implement equality in terms of zero check and operations
   *)

  (** [rr] Tue Oct 26 15:03:26 CEST 2004
     this is an attempt to define some form of compatibility between
     0, zero check and plus
   *)
  property is_zero_defines_neutral: all x y o : Self,
    !is_zero (o) -> !equal (x, y) ->
      ( !equal (x, !plus (o, y)) /\
        !equal (!plus (o, x), y) /\
        !equal (!plus (x, o), y) /\
        !equal (x, !plus(y, o))
      );
    (* !is_zero(z) -> !equal(x,y) -> !equal(x,!plus(z,y)); *)

  (** [rr] Tue Oct 26 20:03:49 CEST 2004
     New property attempting to reduce equality chains
     *)
  property zero_simplifies: all x y : Self,
    (!equal (!plus (x, !zero), y) \/
     !equal (x, !plus (!zero, y)) \/
     !equal (x, !plus (y, !zero)) \/
     !equal (!plus (!zero, x), y))
       -> !equal (x, y);

  proof of equal_reflexive =
    <1>1 assume x : Self,
         prove !equal (x, x)
         <2>1 prove !equal (!plus (!zero, !plus (x, !zero)),
                            !plus (!plus (!zero, x), !zero))
              by property plus_is_associative
         <2>2 prove !equal (!plus (x, !zero), !plus (!zero, x))
              by step <2>1
              property zero_simplifies
         <2>f qed by step <2>2 property zero_simplifies
    <1>2 conclude
  ;

  proof of is_zero_substitution_rule =
   (* [rr]: to do *)
   assumed (* Because todo *);

  theorem is_zero_defines_unique: all x y : Self,
    (!is_zero (x) /\ !is_zero (y)) -> !equal(x, y)
    proof =
      <1>1 assume x : Self, y : Self,
           hypothesis H1: !is_zero (x),
           hypothesis H2: !is_zero (y),
           prove !equal (x, y)
           <2>1 prove !equal (x, !zero)
                by hypothesis H1 property is_zero_checks_to_zero
           <2>2 prove !equal (!zero, y)
                by hypothesis H2 property is_zero_checks_to_zero
          <2>z qed by step <2>1, <2>2 property equal_transitive
      <1>2 conclude
  ;

  proof of zero_is_neutral =
    <1>1 assume x : Self,
         prove !equal (!plus (x, !zero), x) /\ !equal (!plus (!zero, x), x)
         <2>0 prove !equal (x, x) by property equal_reflexive
         <2>1 prove !equal (!plus (x, !zero), x)
              by step <2>0
                 property zero_checks_to_zero, is_zero_defines_neutral
         <2>2 prove !equal (!plus (!zero, x), x)
              by step <2>0
                 property zero_checks_to_zero, is_zero_defines_neutral
         <2>f qed by step <2>1, <2>2
    <1>2 conclude
  ;


  (** In some obscure books about mathematics and depending on terminology,
     this may be called a triviality !
   *)
  theorem zero_is_additive:
    !is_zero (!plus (!zero, !zero))
    proof =
      <1>1 prove !equal (!zero, !plus (!zero, !zero))
           (* looks stupid, but we don't have reflexity *)
           <2>1 prove !equal (!plus (!zero, !zero),
                              !plus (!zero, !zero))
                (* looks stupid, but we don't have reflexity *)
                <3>1 prove !equal (!zero, !zero)
                     by property is_zero_checks_to_zero, zero_checks_to_zero
                <3>2 qed by step <3>1
                            property plus_left_substitution_rule
           <2>f qed by step <2>1 property zero_simplifies
      <1>2 qed by step <1>1 property equals_zero_is_zero_check
  ;

  (** this also looks trivial *)
  theorem is_zero_is_addditive: all x y : Self,
    !is_zero (x) -> !is_zero (y) -> !is_zero (!plus (x, y))
    proof =
      <1>1 assume x : Self, y : Self,
           hypothesis Zx: !is_zero (x),
           hypothesis Zy: !is_zero (y),
           prove !equal (!zero, !plus (x, y))
           <2>1 prove !equal (x, !zero)
                by hypothesis Zx
                   property is_zero_checks_to_zero
           <2>2 prove !equal (!plus (x, y), !zero)
                by hypothesis Zy
                   step <2>1
                   property is_zero_defines_neutral
           <2>f qed by step <2>2 property equal_symmetric
      <1>2 qed by step <1>1 property equals_zero_is_zero_check
  ;

end
;;

(** In a regular semi_group we can simplify effectively *)
species Regular_additive_semi_group =

  inherit Cancellative_additive_semi_group, Partial_set;

  (** from the cancellation property we define a partial subtraction
      @mathml <minus/>
   *)
  signature minus : Self -> Self -> Self;

  (*
     from these properties we should be able to prove basic
     properties of equality
   *)
  property minus_is_well_defined: all x y z : Self,
    !equal (x, !plus (z, y)) ->
      (!equal (!minus (x, y), z) /\ !equal (!minus (x, z), y));

  property minus_left_substitution_rule: all x y z : Self,
    !equal (x, y) -> !equal (!minus (x, z), !minus (y, z));

  property minus_right_substitution_rule: all x y z : Self,
      !equal (y, z) -> !equal (!minus (x, y), !minus (x, z));

end
;;


(** In a regular monoid we can simplify effectively *)
species Regular_additive_monoid =

  inherit Regular_additive_semi_group, Cancellative_additive_monoid,
                              Partial_set;

  theorem zero_is_right_neutral_for_minus: all x : Self,
    !equal (!minus (x, !zero), x)
    proof =
      <1>1 assume x : Self,
           prove !equal (!minus(x, !zero), x)
           <2>1 prove !equal (x, !plus (x, !zero))
                by property zero_is_neutral, equal_symmetric
           <2>f qed by step <2>1 property minus_is_well_defined
      <1>2 conclude
  ;

end
;;

(** In an ordered additive monoid we have an ordering which is
    compatible with the additive structure. As a naive intuition one
    may think of plus as multiplication of monomials which form
    a submonoid of any polynomial ring. We view these as `degrees'
    and denote the law additively. The ordering induced by
    the meet semi lattice structure is divisibilty,
    the inf (infimum) is gcd and the sup (supremum) is lcm.

    Properties stated here are analogous to those of lattice theory and
    we have a semi ring structure with idempotent addition (inf) and
    commutative multiplcation (add).
*)

species Additive_monoid_with_infimum =
  inherit Meet_semi_lattice_with_min, Cancellative_additive_monoid;

  (** absorption law *)
  property inf_absorbes_add : all  x y : Self,
    !order_inf (x, !plus (x, y));

  (** distributivity of plus over infimum *)
  property add_left_distributes_on_inf: all x y z : Self,
    !equal (!plus (x, !inf (y, z)), !inf (!plus (x, y), !plus (x, z)));

  property add_right_distributes_on_inf: all x y z : Self,
    !equal (!plus (!inf (x, y), z), !inf (!plus (x, z), !plus (y, z)));

  theorem add_distributes_on_inf: all x y z : Self,
    !equal (!plus (x, !inf (y, z)), !inf (!plus (x, y), !plus (x, z)))
      /\
    !equal (!plus (!inf (x, y), z), !inf (!plus (x, z), !plus (y, z)))
    proof = by property add_right_distributes_on_inf,
                       add_left_distributes_on_inf
  ;


  (** we state that 0 is the minimal element of the monoid *)
  (* [rr]: may be we need more properties here *)
  let is_min(x) = Self!is_zero(x);
  let min = Self!zero;
  theorem min_spec: !equal(!min, !zero)
    proof = by property equal_reflexive definition of min
  ;

  (**
     As usual with absorption laws the neutral for one law
     is absorbant for the other.
   *)
  proof of min_right_absorbes =
    <1>1 assume x : Self,
         prove !order_inf (!min, x)
         <2>1 prove !order_inf (!zero, !plus (!zero, x))
              by property inf_absorbes_add, order_inf
         <2>2 prove !equal (!plus (!zero, x), x)
              by property zero_is_neutral
         <2>3 prove !order_inf (!zero, x)
              by step <2>1, <2>2
              property order_inf_is_reflexive, order_inf_is_transitive, order_inf
         <2>f qed by step <2>3
                     property min_spec, order_inf_is_reflexive,
                       order_inf_is_transitive, order_inf
    <1>2 assume x : Self,
         prove !equal (!inf (!min, x), !min)
      by step <1>1 property equal_symmetric
      definition of order_inf
    <1>3 assume x : Self,
         prove !equal (!inf (x, !min), !min)
         by step <1>2 property equal_transitive, inf_commutes
    <1>9 qed by step <1>1, <1>2, <1>3 property order_inf
  ;

end
;;

(**
   These are kind of max, plus semi rings in the literature
 *)

species Additive_monoid_with_supremum =

  inherit Join_semi_lattice_with_min, Cancellative_additive_monoid;

  (** absorption law *)
  property sup_absorbes_add: all x y : Self,
    !order_sup (!plus (x, y), x);

  (** distributivity of plus over supremum *)
  property add_left_distributes_on_sup: all x y z : Self,
    !equal (!plus (x, !sup (y, z)), !sup (!plus (x, y), !plus (x, z)));

  property add_right_distributes_on_sup: all x y z : Self,
    !equal (!plus (!sup (x, y), z), !sup (!plus (x, z), !plus (y, z)));

  theorem add_distributes_on_sup: all x y z : Self,
    !equal(!plus (x, !sup(y, z)), !sup (!plus (x, y), !plus (x, z)))
      /\
    !equal(!plus (!sup (x, y), z), !sup (!plus (x, z), !plus (y, z)))
    proof =
      by property add_right_distributes_on_sup, add_left_distributes_on_sup
  ;


  (** we state that 0 is the minimal element of the monoid *)
  (* [rr]: may be we need more properties here *)
  let is_min = Self!is_zero;
  let min = Self!zero;
  theorem min_spec: !equal (!min, !zero)
    proof = by property equal_reflexive definition of min
  ;

  proof of min_is_right_neutral =
    <1>1 assume x : Self,
         prove !equal (!sup (x, !min), x)
         <2>1 prove !equal (x, !plus (!min, x))
              by property zero_is_neutral, equal_symmetric,
                          equal_transitive
                 definition of min
         <2>2 prove !order_sup (!plus (!min, x), !min)
                   by property sup_absorbes_add, order_sup, min
         <2>3 prove !order_sup (x, !min)
              by step <2>1, <2>2
                 property order_sup_is_reflexive, order_sup_is_transitive, order_sup, min
         <2>f qed by step <2>3
                     property equal_symmetric, min
                     definition of order_sup
    <1>f qed by step <1>1 property min
  ;

end
;;


(** additive monoids with a total ordering *)
species Ordered_additive_monoid =

  inherit Cancellative_additive_monoid, Ordered_set;

  (** adding an element keeps the ordering *)
  property order_compatible_with_plus : all x y z : Self,
    !leq (x, y) -> !leq (!plus (x, z), !plus (y, z));

  (** compatibility between + and &lt; *)
  property order_compatible_with_cancellation: all x y z : Self,
    !leq (!plus (x, z), !plus (y, z)) -> !leq (x, y);

end
;;


(** a monomial ordering has a total order
    compatible with addition *)
species Monomial_ordering =

  inherit Additive_monoid_with_infimum,
          Ordered_meet_semi_lattice,
          Additive_monoid_with_supremum,
          Ordered_join_semi_lattice,
          Regular_additive_monoid,
          Ordered_additive_monoid;

  (** adding always increase order *)
  theorem leq_absorbes_add: all x y : Self,
    !leq (x, !plus (x, y))
    proof =
      by property leq_refines_order_inf, inf_absorbes_add
  ;

  theorem geq_absorbes_add: all x y : Self, !geq (!plus (x, y), x)
   proof = by property sup_absorbes_add, geq_refines_order_sup
  ;

end
;;


(** an additive group is an additive monoid with total substraction *)
species Additive_group =

  inherit Cancellative_additive_monoid;

(*   let is_zero (x) = !equal (x, !zero); *)
(*   proof of is_zero_spec = *)
(*     by property equal_symmetric *)
(*     definition of is_zero; *)

 (** @mathml <minus/> *)
  signature opposite : Self -> Self;

  property opposite_is_opposite: all x : Self,
   !equal (!plus (x, !opposite (x)), !zero);

  proof of plus_is_left_regular =
    <1>1 assume x  : Self, y  : Self, z : Self,
         hypothesis H: !equal (!plus (x, y), !plus (x, z)),
         prove !equal (y, z)
         <2>1 prove !equal(!plus (!opposite (x), !plus (x, y)),
                           !plus (!opposite (x), !plus (x, z)))
              by hypothesis H
                property plus_right_substitution_rule
         <2>2 prove !equal (!plus (!opposite (x), !plus (x, y)),
                            !plus (!plus (!opposite (x), x), y))
              by property plus_is_associative
         <2>3 prove !equal (!plus (x, !opposite(x)), !zero)
              by property opposite_is_opposite
         <2>4 prove !equal (!plus (!opposite (x), x), !zero)
              by step <2>3
                 property plus_commutes, equal_transitive
         <2>5 prove !equal (!plus (!plus (!opposite (x), x), y),
                            !plus (!zero, y))
              by step <2>4
                 property plus_left_substitution_rule
         <2>6 prove !equal (!plus (!zero, y), y)
              by property zero_is_neutral
         <2>7 prove !equal (!plus (!opposite (x), !plus(x, y)), y)
              by step <2>2, <2>5, <2>6
                 property equal_transitive
         <2>8 prove !equal (!plus (!opposite (x), !plus (x, z)), z)
              (* [rr]: same as above *)
              assumed (* Because todo *)
         <2>f qed by step <2>1, <2>7, <2>8
                   property equal_transitive, equal_symmetric
    <1>2 conclude
  ;


  theorem opposite_is_unique: all z : Self, all x : Self,
     !equal (!plus (x, z), !zero) -> !equal (z, !opposite (x))
    proof =
      <1>1 assume x : Self, z : Self,
           hypothesis H: !equal (!plus(x, z), !zero),
           prove !equal (z, !opposite (x))
           <2>1 prove !equal (!opposite (x), z)
                <3>1 prove !equal (!plus (x, !opposite (x)),
                                   !plus (x, z))
                     <4>1 prove !equal (!plus (x, !opposite (x)), !zero)
                          by property opposite_is_opposite
                     <4>2 prove !equal (!plus(x, z), !zero)
                          by hypothesis H
                     <4>f qed by step <4>1, <4>2
                                 property equal_symmetric, equal_transitive
                <3>2 qed by step <3>1 property plus_is_regular
           <2>2 qed by step <2>1 property equal_symmetric
     <1>2 conclude
  ;

  theorem opposite_fixes_zero: !equal (!opposite (!zero), !zero)
    proof =
      <1>1 prove !equal (!plus (!zero, !zero), !zero)
           by property zero_is_neutral
      <1>f qed by step <1>1 property opposite_is_unique, equal_symmetric
  ;

  theorem opposite_is_additive: all x y : Self,
    !equal (!opposite (!plus (x, y)), !plus (!opposite (x), !opposite (y)))
    proof =
     <1>1 assume x : Self, y : Self,
          prove !equal (!plus (!plus (x, y),
                               !plus (!opposite (x), !opposite (y))),
                        !zero)
          <2>1 prove !equal (!plus (!plus(x, y),
                                    !plus (!opposite (x), !opposite(y))),
                             !plus (!plus(x, y), !plus (!opposite (y),
                                                        !opposite (x))))
               by property plus_commutes, plus_right_substitution_rule
          <2>2 prove !equal (!plus (!plus (x, y),
                                    !plus (!opposite (y), !opposite (x))),
                             !plus (x, !plus (y, !plus (!opposite(y),
                                                        !opposite (x)))))
               by property plus_is_associative, equal_symmetric
          <2>3 prove !equal (!plus (x, !plus (y, !plus (!opposite (y),
                                                        !opposite (x)))),
                             !plus (x, !plus (!plus (y, !opposite (y)),
                                              !opposite (x))))
                 by property plus_is_associative, plus_right_substitution_rule
          <2>4 prove !equal (!plus (!plus (y, !opposite (y)), !opposite (x)),
                             !plus (!zero, !opposite (x)))
                   by property opposite_is_opposite, plus_left_substitution_rule
          <2>5 prove !equal (!plus (x, !plus (!plus(y, !opposite (y)),
                                              !opposite (x))),
                             !plus (x, !plus (!zero, !opposite (x))))
                     by step <2>4 property plus_right_substitution_rule
          <2>6 prove !equal (!plus (x, !plus (!zero, !opposite (x))),
                             !plus (x, !opposite (x)))
               by property zero_is_neutral, plus_right_substitution_rule
          <2>f qed by step <2>1, <2>2, <2>3, <2>5, <2>6
                      property equal_transitive, opposite_is_opposite
     <1>f qed by step <1>1 property opposite_is_unique, equal_symmetric
  ;

  theorem opposite_substitution_rule: all x y : Self,
    !equal (x, y) -> !equal (!opposite (x), !opposite (y))
    proof =
     <1>1 assume x : Self, y : Self,
          hypothesis H: !equal (x, y),
          prove !equal(!plus(x, !opposite(y)), !zero)
          <2>1 prove !equal (!plus (x, !opposite (y)),
                             !plus (y, !opposite (y)))
               by hypothesis H property plus_left_substitution_rule
          <2>2 prove !equal (!plus (y, !opposite (y)), !zero)
               by property opposite_is_opposite
          <2>f qed by step <2>1, <2>2 property equal_transitive
     <1>f qed by step <1>1 property opposite_is_unique, equal_symmetric
  ;

  (** @mathml <minus/> *)
  let minus(x, y) = !plus (x, !opposite (y));

  (** minus defines a subtraction *)
  theorem minus_left_substracts: all x y : Self,
    !equal(x, !minus (!plus(x, y), y))
    proof =
      <1>1 assume x : Self, y : Self,
           prove !equal (x, !plus (!plus (x, y), !opposite (y)))
           <2>1 prove !equal (!plus (x, !plus (y, !opposite (y))),
                              !plus (!plus (x, y), !opposite (y)))
               by property plus_is_associative
           <2>2 prove !equal (!plus (y, !opposite (y)), !zero)
                by property opposite_is_opposite
           <2>3 prove !equal(!plus(x, !plus(y, !opposite(y))),
                             !plus(x, !zero))
                by step <2>2 property plus_right_substitution_rule
           <2>4 prove !equal (!plus (x, !zero), x)
                by property zero_is_neutral
           <2>f qed by step <2>1, <2>3, <2>4
                       property equal_symmetric, equal_transitive
      <1>f qed by step <1>1 definition of minus
  ;

  theorem minus_right_substracts: all x y : Self,
    !equal (!plus (x, !minus (y, x)), y)
    proof =
      <1>1 assume x : Self, y : Self,
           prove !equal (!plus (x, !plus (y, !opposite (x))), y)
           <2>1 prove !equal (!plus(x, !plus(y, !opposite(x))),
                              !plus (x, !plus (!opposite (x), y)))
                by property plus_commutes, plus_right_substitution_rule
           <2>2 prove !equal (!plus (x, !plus (!opposite (x), y)),
                              !plus (!plus(x, !opposite (x)), y))
                by property plus_is_associative
           <2>3 prove !equal (!plus (!plus (x, !opposite (x)), y),
                              !plus (!zero, y))
                by property opposite_is_opposite, plus_left_substitution_rule
           <2>f qed by property equal_transitive
                    step <2>1, <2>2, <2>3
                    property zero_is_neutral
      <1>f qed by step <1>1 definition of minus
  ;

  theorem minus_left_substitution_rule: all x y z : Self,
    !equal (x, y) -> !equal (!minus (x, z), !minus (y, z))
    proof =
      by property plus_left_substitution_rule definition of minus
  ;

  theorem minus_right_substitution_rule: all x y z : Self,
    !equal (y, z) -> !equal (!minus (x, y), !minus (x, z))
    proof =
      by property plus_right_substitution_rule, opposite_substitution_rule
         definition of minus
  ;

end
;;


(** In an ordered group we have a total ordering compatible with addition *)
species Ordered_additive_group =

  inherit Additive_group, Ordered_additive_monoid;

  (** this is the sign function which split the group into
      the set of negative elements ,
      the zero element and
      the set of positive elements *)
  signature sign : Self -> int;

  let leq (x, y) = !sign (!minus (x, y)) <= 0;

  proof of total_order = assumed (* Because todo *);
  -- proof of lt_is_not_leq = assumed;

  let max (x, y) = if !lt (x, y) then y else x;
  let min (x, y) = if !lt (x, y) then x else y;
  let is_zero (x) = Self!sign (x) =0x 0;

  proof of order_compatible_with_cancellation = assumed (* Because todo *);
 (* NdV: 9 Feb 2004: the proof below is rejected as incomplete by Coq.
    I feel that we have to introduce congruence property over opposite to
    achieve the proof. *)
  (* [rr]: Hum, this looks wrong to me : x-y <= 0 => x <= y *)
  proof of leq_reflexive =
    (*
      property opposite_is_opposite
      definition of leq minus, is_zero
    *)
      assumed (* Because todo *);
    (*
      definition of minus_substracts, plus_compat_with_order
    {*
    Intro x.
    Unfold abst_leq; Unfold ordered_additive_group__leq.
    Unfold abst_minus; Unfold additive_group__minus.
    Unfold int_leq.
    Elim (Z_le_dec (abst_sign (abst_plus x (abst_opposite x))) `0`).
    Intro;Simpl;Auto.
    Intro;Simpl.
    Generalize (abst_opposite_is_opposite x).
    Unfold abst_is_zero; Unfold ordered_additive_group__is_zero.
    Unfold int_eq.
    Elim (Z_eq_dec (abst_sign (abst_plus x (abst_opposite x))) `0`).
    Intro;Simpl;Auto with *.
    Intro;Simpl;Auto with *.
    *};
   *)

  proof of leq_transitive = assumed (* Because todo *);

  (* [rr]: again, looks wrong to me : x <= y => x-y <= 0, y <= x => y-x <= 0*)
   proof of leq_antisymmetric =
  (*   definition of minus_substracts, plus_compat_with_order *)
     assumed (* Because todo *);
  (*
   definition of equal
   {*
   Intros.
   Unfold abst_equal; Unfold ordered_set__equal.
   Unfold __g_and_b.
   Auto with *.
   *}
  *)

end
;;
