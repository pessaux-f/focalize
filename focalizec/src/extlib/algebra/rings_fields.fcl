(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6   -  INRIA Rocquencourt          *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: rings_fields.fcl,v 1.17 2009-09-07 13:16:08 rr Exp $ *)

(** Definitions for Rings, Modules, Algebras and Fields. *)

open "basics";;
open "additive_law";;
open "multiplicative_law";;
open "weak_structures";;

(** 
   Pseudo rings, Non unital Rings or Rngs
*)

species Rng =

  inherit Additive_group, Semi_rng;

end
;;

(** Rings are additive groups and multiplicative monoids *)
species Ring =

  inherit Additive_group, Semi_ring;

  let zero = Self!minus (Self!one, Self!one);

(*   proof of zero_is_neutral = *)
(*     definition of zero *)
(*     property one_is_left_neutral, one_is_right_neutral, *)
(*       mult_left_distributes_on_plus *)
(*     assumed (* Todo *); *)


  proof of zero_left_absorbes =
  <1>1 assume x : Self,
       prove !equal (!mult (!zero, x), !zero)
   <2>2 prove !equal (!mult (!plus (!zero, !one), x), x)
        by property zero_is_neutral, mult_left_substitution_rule,
          one_is_left_neutral, equal_transitive
   <2>3 prove !equal (!mult (!plus (!zero, !one), x),
                     !plus (!mult (!zero, x), !mult (!one, x)))
        by property mult_right_distributes_on_plus
   <2>4 prove !equal (!plus (!mult (!zero, x), x), x)
        by step <2>2, <2>3 property plus_right_substitution_rule,
           equal_symmetric, equal_transitive, one_is_left_neutral
   <2>5 prove !equal (!plus (!mult (!zero, x), x),
                     !plus (!zero, x))
        by step <2>4
        property zero_is_neutral, equal_transitive, equal_symmetric
   <2>f qed by step <2>5 property plus_is_regular
  <1>2 conclude
  ;

  proof of zero_right_absorbes =
  <1>1 assume x : Self,
       prove !equal (!mult (x, !zero), !zero)
   <2>0 prove !equal (!mult (x, !plus (!zero, !one)), x)
     <3>1 prove !equal (!plus (!zero, !one), !one)
          by property zero_is_neutral
     <3>2 prove !equal (!mult (x, !one), x)
          by property one_is_right_neutral
     <3>4 qed
        by step <3>1, <3>2
        property mult_right_substitution_rule, equal_transitive
   <2>1 prove !equal (!plus (x, !opposite (x)), !zero)
        by property opposite_is_opposite
   <2>2 prove !equal (!plus (!mult (x, !plus (!zero, !one)), !opposite (x)),
                      !zero)
        by step <2>0, <2>1
        property plus_left_substitution_rule, equal_transitive
   <2>3 prove !equal (!plus (!plus (!mult (x, !zero),
                                    !mult(x, !one)), !opposite (x)),
                      !zero)
     <3>1 prove !equal (!plus (!mult (x, !zero), !mult(x, !one)),
                       !mult (x, !plus (!zero, !one)))
          by property mult_left_distributes_on_plus, equal_symmetric
     <3>9 qed by step <2>2, <3>1
             property plus_left_substitution_rule, equal_transitive
   <2>4 prove !equal (!plus (!mult (x, !zero), !plus (!mult (x, !one),
                                                      !opposite (x))), !zero)
        by step <2>3 property plus_is_associative, equal_transitive
   <2>7 prove !equal (!plus (!mult (x, !one), !opposite (x)), !zero)
        (*
        by <2>1, !one_is_right_neutral, !plus_left_substitution_rule,
           !equal_transitive, !equal_symmetric
        *)
        assumed (* Because todo *)
   <2>8 prove !equal (!plus (!mult (x, !zero), !zero), !zero)
       by step <2>4, <2>7
       property plus_right_substitution_rule, equal_transitive, equal_symmetric
   <2>9 qed
       by step <2>8
          property zero_is_neutral, equal_transitive, equal_symmetric
  <1>2 conclude
  ;

end
;;

(* let of_int = let dicho = dichotomy(Self,Self!plus,Self!zero) in *)
(*   fun n -> *)
(*     if #int_lt(n,0)  *)
(*     then Self!opposite(dicho!dichot(Self!one,#int_opp(n))) *)
(*     else dicho!dichot(Self!one,n); *)


(** Modules are a sort of vector space over rings *)
species Module (R is Ring) =

  inherit Left_semi_module (R), Additive_group;

  theorem zero_left_absorbes: all x : Self,
    !equal (!mult (R!zero, x), !zero)
    proof = assumed (* Because todo *);

end
;;

(** A commutative ring has commutative multiplication *)
species Commutative_ring =

  inherit Commutative_semi_ring, Ring;

end
;;

(** Ordered Rings have an ordering compatible with plus and mult *)
species Ordered_ring =

  inherit Ordered_additive_group, Commutative_ring;

  property mult_compat_with_order: all x y z : Self,
    !leq (!zero, x) -> !leq (y, z) -> !leq (!mult (x, y), !mult (x, z));

  let abs (x) = if !sign (x) < 0 then !opposite (x) else x;

end
;;


(** 

A pseudo algebra is like an ordinary algebra but without multiplicative unity

*)
species Pseudo_algebra(R is Commutative_ring) =

  inherit Rng, Sem_algebra(R);

  let opposite (x) =
    let under_minus_un = R!opposite (R!one) in
      Self!module_mult (under_minus_un, x);

  proof of opposite_is_opposite = assumed (* Because todo *);

end
;;

(** R-algebras are both R-modules and rings *)
species Algebra(R is Commutative_ring) =

  inherit Ring, Semi_algebra(R), Pseudo_algebra(R);

end
;;

(** Commutative algebras  are a distinguished class of algebras *)
species Commutative_algebra (R is Commutative_ring) =

  inherit Algebra(R), Commutative_semi_algebra (R);

end
;;

(** Integral domain have a partial division *)
species Integral_domain =

  inherit Integral_semi_ring,
          Commutative_ring,
          Torsion_free_semi_module (Self);

  (* Ajout de BIBIN Lazar *)
  let unit_canonical (x : Self) : Self = x;
  (* ax = ay => x=y ou a=0 <-> a(x-y)=0 *)

  proof of mult_is_left_regular = assumed (* Because todo *);

end
;;

(** Ordered integral domains *)
species Ordered_domain =

  inherit Ordered_ring, Integral_domain;

end
;;


(** a torsion free algebra is both a faithfull R-module and an R-Algebra *)
species Torsion_free_algebra (R is Integral_domain) =

  inherit Torsion_free_semi_algebra (R), Algebra (R), Ring;

  property lift_is_injective: all a : R,
   !is_zero (!lift (a)) -> R!is_zero (a);

  (* see argument in torsion free modules *)
  proof of module_mult_is_regular = assumed (* Because todo *);

end
;;

(** module with external division *)
species Division_module (R is Ring) =

  inherit Division_semi_module (R), Module (R);

end
;;

(** in a Gcd Domain one can find a common divisor of two elements *)
species Gcd_domain =

  inherit Factorial_semi_ring, Factorial_semi_module (Self), Integral_domain;

end
;;

(** ordered gcd domains *)
species Ordered_gcd_domain =

  inherit Gcd_domain, Ordered_domain;

end
;;



species Euclidean_domain =

  inherit Euclidean_semi_ring, Gcd_domain;

  let rec bez_aux (p1, c11, c12, p2, c21, c22) =
    if Self!is_zero (p2) then weak_structures#cr_br (p1, c11, c12) else
    let qr = Self!quo_rem (p1, p2) in
    let q =  weak_structures#quot (qr) in
    let p3 = weak_structures#rema (qr) in
     Self!bez_aux
       (p2, c21, c22, p3,
        Self!minus (c11, Self!mult (q, c21)),
        Self!minus (c12, Self!mult (q, c22)));

  let bezout (p, q) =
    Self!bez_aux (p, Self!one, Self!zero, q, Self!zero, Self!one);

  theorem bezout_relation: all x y : Self, all b : bezout_res (Self),
    !equal
      (weak_structures#gcd (!bezout (x, y)),
       !plus
          (!mult (weak_structures#coef1 (!bezout (x, y)), x),
           !mult (weak_structures#coef2 (!bezout (x, y)), y)))
  proof = assumed (* Because todo *);

end
;;


(** a skew field is a non commutative field *)
species Skew_field =

  inherit Ring, Division_monoid;

  property div_is_complete: all x y : Self,
   !is_zero (y) \/ !equal (x, !mult (y, !div (x, y)));

  proof of div_divides =
    property div_is_complete
    assumed (* Because todo *);

end
;;

species Vector_space (F is Skew_field) =

  inherit Division_module (F);

  let opposite (x) = Self!mult (F!opposite (F!one), x);
  proof of opposite_is_opposite = assumed (* Because todo *);

end
;;

species Field =

  inherit Skew_field,
          Commutative_ring,
          Gcd_domain (* ,
           division_module(Self)*);

  (** in a field we only have two association classes  *)
  let gcd (x, y) =
     if basics#( && ) (Self!is_zero (x), Self!is_zero (y)) then Self!zero
     else Self!one;

  proof of gcd_divides =
    definition of gcd
    assumed (* Todo *);

  proof of divisor_is_multiple_of_gcd =
    definition of gcd
    assumed (* Because todo *);

  let exquo (x, y) =
    if Self!is_zero(y) then basics#Failed
    else basics#Unfailed (Self!div (x, y));

  proof of exquo_divides =
    definition of exquo
    assumed (* Because todo *);

end
;;

(** real fields, in a real field -1 is no a sum of squares *)
species Real_field =

  inherit Field;

end
;;


(** ordered fields *)
species Ordered_field =

  inherit Ordered_gcd_domain, Real_field;

end
;;

(*                                                                        *)
(*                Ouf !                                                   *)
(*                                                                        *)
