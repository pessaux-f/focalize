(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: unix.fcl,v 1.13 2009-05-16 17:53:00 weis Exp $ *)

(**
   @title Implementation of the Unix model
   @author Melanie Jacquel, Diane Pipon
 *)

use "basics";;
open "basics";;
use "sets_orders";;
open "sets_orders";;
use "ensembles_finis";;
open "ensembles_finis";;
use "access_control";;
open "access_control";;

(** Unix implementation *)

species S_set_of (A is Setoid) =

  inherit Set_of (A), Liste (A);

  let rec for_all (l, p) =
     match l with
     | [] -> true
     | h :: t -> and_b (p (h), for_all (t, p));

  let print (l) =
    let rec aux (ls) =
       match ls with
       | [] -> "]"
       | h :: t ->
         match t with
         | [] -> A!print (h) ^ "]"
         | _underscore ->
           A!print (h) ^ ",\n                     " ^
           aux (t) in
    "[" ^ aux (l);

  let print_mod (l) =
    let rec aux (ls) =
       match ls with
       | [] -> ""
       | h :: t ->
           match t with
           | [] -> A!print (h) ^ ""
           | _underscore -> A!print (h) ^ "" ^ aux (t) in
    "[" ^ aux (l);

  proof of equal_prop = assumed {* Because todo *};

  proof of singleton_prop = assumed {* Because todo *};

end
;;

species S_setoid =

  inherit Setoid;

  representation = int * string;

  let create (n in int, s in string) in Self = (n, s);

  let equal (s1, s2) =  fst (s1) = fst (s2);

  let element = (0, "element");

  let print (s) = snd (s);

  proof of equal_reflexive =
    by definition of equal;

  proof of equal_symmetric =
    by definition of equal;

  proof of equal_transitive =
    by definition of equal;

end
;;

species S_subjects =

  inherit Subjects, S_setoid;

end
;;

species S_objects =

  inherit Objects, S_setoid;

end
;;

species S_access_mode =

  inherit Access_mode, S_setoid;

  let read = (1,  "r");

  let write = (2,  "w");

  let execute in Self = (3,  "x");

end
;;

species S_access
          (S_sub is S_subjects,
           S_obj is S_objects,
           S_acc_mod is S_access_mode) =

  inherit Access (S_sub, S_obj, S_acc_mod);

  representation = (S_sub * (S_obj * S_acc_mod));

  let create (s, o, m) = (s, (o, m));

  let get_s (a) = fst (a);

  let get_o (a) = fst (snd (a));

  let get_m (a) = snd (snd (a));

  let equal (a1, a2) =
    and_b
      (and_b
        (S_sub!equal (get_s (a1), get_s (a2)),
         S_obj!equal (get_o (a1), get_o (a2))),
        S_acc_mod!equal (get_m (a1), get_m (a2))
      );

  let element = create (S_sub!element, S_obj!element, S_acc_mod!element);

  let print (a) =
    "(" ^ S_sub!print (get_s (a)) ^
    "," ^ S_obj!print (get_o (a)) ^
    "," ^ S_acc_mod!print (get_m (a)) ^
    ")";

  proof of equal_reflexive =
    by property S_sub!equal_reflexive,
                S_obj!equal_reflexive,
                S_acc_mod!equal_reflexive
       definition of equal
  ;

  proof of equal_symmetric =
    by property S_sub!equal_symmetric,
                S_obj!equal_symmetric,
                S_acc_mod!equal_symmetric
       definition of equal
  ;

  proof of equal_transitive =
    by property S_sub!equal_transitive,
                S_obj!equal_transitive,
                S_acc_mod!equal_transitive
       definition of equal
  ;

  proof of access_equal = assumed {* Because todo *};

end
;;

species S_decisions =

  inherit Decisions, S_setoid;

  let yes = (1, "yes");

  let no = (2, "no");

  proof of yes_is_not_no = assumed {* Because todo *};

end
;;

species S_get_release =

  inherit S_setoid;

  let get in Self = (1, "+");

  let rel in Self = (2, "-");

  let active in Self = (3, "+active");

  let inactive in Self = (4, "-active");

  let p_right  in Self = (5, "+droit");

  let m_right  in Self = (6, "-droit");

  let chown in Self = (7, "+chown");

  let chgrp in Self = (8, "+chgrp");

  let p_group in Self = (9, "+group");

  let m_group in Self = (10, "-group");

end
;;

species S_groups =

  inherit Groups, S_setoid;

  let curry in Self = (1, "curry ");

  let rsa in Self = (2, "rsa   ");

  let bidule in Self = (3, "bidule");

  let truc in Self = (4, "truc  ");

end
;;

species S_rho_unix (S_g is S_groups) =

  inherit Rho_unix (S_g), S_setoid;

end
;;

species S_rights =

  inherit Rights, S_setoid;

  let d_p = (1, "dp");

  let d_g = (2, "dg");

  let d_o = (3, "do");

end
;;

species S_requests_unix
  (S is S_subjects, O is S_objects, M is S_access_mode,
   Sgr is S_get_release, G is S_groups, Z is S_rights) =

  inherit Requests_unix (S, O, M, G, Z);

  representation = (Sgr * (S * (O * (M * (G * (Z * S))))));

  let create
        (rda in Sgr,
         sa in S,
         oa in O,
         ma in M,
         ga in G,
         za in Z,
         sa2 in S) in Self =
    (rda, (sa, (oa, (ma, (ga, (za, sa2))))));

  let get_gr (rg in Self) in Sgr = fst (rg);

  let get_s (rg) = fst (snd (rg));

  let get_o (rg) = fst (snd (snd (rg)));

  let get_m (rg) = fst (snd (snd (snd (rg))));

  let get_g (rg) = fst (snd (snd (snd (snd (rg)))));

  let get_z (rg) = fst (snd (snd (snd (snd (snd (rg))))));

  let get_s2 (rg) = snd (snd (snd (snd (snd (snd (rg))))));

  let is_get(rg) = Sgr!equal (Sgr!get, get_gr (rg));

  let is_rel(rg) = Sgr!equal (Sgr!rel, get_gr (rg));

  let equal (rg1, rg2) =
    and_b
      (and_b
         (and_b
            (Sgr!equal
               (get_gr (rg1), get_gr (rg2)),
             and_b
               (S!equal
                  (get_s (rg1), get_s (rg2)),
                O!equal
                  (get_o (rg1), get_o (rg2))
               )
            ),
          M!equal
            (get_m (rg1), get_m (rg2))
         ),
       and_b
         (G!equal
            (get_g (rg1), get_g (rg2)),
          and_b
            (Z!equal
               (get_z (rg1), get_z (rg2)),
             S!equal
               (get_s2 (rg1), get_s2 (rg2))
            )
         )
      );

  let is_active (rg) = Sgr!equal (Sgr!active, get_gr (rg));

  let is_inactive (rg) = Sgr!equal (Sgr!inactive, get_gr (rg));

  let is_add_right (rg) = Sgr!equal (Sgr!p_right, get_gr (rg));

  let is_rm_right (rg) = Sgr!equal (Sgr!m_right, get_gr (rg));

  let is_d_p (rg) =
    and_b
      (or_b
         (is_add_right (rg), is_rm_right(rg)),
       Z!equal (get_z (rg), Z!d_p));

  let is_d_g (rg) =
    and_b
      (or_b
         (is_add_right (rg), is_rm_right (rg)),
       Z!equal (get_z (rg), Z!d_g));

  let is_d_o (rg) =
    and_b
      (or_b
          (is_add_right (rg), is_rm_right (rg)),
       Z!equal (get_z (rg), Z!d_o));

  let is_chown (rg) = Sgr!equal (Sgr!chown, get_gr (rg));

  let is_chgrp (rg) = Sgr!equal (Sgr!chgrp, get_gr (rg));

  let is_add_group (rg) = Sgr!equal (Sgr!p_group, get_gr (rg));

  let is_rm_group (rg) = Sgr!equal (Sgr!m_group,  get_gr (rg));

  let element =
    create (Sgr!get,
            S!element,
            O!element,
            M!element,
            G!element,
            Z!element,
            S!element);

  let print (rg) =
    "<" ^ Sgr!print (get_gr (rg)) ^
    ", " ^ S!print (get_s (rg)) ^
    ", " ^ O!print (get_o (rg)) ^
    ", " ^ M!print (get_m (rg)) ^
    ">";

  let print_adm (rg) =
    if or_b (is_active (rg), is_inactive (rg)) then
      "<" ^ Sgr!print (get_gr (rg)) ^
      ", " ^ S!print (get_s (rg)) ^
      ", " ^ G!print (get_g (rg)) ^
      ">"
    else if or_b (is_add_right (rg), is_rm_right (rg)) then
      "<" ^ Sgr!print (get_gr (rg)) ^
      ", " ^ S!print (get_s (rg)) ^
      ", " ^ O!print (get_o (rg)) ^
      ", " ^ M!print (get_m (rg)) ^
      ", " ^ Z!print (get_z (rg)) ^
      ">"
    else if is_chown (rg) then
      "<" ^ Sgr!print (get_gr (rg)) ^
      ", " ^ S!print (get_s (rg)) ^
      ", " ^ O!print (get_o (rg)) ^
      ", " ^ S!print (get_s2 (rg)) ^
      ">"
    else if is_chgrp (rg) then
      "<" ^ Sgr!print (get_gr (rg)) ^
      ", " ^ S!print (get_s (rg)) ^
      ", " ^ O!print (get_o (rg)) ^
      ", " ^ G!print (get_g (rg)) ^
      ">"
    else
      "<" ^ Sgr!print (get_gr (rg)) ^
      ", " ^ S!print (get_s (rg)) ^
      ", " ^ S!print (get_s2 (rg)) ^
      ", " ^ G!print (get_g (rg)) ^
      ">";

  proof of equal_reflexive =
    by property S!equal_reflexive,
                O!equal_reflexive,
                M!equal_reflexive,
                G!equal_reflexive,
                Z!equal_reflexive,
                Sgr!equal_reflexive
       definition of equal
  ;

  proof of equal_symmetric =
    by property S!equal_symmetric,
                O!equal_symmetric,
                M!equal_symmetric,
                G!equal_symmetric,
                Z!equal_symmetric,
                Sgr!equal_symmetric
       definition of equal
  ;

  proof of equal_transitive =
    by property S!equal_transitive,
                O!equal_transitive,
                M!equal_transitive,
                G!equal_transitive,
                Z!equal_transitive,
                Sgr!equal_transitive
       definition of equal
  ;

  proof of get_or_rel = assumed {* Because todo *};

  proof of get_is_not_rel = assumed {* Because todo *};

end
;;

species S_models_unix
  (S_grp is S_groups,
   S_rh is S_rho_unix (S_grp),
   S_sub is S_subjects,
   S_obj is S_objects,
   S_acc_mod is S_access_mode,
   S_acc is S_access (S_sub, S_obj, S_acc_mod),
   S_set_acc is S_set_of (S_acc),
   S_set_mod is S_set_of (S_acc_mod),
   S_set_grp is S_set_of (S_grp),
   S_z is S_rights,
   S_gr is S_get_release,
   S_req is
     S_requests_unix
       (S_sub, S_obj, S_acc_mod,
        S_gr, S_grp, S_z),
   S_dec is S_decisions) =

  inherit
    Models_unix
      (S_grp, S_rh, S_sub, S_obj, S_acc_mod, S_acc,
       S_set_acc, S_set_mod, S_set_grp, S_z, S_req, S_dec);

  representation =
    (S_set_acc * (list (S_grp) * (* ag *)
      (list (S_sub)  * (* su *)
       ((S_obj -> S_sub) * (* f_p *)
        ((S_obj -> S_grp) * (* f_g *)
         ((S_sub -> S_set_grp) * (* f_s *)
          ((S_obj -> S_set_mod) * (* f_d_p *)
           ((S_obj -> S_set_mod) * (* f_d_g *)
            (S_obj -> S_set_mod))))))))); (* f_d_o *)

  let create
    (s in S_set_acc,
     a in list (S_grp),
     sup in list (S_sub),
     fp in (S_obj -> S_sub),
     fg in (S_obj -> S_grp),
     fs in (S_sub -> S_set_grp),
     fdp in (S_obj -> S_set_mod),
     fdg in (S_obj -> S_set_mod),
     fdo in (S_obj -> S_set_mod)) in Self =
    (s, (a, (sup, (fp, (fg, (fs, (fdp, (fdg, fdo))))))));

  let lambda (st) = fst (st);

  let upsilon (st in Self)
      in (list (S_grp) * (* ag *)
          (list (S_sub) * (* su *)
           ((S_obj -> S_sub) * (* f_p *)
             ((S_obj -> S_grp) * (* f_g *)
              ((S_sub -> S_set_grp) * (* f_s *)
               ((S_obj -> S_set_mod) * (* f_d_p *)
                ((S_obj -> S_set_mod) * (* f_d_g *)
                 (S_obj -> S_set_mod)))))))) =
    snd (st);

  let add (st, ac) =
    (S_set_acc!union (lambda (st), S_set_acc!singleton (ac)), upsilon (st));

  let del (st, ac) =
    (S_set_acc!diff (lambda (st), S_set_acc!singleton (ac)), upsilon (st));

  let ag (st, grp) =
    let rec aux (l) =
      match l with
      | [] -> false
      | h :: t ->
        if S_grp!equal (h, grp)
        then true
        else aux (t) in
    aux (fst (upsilon (st)));

  let su (st, sub) =
    let rec aux (l) =
      match l with
      | [] -> false
      | h :: t ->
        if S_sub!equal (h, sub)
        then true
        else aux (t) in
    aux (fst (snd (upsilon (st))));

  let f_p (st, obj) =
    fst (snd (snd (upsilon (st)))) (obj);

  let f_g (st, obj) =
    fst (snd (snd (snd (upsilon (st))))) (obj);

  let f_s (st, sub) =
    fst (snd (snd (snd (snd (upsilon (st)))))) (sub);

  let f_d_p (st, obj) =
    fst (snd (snd (snd (snd (snd (upsilon (st))))))) (obj);

  let f_d_g (st, obj) =
    fst (snd (snd (snd (snd (snd (snd (upsilon (st)))))))) (obj);

  let f_d_o (st, obj) =
    snd (snd (snd (snd (snd (snd (snd (upsilon (st)))))))) (obj);

  let add_ag (st, grp) =
    (lambda (st),
     (grp :: fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (f_s (st),
          (f_d_p (st),
           (f_d_g (st),
            f_d_o (st)))))))));

  let rm_ag (st, grp) =
    let rec aux (li, g) =
      match li with
      | [] -> []
      | h :: t->
        if S_grp!equal (h, g)
        then t
        else h :: aux (t, g) in
    (lambda (st),
     (aux (fst (upsilon (st)), grp),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (f_s (st),
          (f_d_p (st),
           (f_d_g (st),
            f_d_o (st)))))))));

  let add_su (st, s) =
    (lambda (st), (fst (upsilon (st)),
     (s :: fst (snd (upsilon (st))),
      (f_p (st),
       (f_g (st),
        (f_s (st),
         (f_d_p (st),
          (f_d_g (st),
           f_d_o (st)))))))));

  let rm_su (st, s) =
    let rec aux (li, s) =
      match li with
      | [] -> []
      | h :: t->
        if S_sub!equal (h, s)
        then t
        else h :: aux (t, s) in
    (lambda (st),
     (fst (upsilon (st)),
      (aux (fst (snd (upsilon (st))), s),
       (f_p (st),
        (f_g (st),
         (f_s (st),
          (f_d_p (st),
           (f_d_g (st),
            f_d_o (st)))))))));

  let chown (st, o, s) =
    let aux (st, ob) =
      if S_obj!equal (o, ob)
      then s
      else f_p (st, ob) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (aux (st),
        (f_g (st),
         (f_s (st),
          (f_d_p (st),
           (f_d_g (st),
            f_d_o (st)))))))));

  let chgrp(st, o, g) =
    let aux (st, ob) =
      if S_obj!equal (o, ob)
      then g
      else f_g (st, ob) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p(st),
        (aux (st),
         (f_s (st),
          (f_d_p (st),
           (f_d_g (st),
            f_d_o (st)))))))));

  let add_g_s (st, s, g) =
    let aux (st, sub) =
      if S_sub!equal (s, sub)
      then S_set_grp!union (f_s (st, s), S_set_grp!singleton (g))
      else f_s (st, sub) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (aux (st),
          (f_d_p (st),
           (f_d_g (st),
            f_d_o(st)))))))));

  let rm_g_s (st, s, g) =
    let aux (st, sub) =
      if S_sub!equal (s, sub)
      then S_set_grp!diff (f_s (st, s), S_set_grp!singleton (g))
      else f_s (st, sub) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (aux (st),
          (f_d_p (st),
           (f_d_g (st),
            f_d_o (st)))))))));

  let add_d_p (st, o, m) =
    let aux (st, ob) =
      if S_obj!equal (o, ob)
      then S_set_mod!union (f_d_p (st, o), S_set_mod!singleton (m))
      else f_d_p (st, ob) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (f_s (st),
          (aux (st),
           (f_d_g (st),
            f_d_o (st)))))))));

  let rm_d_p (st, o, m) =
    let aux (st, ob) =
      if S_obj!equal (o, ob)
      then S_set_mod!diff (f_d_p (st, o), S_set_mod!singleton (m))
      else f_d_p (st, ob) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (f_s (st),
          (aux (st),
           (f_d_g (st),
            f_d_o (st)))))))));

  let add_d_g (st, o, m) =
    let aux (st, ob) =
      if S_obj!equal (o, ob)
      then S_set_mod!union (f_d_g (st, o), S_set_mod!singleton (m))
      else f_d_g (st, ob) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (f_s (st),
          (f_d_p (st),
           (aux (st),
            f_d_o(st)))))))));

  let rm_d_g (st, o, m) =
    let aux (st, ob) =
      if S_obj!equal (o, ob)
      then S_set_mod!diff (f_d_g (st, o), S_set_mod!singleton (m))
      else f_d_g (st, ob) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (f_s (st),
          (f_d_p (st),
           (aux (st),
            f_d_o (st)))))))));

  let add_d_o (st, o, m) =
    let aux (st, ob) =
      if S_obj!equal (o, ob)
      then S_set_mod!union (f_d_o (st, o), S_set_mod!singleton (m))
      else f_d_o (st, ob) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (f_s (st),
          (f_d_p (st),
           (f_d_g (st),
            aux (st)))))))));

  let rm_d_o (st, o, m) =
    let aux (st, ob) =
      if S_obj!equal (o, ob)
      then S_set_mod!diff (f_d_o (st, o), S_set_mod!singleton (m))
      else f_d_o (st, ob) in
    (lambda (st),
     (fst (upsilon (st)),
      (fst (snd (upsilon (st))),
       (f_p (st),
        (f_g (st),
         (f_s (st),
          (f_d_p (st),
           (f_d_g (st),
            aux (st)))))))));

  let equal (st1, st2) = S_set_acc!equal (lambda (st1), lambda (st2));

  let element =
    create
      (S_set_acc!vide,
       [],
       [],
       (function _s_obj -> S_sub!element),
       (function _s_obj -> S_grp!element),
       (function _s_sub -> S_set_grp!vide),
       (function _s_obj -> S_set_mod!vide),
       (function _s_obj -> S_set_mod!vide),
       (function _s_obj -> S_set_mod!vide));

  let print (st) = S_set_acc!print (lambda (st));

  let print_ag (st) =
    let rec aux (l) =
      match l with
      | [] -> ""
      | h :: t -> S_grp!print (h) ^ ", " ^ aux (t) in
    "[" ^ aux (fst (upsilon (st))) ^ "]\n";

  let print_right (set_mod, r in S_acc_mod) =
    if S_set_mod!est_element (r, set_mod)
    then S_acc_mod!print (r)
    else "-";

  let print_set_right (set_mod) =
    print_right (set_mod, S_acc_mod!read) ^
    print_right (set_mod, S_acc_mod!write) ^
    print_right (set_mod, S_acc_mod!execute);

  let print_ls (st, obj) =
    print_set_right (f_d_p (st, obj)) ^ " " ^
    print_set_right (f_d_g (st, obj)) ^ " " ^
    print_set_right (f_d_o (st, obj)) ^ " " ^
    S_sub!print (f_p (st, obj)) ^ " " ^
    S_grp!print (f_g (st, obj)) ^ " " ^
    S_obj!print (obj) ^ "\n";

  proof of equal_reflexive =
    by property S_set_acc!equal_reflexive
       definition of equal
  ;

  proof of equal_symmetric =
    by property S_set_acc!equal_symmetric
       definition of equal
  ;

  proof of equal_transitive =
    by property S_set_acc!equal_transitive
       definition of equal
  ;

  proof of lambda_prop = by definition of equal
  ;

  proof of secure_state = assumed {* Because todo *};

  proof of right_substitution = assumed {* Because todo *};

  proof of left_substitution = assumed {* Because todo *};

  proof of del_mem = assumed {* Because todo *};

  proof of del_prop = assumed {* Because todo *};

  (*proof of del_prop_bis = assumed {* Because todo *};*)

  proof of add_mem = assumed {* Because todo *};

  proof of add_prop = assumed {* Because todo *};

end
;;

collection C_subjects =

  implement S_subjects

end
;;

collection C_objects =

  implement S_objects

end
;;

collection C_access_mode =

  implement S_access_mode

end
;;

collection C_access =

  implement S_access (C_subjects, C_objects, C_access_mode)

end
;;

collection C_set_of_access =

  implement S_set_of (C_access)

end
;;

collection C_set_of_mode =

  implement S_set_of (C_access_mode)

end
;;

collection C_decisions =

  implement S_decisions

end
;;

collection C_get_release =

  implement S_get_release

end
;;

collection C_groups =

  implement S_groups

end
;;

collection C_set_of_groups =

  implement S_set_of (C_groups)

end
;;

collection C_rho_unix =

  implement S_rho_unix (C_groups)

end
;;

collection C_rights =

  implement S_rights

end
;;

collection C_requests_unix =

  implement
    S_requests_unix
      (C_subjects, C_objects, C_access_mode,
       C_get_release, C_groups, C_rights)

end
;;

collection C_models_unix =

  implement
    S_models_unix
      (C_groups, C_rho_unix,
       C_subjects, C_objects, C_access_mode,
       C_access, C_set_of_access,
       C_set_of_mode, C_set_of_groups,
       C_rights, C_get_release,
       C_requests_unix, C_decisions)

end
;;

let pierre = C_subjects!create (1, "pierre")
;;

let marie = C_subjects!create (2, "marie ")
;;

let alice = C_subjects!create (3, "alice ")
;;

let bob = C_subjects!create (4, "bob   ")
;;

let steeve = C_subjects!create (5, "steeve")
;;

let rapport_pdf = C_objects!create (1, "rapport.pdf")
;;

let tp1_ml = C_objects!create (2, "tp1.ml     ")
;;

let media_java = C_objects!create (3, "Media.java ")
;;

let hachage_c = C_objects!create (4, "hachage.c  ")
;;

let projet_tex = C_objects!create (5, "projet.tex ")
;;

let ag_ex in list (C_groups)= [ C_groups!curry; C_groups!rsa ]
;;

let su_ex in list (C_subjects)= [ steeve ]
;;

let fp_ex (o in C_objects) in C_subjects =
  if C_objects!equal (o, rapport_pdf) then pierre
  else if C_objects!equal (o, tp1_ml) then alice
  else if C_objects!equal (o, media_java) then marie
  else if C_objects!equal (o, hachage_c) then bob
  else if C_objects!equal (o, projet_tex) then bob
  else C_subjects!element
;;

let fs_ex (s in C_subjects) in C_set_of_groups =
  if or_b (C_subjects!equal (s, alice),
           C_subjects!equal (s, bob))
  then C_set_of_groups!singleton (C_groups!rsa)
  else if or_b (C_subjects!equal (s, pierre),
                C_subjects!equal (s, marie))
  then C_set_of_groups!singleton (C_groups!curry)
  else C_set_of_groups!singleton (C_groups!element)
;;

let fg_ex (o in C_objects) in C_groups =
  if or_b (or_b (C_objects!equal (o, rapport_pdf),
                 C_objects!equal (o, media_java)),
           C_objects!equal (o, projet_tex))
  then C_groups!curry
  else if or_b (C_objects!equal (o, tp1_ml),
                C_objects!equal (o, hachage_c))
  then C_groups!rsa
  else C_groups!element
;;

let fd_p_ex (o in C_objects) in C_set_of_mode =
  if or_b (or_b (or_b (C_objects!equal (o, rapport_pdf),
                       C_objects!equal (o, media_java)),
                 C_objects!equal (o, tp1_ml)),
           C_objects!equal (o, hachage_c))
  then C_set_of_mode!ajoute_element
    (C_access_mode!read,
     C_set_of_mode!ajoute_element
     (C_access_mode!write,
      C_set_of_mode!singleton
      (C_access_mode!execute)))
  else if C_objects!equal (o, projet_tex)
  then C_set_of_mode!vide
  else C_set_of_mode!singleton (C_access_mode!element)
;;

let fd_g_ex (o in C_objects) in C_set_of_mode =
  if C_objects!equal (o, rapport_pdf)
  then C_set_of_mode!singleton (C_access_mode!read)
  else if or_b (C_objects!equal (o, media_java),
                C_objects!equal (o, tp1_ml))
  then C_set_of_mode!union
    (C_set_of_mode!singleton (C_access_mode!read),
     C_set_of_mode!singleton (C_access_mode!execute))
  else if or_b (C_objects!equal (o, hachage_c),
                C_objects!equal (o, projet_tex))
  then C_set_of_mode!union
    (C_set_of_mode!singleton (C_access_mode!read),
     C_set_of_mode!singleton (C_access_mode!write))
  else C_set_of_mode!singleton (C_access_mode!element)
;;

let fd_o_ex (o in C_objects) in C_set_of_mode =
  if or_b (or_b (C_objects!equal (o, rapport_pdf),
                 C_objects!equal (o, media_java)),
           C_objects!equal (o, tp1_ml))
  then C_set_of_mode!singleton (C_access_mode!read)
  else if C_objects!equal (o, hachage_c)
  then C_set_of_mode!union
    (C_set_of_mode!singleton (C_access_mode!read),
     C_set_of_mode!singleton (C_access_mode!execute))
  else if C_objects!equal (o, projet_tex)
  then C_set_of_mode!vide
  else C_set_of_mode!singleton (C_access_mode!element)
;;

print_string
  ("Exemple d'execution :\n\n")
;;

let st0 =
  C_models_unix!create
    (C_set_of_access!vide,
     ag_ex,
     su_ex,
     fp_ex,
     fg_ex,
     fs_ex,
     fd_p_ex,
     fd_g_ex,
     fd_o_ex)
;;

let list_obj = [
  rapport_pdf;
  tp1_ml;
  media_java;
  hachage_c;
  projet_tex;
]
;;

let print_ls_all (s in string, st in C_models_unix) =
  let rec aux (ls) =
    match ls with
    | [] -> ""
    | h :: t -> C_models_unix!print_ls (st, h) ^ "\n" ^ aux (t) in
  print_string
    ("ls -l " ^ s ^ "\n" ^ "\n" ^ aux (list_obj))
;;

print_ls_all ("0", st0);;

let req0 =
  C_requests_unix!create
    (C_get_release!get,
     pierre,
     rapport_pdf,
     C_access_mode!write,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete0 : " ^ C_requests_unix!print (req0) ^ "\n")
;;

let rep0 = C_models_unix!tau_unix (req0, st0);;

let dec0 = fst (rep0);;

let st1 = snd (rep0);;

print_string
  ("Reponse0 : Decision0 : " ^
   C_decisions!print (dec0) ^
   "\n")
;;

print_string
  ("           Acces1 : " ^
   C_models_unix!print (st1) ^
   "\n")
;;

print_ls_all ("1", st1);;


print_string
  ("\n--------------------------------------------------------\n")
;;

let req1 =
  C_requests_unix!create
    (C_get_release!get,
     bob,
     projet_tex,
     C_access_mode!read,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete1 : " ^ C_requests_unix!print (req1) ^ "\n")
;;

let rep1 = C_models_unix!tau_unix (req1, st1);;

let dec1 = fst (rep1);;

let st2 = snd (rep1);;

print_string
  ("Reponse1 : Decision1 : " ^
   C_decisions!print (dec1) ^
   "\n")
;;

print_string
  ("           Acces2 : " ^
   C_models_unix!print (st2) ^
   "\n")
;;

print_string
("\n--------------------------------------------------------\n")
;;

let req2 =
  C_requests_unix!create
    (C_get_release!get,
     bob,
     tp1_ml,
     C_access_mode!execute,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete2 : " ^ C_requests_unix!print (req2) ^ "\n")
;;

let rep2 = C_models_unix!tau_unix (req2, st2);;

let dec2 = fst (rep2);;

let st3 = snd (rep2);;

print_string
  ("Reponse2 : Decision2 : " ^
   C_decisions!print (dec2) ^
   "\n")
;;

print_string
  ("           Acces3 : " ^
   C_models_unix!print (st3) ^
   "\n")
;;

print_string
   ("\n--------------------------------------------------------\n")
;;

let req3 =
  C_requests_unix!create
    (C_get_release!get,
     bob,
     tp1_ml,
     C_access_mode!write,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete3 : " ^ C_requests_unix!print (req3) ^ "\n")
;;

let rep3 = C_models_unix!tau_unix (req3, st3);;

let dec3 = fst (rep3);;

let st4 = snd (rep3);;

print_string
  ("Reponse3 : Decision3 : " ^
   C_decisions!print (dec3) ^
   "\n")
;;

print_string
  ("           Acces4 : " ^
   C_models_unix!print (st4) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req4 =
  C_requests_unix!create
    (C_get_release!get,
     alice,
     media_java,
     C_access_mode!read,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete4 : " ^ C_requests_unix!print (req4) ^ "\n")
;;

let rep4 = C_models_unix!tau_unix (req4, st4);;

let dec4 = fst (rep4);;

let st5 = snd (rep4);;

print_string
   ("Reponse4 : Decision4 : " ^
    C_decisions!print (dec4) ^
    "\n")
;;


print_string
  ("           Acces5 : " ^
   C_models_unix!print (st5) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req5 =
  C_requests_unix!create
    (C_get_release!get,
     bob,
     media_java,
     C_access_mode!read,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete5 : " ^ C_requests_unix!print (req5) ^ "\n")
;;

let rep5 = C_models_unix!tau_unix (req5, st5);;

let dec5 = fst (rep5);;

let st6 = snd (rep5);;

print_string
  ("Reponse5 : Decision5 : " ^
   C_decisions!print (dec5) ^
   "\n")
;;

print_string
  ("           Acces6 : " ^
   C_models_unix!print (st6) ^
   "\n")
;;

print_string
   ("\n--------------------------------------------------------\n")
;;

let req6 =
  C_requests_unix!create
    (C_get_release!get,
     steeve,
     projet_tex,
     C_access_mode!write,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete6 : " ^ C_requests_unix!print (req6) ^ "\n")
;;

let rep6 = C_models_unix!tau_unix (req6, st6);;

let dec6 = fst (rep6);;

let st7 = snd (rep6);;

print_string
  ("Reponse6 : Decision6 : " ^
   C_decisions!print (dec6) ^
   "\n")
;;

print_string
  ("           Acces7 : " ^
   C_models_unix!print (st7) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req7 =
  C_requests_unix!create
    (C_get_release!get,
     alice,
     projet_tex,
     C_access_mode!write,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete7 : " ^ C_requests_unix!print (req7) ^ "\n")
;;

let rep7 = C_models_unix!tau_unix (req7, st7);;

let dec7 = fst (rep7);;

let st8 = snd (rep7);;

print_string
  ("Reponse7 : Decision7 : " ^
   C_decisions!print (dec7) ^
   "\n")
;;

print_string
  ("           Acces8 : " ^
   C_models_unix!print (st8) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req8 =
  C_requests_unix!create
    (C_get_release!rel,
     alice,
     media_java,
     C_access_mode!read,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete8 : " ^ C_requests_unix!print (req8) ^ "\n")
;;

let rep8 = C_models_unix!tau_unix (req8, st8);;

let dec8 = fst (rep8);;

let st9 = snd (rep8);;

print_string
  ("Reponse8 : Decision8 : " ^
    C_decisions!print (dec8) ^
    "\n")
;;

print_string
  ("           Acces9 : " ^
   C_models_unix!print (st9) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req9 =
  C_requests_unix!create
    (C_get_release!rel,
     marie,
     media_java,
     C_access_mode!read,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete9 : " ^ C_requests_unix!print (req9) ^ "\n")
;;

let rep9 = C_models_unix!tau_unix (req9, st9);;

let dec9 = fst (rep9);;

let st10 = snd (rep9);;

print_string
  ("Reponse9 : Decision9 : " ^
   C_decisions!print (dec9) ^
   "\n")
;;

print_string
  ("           Acces10 : " ^
   C_models_unix!print (st10) ^
   "\n")
;;

print_ls_all ("10", st10);;


(* administrative requests *)

print_string
  ("\n--------------------------------------------------------\n")
;;

let req10 =
  C_requests_unix!create
    (C_get_release!active,
     steeve,
     C_objects!element,
     C_access_mode!element,
     C_groups!bidule,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete10 : " ^ C_requests_unix!print_adm (req10) ^ "\n")
;;

let rep10 = C_models_unix!tau_unix (req10, st10);;

let dec10 = fst (rep10);;

let st11 = snd (rep10);;

print_string
  ("Reponse10 : Decision10 : " ^
   C_decisions!print (dec10) ^
   "\n")
;;

print_string
  ("           Acces11 : " ^
   C_models_unix!print (st11) ^
   "\n")
;;

print_ls_all ("11", st11);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req11 =
  C_requests_unix!create
    (C_get_release!active,
     marie,
     C_objects!element,
     C_access_mode!element,
     C_groups!truc,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete11 : " ^ C_requests_unix!print_adm (req11) ^ "\n")
;;

let rep11 = C_models_unix!tau_unix (req11, st11);;

let dec11 = fst (rep11);;

let st12= snd (rep11);;

print_string
  ("Reponse11 : Decision11 : " ^
   C_decisions!print (dec11) ^
   "\n")
;;

print_string
  ("           Acces12 : " ^
   C_models_unix!print (st12) ^
   "\n")
;;

print_string
  (C_models_unix!print_ag (st12))
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req12 =
  C_requests_unix!create
    (C_get_release!inactive,
     steeve,
     C_objects!element,
     C_access_mode!element,
     C_groups!bidule,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete12 : " ^ C_requests_unix!print_adm (req12) ^ "\n")
;;

let rep12 = C_models_unix!tau_unix (req12, st12);;

let dec12 = fst (rep12);;

let st13 = snd (rep12);;

print_string
  ("Reponse12 : Decision12 : " ^
   C_decisions!print (dec12) ^
   "\n")
;;

print_string
  ("           Acces13 : " ^
   C_models_unix!print (st13) ^
   "\n")
;;

print_string
  (C_models_unix!print_ag (st13))
;;


print_string
  ("\n--------------------------------------------------------\n")
;;


let req13 =
  C_requests_unix!create
    (C_get_release!inactive,
     steeve,
     C_objects!element,
     C_access_mode!element,
     C_groups!truc,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete13 : " ^ C_requests_unix!print_adm (req13) ^ "\n")
;;

let rep13 = C_models_unix!tau_unix (req13, st13);;

let dec13 = fst (rep13);;

let st14 = snd (rep13);;

print_string
  ("Reponse13 : Decision13 : " ^
   C_decisions!print (dec13) ^
   "\n")
;;

print_string
  ("           Acces14 : " ^
   C_models_unix!print (st14) ^
   "\n")
;;

print_string
  (C_models_unix!print_ag (st14))
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req14 =
  C_requests_unix!create
    (C_get_release!inactive,
     marie ,
     C_objects!element,
     C_access_mode!element,
     C_groups!rsa,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete14 : " ^ C_requests_unix!print_adm (req14) ^ "\n")
;;

let rep14 = C_models_unix!tau_unix (req14, st14);;

let dec14 = fst (rep14);;

let st15 = snd (rep14);;

print_string
  ("Reponse14 : Decision14 : " ^
   C_decisions!print (dec14) ^
   "\n")
;;

print_string
  ("           Acces15 : " ^
   C_models_unix!print (st15) ^
   "\n")
;;

print_string
  (C_models_unix!print_ag (st15))
;;

print_string
   ("\n--------------------------------------------------------\n")
;;

let req15 =
  C_requests_unix!create
    (C_get_release!inactive,
     steeve,
     C_objects!element,
     C_access_mode!element,
     C_groups!rsa,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete15 : " ^ C_requests_unix!print_adm (req15) ^ "\n")
;;

let rep15 = C_models_unix!tau_unix (req15, st15);;

let dec15 = fst (rep15);;

let st16 = snd (rep15);;

print_string
  ("Reponse15 : Decision15 : " ^
   C_decisions!print (dec15) ^
   "\n")
;;

print_string
  ("           Acces16 : " ^
   C_models_unix!print (st16) ^
   "\n")
;;

print_string
  (C_models_unix!print_ag (st16))
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

print_ls_all ("16", st16);;

let req16 =
  C_requests_unix!create
    (C_get_release!p_right,
     bob,
     projet_tex,
     C_access_mode!read,
     C_groups!element,
     C_rights!d_p,
     C_subjects!element)
;;

print_string
  ("Requete16 : " ^ C_requests_unix!print_adm (req16) ^ "\n")
;;

let rep16 = C_models_unix!tau_unix (req16, st16);;

let dec16 = fst (rep16);;

let st17 = snd (rep16);;

print_string
  ("Reponse16 : Decision16 : " ^
   C_decisions!print (dec16) ^
   "\n")
;;

print_string
  (C_models_unix!print_ag (st17))
;;

print_ls_all ("17", st17);;

print_string
   ("\n--------------------------------------------------------\n")
;;

let req17 =
  C_requests_unix!create
    (C_get_release!p_right,
     marie,
     projet_tex,
     C_access_mode!read,
     C_groups!element,
     C_rights!d_p,
     C_subjects!element)
;;

print_string
  ("Requete17 : " ^ C_requests_unix!print_adm (req17) ^ "\n")
;;

let rep17 = C_models_unix!tau_unix (req17, st17);;

let dec17 = fst (rep17);;

let st18 = snd (rep17);;

print_string
  ("Reponse17 : Decision17 : " ^
   C_decisions!print (dec17) ^
   "\n")
;;

print_string
  ("           Acces18 : " ^
   C_models_unix!print (st18) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req18 =
  C_requests_unix!create
    (C_get_release!m_right,
     alice,
     tp1_ml,
     C_access_mode!execute,
     C_groups!element,
     C_rights!d_p,
     C_subjects!element)
;;

print_string
  ("Requete18 : " ^ C_requests_unix!print_adm (req18) ^ "\n")
;;

let rep18 = C_models_unix!tau_unix (req18, st18);;

let dec18 = fst (rep18);;

let st19= snd (rep18);;

print_string
  ("Reponse18 : Decision18 : " ^
   C_decisions!print (dec18) ^
   "\n")
;;

print_string
  ("           Acces19 : " ^
   C_models_unix!print (st19) ^
   "\n")
;;

print_ls_all ("19", st19);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req19 =
  C_requests_unix!create
    (C_get_release!m_right,
     pierre,
     tp1_ml,
     C_access_mode!read,
     C_groups!element,
     C_rights!d_p,
     C_subjects!element)
;;

print_string
  ("Requete19 : " ^ C_requests_unix!print_adm (req19) ^ "\n")
;;

let rep19 = C_models_unix!tau_unix (req19, st19);;

let dec19 = fst (rep19);;

let st20 = snd (rep19);;

print_string
  ("Reponse19 : Decision19 : " ^
   C_decisions!print (dec19) ^
   "\n")
;;

print_string
  ("           Acces20 : " ^
   C_models_unix!print (st20) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req20 =
  C_requests_unix!create
    (C_get_release!m_right,
     pierre,
     rapport_pdf,
     C_access_mode!write,
     C_groups!element,
     C_rights!d_p,
     C_subjects!element)
;;

print_string
  ("Requete20 : " ^ C_requests_unix!print_adm (req20) ^ "\n")
;;

let rep20 = C_models_unix!tau_unix (req20, st20);;

let dec20 = fst (rep20);;

let st21 = snd (rep20);;

print_string
  ("Reponse20 : Decision20 : " ^
   C_decisions!print (dec20) ^
   "\n")
;;

print_string
  ("           Acces21 : " ^
   C_models_unix!print (st21) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req21 =
  C_requests_unix!create
    (C_get_release!p_right,
     pierre,
     rapport_pdf,
     C_access_mode!execute,
     C_groups!element,
     C_rights!d_g,
     C_subjects!element)
;;

print_string
  ("Requete21 : " ^ C_requests_unix!print_adm (req21) ^ "\n")
;;

let rep21 = C_models_unix!tau_unix (req21, st21);;

let dec21 = fst (rep21);;

let st22 = snd (rep21);;

print_string
  ("Reponse21 : Decision21 : " ^
   C_decisions!print (dec21) ^
   "\n")
;;

print_string
  ("           Acces22 : " ^
   C_models_unix!print (st22) ^
   "\n")
;;

print_ls_all ("21", st21);;

print_ls_all ("22", st22);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req22 =
  C_requests_unix!create
    (C_get_release!p_right,
     marie,
     projet_tex,
     C_access_mode!read,
     C_groups!element,
     C_rights!d_g,
     C_subjects!element)
;;

print_string
  ("Requete22 : " ^ C_requests_unix!print_adm (req22) ^ "\n")
;;

let rep22 = C_models_unix!tau_unix (req22, st22);;

let dec22 = fst (rep22);;

let st23 = snd (rep22);;

print_string
  ("Reponse22 : Decision22 : " ^
              C_decisions!print (dec22) ^
              "\n")
;;

print_string
  ("           Acces23 : " ^
   C_models_unix!print (st23) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req23 =
  C_requests_unix!create
    (C_get_release!m_right,
     bob,
     hachage_c,
     C_access_mode!read,
     C_groups!element,
     C_rights!d_g,
     C_subjects!element)
;;

print_string
   ("Requete23 : " ^ C_requests_unix!print_adm (req23) ^ "\n")
;;

let rep23 = C_models_unix!tau_unix (req23, st23);;

let dec23 = fst (rep23);;

let st24 = snd (rep23);;

print_string
  ("Reponse23 : Decision23 : " ^
   C_decisions!print (dec23) ^
   "\n")
;;

print_string
  ("           Acces24 : " ^
   C_models_unix!print (st24) ^
   "\n")
;;

print_ls_all ("23", st23);;

print_ls_all ("24", st24);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req24 =
  C_requests_unix!create
    (C_get_release!m_right,
     alice,
     hachage_c,
     C_access_mode!write,
     C_groups!element,
     C_rights!d_g,
     C_subjects!element)
;;

print_string
  ("Requete24 : " ^ C_requests_unix!print_adm (req24) ^ "\n")
;;

let rep24 = C_models_unix!tau_unix (req24, st24);;

let dec24 = fst (rep24);;

let st25 = snd (rep24);;

print_string
  ("Reponse24 : Decision24 : " ^
   C_decisions!print (dec24) ^
   "\n")
;;

print_string
  ("           Acces25 : " ^
   C_models_unix!print (st25) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req25 =
  C_requests_unix!create
    (C_get_release!m_right,
     alice,
     tp1_ml,
     C_access_mode!execute,
     C_groups!element,
     C_rights!d_g,
     C_subjects!element)
;;

print_string
  ("Requete25 : " ^ C_requests_unix!print_adm (req25) ^ "\n")
;;

let rep25 = C_models_unix!tau_unix (req25, st25);;

let dec25 = fst (rep25);;

let st26 = snd (rep25);;

print_string
  ("Reponse25 : Decision25 : " ^
   C_decisions!print (dec25) ^
   "\n")
;;

print_string
  ("           Acces26 : " ^
   C_models_unix!print (st26) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req26 =
  C_requests_unix!create
    (C_get_release!p_right,
     pierre,
     rapport_pdf,
     C_access_mode!read,
     C_groups!element,
     C_rights!d_o,
     C_subjects!element)
;;

print_string
  ("Requete26 : " ^ C_requests_unix!print_adm (req26) ^ "\n")
;;

let rep26 = C_models_unix!tau_unix (req26, st26);;

let dec26 = fst (rep26);;

let st27 = snd (rep26);;

print_string
  ("Reponse26 : Decision26 : " ^
              C_decisions!print (dec26) ^
              "\n")
;;

print_string
  ("           Acces27 : " ^
   C_models_unix!print (st27) ^
   "\n")
;;

print_ls_all ("26", st26);;

print_ls_all ("27", st27);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req27 =
  C_requests_unix!create
    (C_get_release!p_right,
     marie,
     projet_tex,
     C_access_mode!read,
     C_groups!element,
     C_rights!d_o,
     C_subjects!element)
;;

print_string
  ("Requete27 : " ^ C_requests_unix!print_adm (req27) ^ "\n")
;;

let rep27 = C_models_unix!tau_unix (req27, st27);;

let dec27 = fst (rep27);;

let st28 = snd (rep27);;

print_string
  ("Reponse27 : Decision27 : " ^
   C_decisions!print (dec27) ^
   "\n")
;;

print_string
  ("           Acces28 : " ^
   C_models_unix!print (st28) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req28 =
  C_requests_unix!create
    (C_get_release!m_right,
     bob,
     hachage_c,
     C_access_mode!read,
     C_groups!element,
     C_rights!d_o,
     C_subjects!element)
;;

print_string
  ("Requete28 : " ^ C_requests_unix!print_adm (req28) ^ "\n")
;;

let rep28 = C_models_unix!tau_unix (req28, st28);;

let dec28 = fst (rep28);;

let st29 = snd (rep28);;

print_string
  ("Reponse28 : Decision28 : " ^
   C_decisions!print (dec28) ^
   "\n")
;;

print_string
  ("           Acces29 : " ^
   C_models_unix!print (st29) ^
   "\n")
;;

print_ls_all ("28", st28);;

print_ls_all ("29", st29);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req29 =
  C_requests_unix!create
    (C_get_release!m_right,
     alice,
     hachage_c,
     C_access_mode!write,
     C_groups!element,
     C_rights!d_o,
     C_subjects!element)
;;

print_string
  ("Requete29 : " ^ C_requests_unix!print_adm (req29) ^ "\n")
;;

let rep29 = C_models_unix!tau_unix (req29, st29);;

let dec29 = fst (rep29);;

let st30 = snd (rep29);;

print_string
  ("Reponse29 : Decision29 : " ^
   C_decisions!print (dec29) ^
   "\n")
;;

print_string
  ("           Acces30 : " ^
   C_models_unix!print (st30) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req30 =
  C_requests_unix!create
    (C_get_release!m_right,
     marie,
     media_java,
     C_access_mode!read,
     C_groups!element,
     C_rights!d_o,
     C_subjects!element)
;;

print_string
  ("Requete30 : " ^ C_requests_unix!print_adm (req30) ^ "\n")
;;

let rep30 = C_models_unix!tau_unix (req30, st30);;

let dec30 = fst (rep30);;

let st31 = snd (rep30);;

print_string
  ("Reponse30 : Decision30 : " ^
   C_decisions!print (dec29) ^
   "\n")
;;

print_string
  ("           Acces31 : " ^
   C_models_unix!print (st31) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req31 =
  C_requests_unix!create
    (C_get_release!chown,
     steeve,
     hachage_c,
     C_access_mode!element,
     C_groups!element,
     C_rights!element,
     pierre)
;;

print_string
  ("Requete31 : " ^ C_requests_unix!print_adm (req31) ^ "\n")
;;

let rep31 = C_models_unix!tau_unix (req31, st31);;

let dec31 = fst (rep31);;

let st32 = snd (rep31);;

print_string
  ("Reponse31 : Decision31 : " ^
   C_decisions!print (dec31) ^
   "\n")
;;

print_string
  ("           Acces32 : " ^
   C_models_unix!print (st32) ^
   "\n")
;;

print_ls_all ("31", st31);;

print_ls_all ("32", st32);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req32 =
  C_requests_unix!create
    (C_get_release!chown,
     bob,
     hachage_c,
     C_access_mode!element,
     C_groups!element,
     C_rights!element,
     pierre)
;;

print_string
  ("Requete32 : " ^ C_requests_unix!print_adm (req32) ^ "\n")
;;

let rep32 = C_models_unix!tau_unix (req32, st32);;

let dec32 = fst (rep32);;

let st33 = snd (rep32);;

print_string
  ("Reponse32 : Decision32 : " ^
   C_decisions!print (dec32) ^
   "\n")
;;

print_string
  ("           Acces33 : " ^
   C_models_unix!print (st33) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req33 =
  C_requests_unix!create
    (C_get_release!chown,
     steeve,
     rapport_pdf,
     C_access_mode!element,
     C_groups!element,
     C_rights!element,
     alice)
;;

print_string
  ("Requete33 : " ^ C_requests_unix!print_adm (req33) ^ "\n")
;;

let rep33 = C_models_unix!tau_unix (req33, st33);;

let dec33 = fst (rep33);;

let st34 = snd (rep33);;

print_string
  ("Reponse33 : Decision33 : " ^
   C_decisions!print (dec33) ^
   "\n")
;;

print_string
  ("           Acces34 : " ^
   C_models_unix!print (st34) ^
   "\n")
;;

print_ls_all ("33", st33);;

print_ls_all ("34", st34);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req34 =
  C_requests_unix!create
    (C_get_release!chown,
     steeve,
     projet_tex,
     C_access_mode!element,
     C_groups!element,
     C_rights!element,
     steeve)
;;

print_string
  ("Requete34 : " ^ C_requests_unix!print_adm (req34) ^ "\n")
;;

let rep34 = C_models_unix!tau_unix (req34, st34);;

let dec34 = fst (rep34);;

let st35 = snd (rep34);;

print_string
  ("Reponse34 : Decision34 : " ^
   C_decisions!print (dec34) ^
   "\n")
;;

print_string
  ("           Acces35 : " ^
   C_models_unix!print (st35) ^
   "\n")
;;

print_ls_all ("34", st34);;

print_ls_all ("35", st35);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req35 =
  C_requests_unix!create
    (C_get_release!chgrp,
     steeve,
     hachage_c,
     C_access_mode!element,
     C_groups!curry,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete35 : " ^ C_requests_unix!print_adm (req35) ^ "\n")
;;

let rep35 = C_models_unix!tau_unix (req35, st35);;

let dec35 = fst (rep35);;

let st36 = snd (rep35);;

print_string
  ("Reponse35 : Decision35 : " ^
   C_decisions!print (dec35) ^
   "\n")
;;

print_string
  ("           Acces36 : " ^
   C_models_unix!print (st36) ^
   "\n")
;;

print_ls_all ("35", st35);;

print_ls_all ("36", st36);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req36 =
  C_requests_unix!create
    (C_get_release!chgrp,
     alice,
     tp1_ml,
     C_access_mode!element,
     C_groups!curry,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete36 : " ^ C_requests_unix!print_adm (req36) ^ "\n")
;;

let rep36 = C_models_unix!tau_unix (req36, st36);;

let dec36 = fst (rep36);;

let st37 = snd (rep36);;

print_string
  ("Reponse36 : Decision36 : " ^
   C_decisions!print (dec36) ^
   "\n")
;;

print_string
  ("           Acces37 : " ^
   C_models_unix!print (st37) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req37 =
  C_requests_unix!create
    (C_get_release!get,
     marie,
     projet_tex,
     C_access_mode!write,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete37 : " ^ C_requests_unix!print (req37) ^ "\n")
;;

let rep37 = C_models_unix!tau_unix (req37, st37);;

let dec37 = fst (rep37);;

let st38 = snd (rep37);;

print_string
  ("Reponse37 : Decision37 : " ^
   C_decisions!print (dec37) ^
   "\n")
;;

print_string
  ("           Acces38 : " ^
   C_models_unix!print (st38) ^
   "\n")
;;


print_string
  ("\n--------------------------------------------------------\n")
;;

let req38 =
  C_requests_unix!create
    (C_get_release!chgrp,
     steeve,
     projet_tex,
     C_access_mode!element,
     C_groups!rsa,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete38 : " ^ C_requests_unix!print_adm (req38) ^ "\n")
;;

let rep38 = C_models_unix!tau_unix (req38, st38);;

let dec38 = fst (rep38);;

let st39 = snd (rep38);;

print_string
  ("Reponse38 : Decision38 : " ^
   C_decisions!print (dec38) ^
   "\n")
;;

print_string
  ("           Acces39 : " ^
   C_models_unix!print (st39) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req39 =
  C_requests_unix!create
    (C_get_release!p_group,
     steeve,
     C_objects!element,
     C_access_mode!element,
     C_groups!rsa,
     C_rights!element,
     marie)
;;

print_string
  ("Requete39 : " ^ C_requests_unix!print_adm (req39) ^ "\n")
;;

let rep39 = C_models_unix!tau_unix (req39, st39);;

let dec39 = fst (rep39);;

let st40 = snd (rep39);;

print_string
  ("Reponse39 : Decision39 : " ^
   C_decisions!print (dec39) ^
   "\n")
;;

print_string
  ("           Acces40 : " ^
   C_models_unix!print (st40) ^
   "\n")
;;

print_ls_all ("39", st39);;

print_ls_all ("40", st40);;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req40 =
  C_requests_unix!create
    (C_get_release!get,
     bob,
     hachage_c,
     C_access_mode!execute,
     C_groups!element,
     C_rights!element,
     C_subjects!element)
;;

print_string
  ("Requete40 : " ^ C_requests_unix!print (req40) ^ "\n")
;;

let rep40 = C_models_unix!tau_unix (req40, st40);;

let dec40 = fst (rep40);;

let st41 = snd (rep40);;

print_string
  ("Reponse40 : Decision40 : " ^
   C_decisions!print (dec40) ^
   "\n")
;;

print_string
  ("           Acces41 : " ^
   C_models_unix!print (st41) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req41 =
  C_requests_unix!create
    (C_get_release!p_group,
     steeve,
     C_objects!element,
     C_access_mode!element,
     C_groups!curry,
     C_rights!element,
     bob)
;;

print_string
  ("Requete41 : " ^ C_requests_unix!print_adm (req41) ^ "\n")
;;

let rep41 = C_models_unix!tau_unix (req41, st41);;

let dec41 = fst (rep41);;

let st42 = snd (rep41);;

print_string
  ("Reponse41 : Decision41 : " ^
   C_decisions!print (dec41) ^
   "\n")
;;

print_string
  ("           Acces42 : " ^
   C_models_unix!print (st42) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req42 =
  C_requests_unix!create
    (C_get_release!m_group,
     steeve,
     C_objects!element,
     C_access_mode!element,
     C_groups!rsa,
     C_rights!element,
     marie)
;;

print_string
  ("Requete42 : " ^ C_requests_unix!print_adm (req42) ^ "\n")
;;

let rep42 = C_models_unix!tau_unix (req42, st42);;

let dec42 = fst (rep42);;

let st43 = snd (rep42);;

print_string
  ("Reponse42 : Decision42 : " ^
   C_decisions!print (dec42) ^
   "\n")
;;

print_string
  ("           Acces43 : " ^
   C_models_unix!print (st43) ^
   "\n")
;;

print_string
  ("\n--------------------------------------------------------\n")
;;

let req43 =
  C_requests_unix!create
    (C_get_release!m_group,
     steeve,
     C_objects!element,
     C_access_mode!element,
     C_groups!curry,
     C_rights!element,
     marie)
;;

print_string
  ("Requete43 : " ^ C_requests_unix!print_adm (req43) ^ "\n")
;;

let rep43 = C_models_unix!tau_unix (req43, st43);;

let dec43 = fst (rep43);;

let st44 = snd (rep43);;

print_string
  ("Reponse43 : Decision43 : " ^
   C_decisions!print (dec43) ^
   "\n")
;;

print_string
  ("           Acces44 : " ^
   C_models_unix!print (st44) ^
   "\n")
;;

print_ls_all ("44", st44);;
