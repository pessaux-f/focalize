(* $Id: airsideSubjects.fcl,v 1.2 2012-03-01 16:05:01 pessaux Exp $ *)

open "sets";;
open "basic_sets";;
open "a17subjects";;
open "conversionFunctions";;

species AirsideEnv(Obj is Object,
                   Obj_set is Finite_set(Obj),
                   Do is DangerousObject,
                   Do_set is Finite_set(Do),
                   Wp is Weapon,
                   Wp_set is Finite_set(Wp),
                   Eo is Explosive,
                   Eo_set is Finite_set(Eo),
                   Dd is DangerousDevice,
                   Dd_set is Finite_set(Dd),
                   A_subject is AirsideSubject(Obj, Obj_set),
                   As_set is Finite_set(A_subject),
                   Av is AirsideVehicle(Obj, Obj_set),
                   Av_set is Finite_set(Av),
                   C_baggage is CabinBaggage(Obj, Obj_set),
                   Cb_set is Finite_set(C_baggage),
                   C_person is CabinPerson(Obj, Obj_set, C_baggage, Cb_set),
                   Cp_set is Finite_set(C_person),
                   Seat_no is Seat_number,
                   Seat_set is Finite_set(Seat_no),
                   C_passenger is CabinPassenger(Obj, Obj_set, C_baggage,
                     Cb_set, Seat_no),
                   C_pa_set is Finite_set(C_passenger),
                   H_baggage is HoldBaggage(Obj, Obj_set, C_baggage, Cb_set,
                     Seat_no, C_passenger),
                   Hl_set is Finite_set(H_baggage),
                   Arm_passenger is ArmedPassenger(Obj, Obj_set, Wp, C_baggage,
                     Cb_set, Seat_no),
                   A_pilot is Pilot(Obj, Obj_set, C_baggage, Cb_set, Seat_no,
                     Seat_set),
                   Pilot_set is Finite_set(A_pilot),
                   A_carrier is AirCarrier,
                   D_aircraft is DepartingAircraft(Obj, Obj_set, Wp, A_subject,
                     As_set, C_baggage, Cb_set, C_person, Cp_set, Seat_no,
                     Seat_set, C_passenger, H_baggage, Hl_set, Arm_passenger,
                     A_pilot, A_carrier),
                   Dep_ac_set is Finite_set(D_aircraft),
                   A_person is AirsidePerson(Obj, Obj_set),
                   Ap_set is Finite_set(A_person),
                   U_person is UnescortedPerson(Obj, Obj_set),
                   Up_set is Finite_set(U_person),
                   Dsk_passenger is DisembarkedPassenger(Obj, Obj_set,
                     C_baggage, Cb_set, Seat_no),
                   Dsk_pa_set is Finite_set(Dsk_passenger),
                   Dep_passenger is DepartingPassenger(Obj, Obj_set, C_baggage,
                     Cb_set, Seat_no),
                   Dep_pa_set is Finite_set(Dep_passenger),
                   Tf_passenger is TransferPassenger(Obj, Obj_set, Wp,
                     C_baggage, Cb_set, Seat_no, A_person),
                   Tf_pa_set is Finite_set(Tf_passenger),
                   Ts_passenger is TransitPassenger(Obj, Obj_set, Wp,
                     C_baggage, Cb_set, Seat_no, A_person),
                   Ts_pa_set is Finite_set(Ts_passenger),
                   Sra is SecurityRestrictedArea(Obj, Obj_set, Wp, A_subject,
                     As_set, C_baggage, Cb_set, U_person, C_person, Cp_set,
                     Seat_no, Seat_set, C_passenger, H_baggage, Hl_set,
                     Arm_passenger, A_pilot, A_carrier, D_aircraft,
                     Dep_ac_set),
                   Sra_set is Finite_set(Sra),
                   WpToDo is DangerousObject_subtype(Wp, Do, Wp_set, Do_set),
                   EoToDo is DangerousObject_subtype(Eo, Do, Eo_set, Do_set),
                   DdToDo is DangerousObject_subtype(Dd, Do, Dd_set, Do_set),
                   DoToObj is DangerousObjectToObject(Do, Obj, Do_set,
                     Obj_set),
                   ApToAs is AirsideSubject_subtype(Obj, Obj_set, A_person,
                     A_subject, Ap_set, As_set),
                   CpToAp is AirsideSubject_subtype(Obj, Obj_set, C_person,
                     A_person, Cp_set, Ap_set),
                   UpToAp is AirsideSubject_subtype(Obj, Obj_set, U_person,
                     A_person, Up_set, Ap_set),
                   AvToAs is AirsideSubject_subtype(Obj, Obj_set, Av,
                     A_subject, Av_set, As_set),
                   PiToUp is UnescortedPerson_subtype(Obj, Obj_set, A_pilot,
                     U_person, Pilot_set, Up_set),
                   PiToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                     Cb_set, A_pilot, C_person, Pilot_set, Cp_set),
                   DskToCpa is CabinPassenger_subtype(Obj, Obj_set, C_baggage,
                     Cb_set, Seat_no, Dsk_passenger, C_passenger, Dsk_pa_set,
                     C_pa_set),
                   DepToCpa is CabinPassenger_subtype(Obj, Obj_set, C_baggage,
                     Cb_set, Seat_no, Dep_passenger, C_passenger, Dep_pa_set,
                     C_pa_set),
                   CpaToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                     Cb_set, C_passenger, C_person, C_pa_set, Cp_set),
                   TsToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                     C_baggage, Cb_set, Seat_no, Ts_passenger, Dsk_passenger,
                     Ts_pa_set, Dsk_pa_set),
                   TfToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                     C_baggage, Cb_set, Seat_no, Tf_passenger, Dsk_passenger,
                     Tf_pa_set, Dsk_pa_set)) =

  inherit Setoid;

(** airside subjects *)

signature objects : Self -> Obj_set;
signature weapons : Self -> Wp_set;
signature explosives : Self -> Eo_set;
signature dangerousDevices : Self -> Dd_set;
signature holdBaggage : Self -> Hl_set;

(** Domain property : At the Annex 17 level, weapons, explosives 
    and dangerous Devices characterize the given set dangerous objects *)

let dangerousObjects (s : Self) : Do_set =
     Do_set!union(DdToDo!to_super_set(!dangerousDevices(s)),
                  Do_set!union(WpToDo!to_super_set(!weapons(s)),
                               EoToDo!to_super_set(!explosives(s))));

(** Derived property : All weapons are instances of dangerous object. *) 

theorem dangerousObjects_weapons : all e : Wp, all s : Self,
    Wp_set!member(e, !weapons(s)) -> 
       Do_set!member(WpToDo!to_super(e), !dangerousObjects(s))
proof = by property Do_set!union2, WpToDo!to_super_set_const2
        definition of dangerousObjects;

(** Derived property : All explosives are instances of dangerous object. *) 

theorem dangerousObjects_explosives : all e : Eo, all s : Self,
    Eo_set!member(e, !explosives(s)) ->
           Do_set!member(EoToDo!to_super(e), !dangerousObjects(s))
proof = by property Do_set!union2, EoToDo!to_super_set_const2
        definition of dangerousObjects;

(** Derived property : All dangerous devices are instances of dangerous
    object. *) 

theorem dangerousObjects_dDevices : all e : Dd, all s : Self,
    Dd_set!member(e, !dangerousDevices(s)) ->
            Do_set!member(DdToDo!to_super(e), !dangerousObjects(s))
proof = by property Do_set!union2, DdToDo!to_super_set_const2
        definition of dangerousObjects;

(** Domain property : Weapons n DangerousDevices n Explosives = empty. *)

property dd_not_wp_exp_const : all s : Self, all o : Do,
  Do_set!member(o, DdToDo!to_super_set(!dangerousDevices(s))) ->
  ~ (Do_set!member(o, Do_set!union(WpToDo!to_super_set(!weapons(s)),
      EoToDo!to_super_set(!explosives(s)))));

property wp_not_exp_const : all s : Self, all o : Do,
  Do_set!member(o, WpToDo!to_super_set(!weapons(s))) ->
  ~ (Do_set!member(o, EoToDo!to_super_set(!explosives(s))));

(** Domain property : The given set dangerous object is 
    a subset of the given set object *)

property dangerousObjects_object : all s : Self,
  Obj_set!subset(DoToObj!to_super_set(!dangerousObjects(s)), !objects(s)); 

signature unescortedPersons : Self -> Up_set;
signature airsideVehicles : Self -> Av_set;
signature transferPassengers : Self -> Tf_pa_set;
signature transitPassengers : Self -> Ts_pa_set;
signature disembarkedPassengers : Self -> Dsk_pa_set;
signature departingPassengers : Self -> Dep_pa_set;

(** Domain Property: Transfer passengers are instances of disembarked
    passengers *)

property transferPassenger_dskPassenger : all s : Self,
  Dsk_pa_set!subset(TfToDsk!to_super_set(!transferPassengers(s)),
    !disembarkedPassengers(s));

(** Domain Property: Transit passengers are instances of disembarked
    passengers *)

property transitPassenger_dskPassenger : all s : Self,
  Dsk_pa_set!subset(TsToDsk!to_super_set(!transitPassengers(s)),
    !disembarkedPassengers(s));

let cabinPassengers (s : Self) : C_pa_set =
  C_pa_set!union(DskToCpa!to_super_set(!disembarkedPassengers(s)), 
                 DepToCpa!to_super_set(!departingPassengers(s)));

signature pilots : Self -> Pilot_set;

let cabinPersons (s : Self) : Cp_set =
  Cp_set!union(CpaToCp!to_super_set(!cabinPassengers(s)),
               PiToCp!to_super_set(!pilots(s)));

let airsidePersons (s : Self) : Ap_set =
  Ap_set!union(CpToAp!to_super_set(!cabinPersons(s)),
               UpToAp!to_super_set(!unescortedPersons(s)));

let airsideSubjects (s : Self) : As_set =
  As_set!union(ApToAs!to_super_set(!airsidePersons(s)),
               AvToAs!to_super_set(!airsideVehicles(s)));

(** airsideVehicles are also instances of airside subject *)

theorem airsideVehicles_airsideSubject : all s : Self, all v : Av,
  Av_set!member(v, !airsideVehicles(s)) ->
  As_set!member(AvToAs!to_super(v), !airsideSubjects(s))
proof = by property As_set!union2, AvToAs!to_super_set_const2
        definition of airsideSubjects;

(** airside persons are also instances of airside subject *)

theorem airsidePerson_airsideSubject : all s : Self, all p : A_person,
  Ap_set!member(p, !airsidePersons(s)) ->
  As_set!member(ApToAs!to_super(p), !airsideSubjects(s))
proof = by property As_set!union2, ApToAs!to_super_set_const2
        definition of airsideSubjects;

(**  Domain property: unescorted Persons are also instances of airside
     person *)

property unescortedPerson_airsideSubject : all s : Self,
  Ap_set!subset(UpToAp!to_super_set(!unescortedPersons(s)),
    !airsidePersons(s));

(**  Domain property: pilots are instances of unescorted Persons. *)

property pilot_unescortedPerson : all s : Self,
  Up_set!subset(PiToUp!to_super_set(!pilots(s)), !unescortedPersons(s));

(**  Domain property: pilots are also instances of cabin Persons. *)

theorem pilot_cabinPerson : all s : Self, all p : A_pilot,
  Pilot_set!member(p, !pilots(s)) ->
  Cp_set!member(PiToCp!to_super(p), !cabinPersons(s))
proof = by property Cp_set!union2, PiToCp!to_super_set_const2
        definition of cabinPersons;

(**  Domain property: cabin passengers are instances of cabin Persons. *)

theorem cabinPassenger_cabinPerson : all s : Self, all p : C_passenger,
  C_pa_set!member(p, !cabinPassengers(s)) ->
  Cp_set!member(CpaToCp!to_super(p), !cabinPersons(s))
proof = by property Cp_set!union2, CpaToCp!to_super_set_const2
        definition of cabinPersons;

(**  Domain property: cabin persons are instances of airside person *)

property cabinPerson_airsidePerson : all s : Self,
  Ap_set!subset(CpToAp!to_super_set(!cabinPersons(s)), !airsidePersons(s));

(** Domain property: disembarked passengers are instances of cabin persons *)

theorem disembarkedPassenger_cabinPassenger : all s : Self,
  all p : Dsk_passenger,
  Dsk_pa_set!member(p, !disembarkedPassengers(s)) ->
  C_pa_set!member(DskToCpa!to_super(p), !cabinPassengers(s))
proof = by property C_pa_set!union2, DskToCpa!to_super_set_const2
        definition of cabinPassengers;
 
(** Domain property: departing passengers are instances of cabin passengers *)

theorem departingPassenger_cabinPassenger : all s : Self,
  all p : Dep_passenger,
  Dep_pa_set!member(p, !departingPassengers(s)) ->
  C_pa_set!member(DepToCpa!to_super(p), !cabinPassengers(s))
proof = by property C_pa_set!union2, DepToCpa!to_super_set_const2
        definition of cabinPassengers;
 
signature departingAircraft : Self -> Dep_ac_set;
signature securityRestrictedAreas : Self -> Sra_set;

(** conversion function from c_person to a_subject *)

let cpToAs (p : C_person) : A_subject = ApToAs!to_super(CpToAp!to_super(p));

(** Domain property : c_person to a_subject conversion properties *)

theorem cperson_to_a_subject : all p : C_person,
  A_subject!equal(!cpToAs(p), ApToAs!to_super((CpToAp!to_super(p))))
proof = by property A_subject!equal_reflexive definition of cpToAs;

theorem cperson_to_a_subject2 : all x y : C_person,
  C_person!equal(x, y) -> A_subject!equal(!cpToAs(x), !cpToAs(y))
proof = assumed (* To do *);

(* BUG COQ 
proof = by property CpToAp!to_super_congruence, ApToAs!to_super_congruence
        definition of cpToAs;*)

(** Domain property : Persons on board an aircraft in a Sra are considered to
    be in the Sra as well. *)

property departingAircraft_ob_person : all a : D_aircraft, all p : C_person,
  all s : Self, all area : Sra,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Cp_set!member(p, D_aircraft!onboardPersons(a)) ->
  As_set!member(!cpToAs(p), Sra!airsideSubjects_in_sra(area));

(** Domain property : Persons on board an aircraft are considered to have
    access to that aircraft. *)

property departingAircraft_cabinPerson : all a : D_aircraft, all p : C_person,
  all s : Self,
  Dep_ac_set!member(a, !departingAircraft (s)) ->
  Cp_set!member(p, D_aircraft!onboardPersons(a)) ->
  D_aircraft!accessing_aircraft(!cpToAs(p), a);

(** Domain property : airside subjects having access to aircraft in a sra is
    considered to be in the sra as well. *)

property airsideSubjects_in_sra : all sa : Sra, all s : Self,
  all a : D_aircraft,
  Sra_set!member(sa, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(sa)) ->
  all p : A_subject, D_aircraft!accessing_aircraft(p, a) ->
    As_set!member(p, Sra!airsideSubjects_in_sra(sa));

(** Domain property : similarly hold baggage loaded into an aircraft departing 
    from a Sra is considered to be in the Sra *)

property holdBaggage_in_sra : all sa : Sra, all s : Self,
  Sra_set!member(sa, !securityRestrictedAreas(s)) ->
  all a : D_aircraft, Dep_ac_set!member(a, Sra!departingAircraft_in_sra(sa)) ->
    Hl_set!subset(D_aircraft!loadedHoldBaggage(a), Sra!holdBaggage_in_sra(sa));

(** Domain property: All airside subjects in each Sra belongs to the given set
    airsideSubjects *)
  
property domain_restriction_sra1 : all area : Sra, all s : Self,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  As_set!subset(Sra!airsideSubjects_in_sra(area), !airsideSubjects(s));

(** Domain property : departing aircraft in sra belong to the given set
    departing aircraft *)

property sra_departingAircraft : all a : D_aircraft, all s : Self,
  all area : Sra,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Dep_ac_set!member(a, !departingAircraft(s));

(** Domain property : airsideSubjects cannot be in two or more security
    restricted areas at the same time *)

property domain_restriction_sra3 : all x y : Sra, all s : Self,
  ~ (Sra!equal(x, y)) ->
  Sra_set!member(x, !securityRestrictedAreas(s)) -> 
  Sra_set!member(y, !securityRestrictedAreas(s)) -> 
  As_set!equal(As_set!inter(Sra!airsideSubjects_in_sra(x),
                            Sra!airsideSubjects_in_sra(y)), As_set!empty);

(** Domain property : departingAircraft cannot be in two or more security
    restricted areas at the same time *)

property domain_restriction_sra4 : all x y : Sra, all s : Self,
  ~ (Sra!equal(x, y)) ->
  Sra_set!member(x, !securityRestrictedAreas(s)) ->
  Sra_set!member(y, !securityRestrictedAreas(s)) ->
  Dep_ac_set!equal(Dep_ac_set!inter(Sra!departingAircraft_in_sra(x),
                                    Sra!departingAircraft_in_sra(y)),
                   Dep_ac_set!empty);

(** Domain property : hold baggage cannot be in two or more security restricted
    areas at the same time *)

property domain_restriction_sra5 : all x y : Sra, all s : Self,
  ~ (Sra!equal(x, y)) ->
  Sra_set!member(x, !securityRestrictedAreas(s)) ->
  Sra_set!member(y, !securityRestrictedAreas(s)) ->
  Hl_set!equal(Hl_set!inter(Sra!holdBaggage_in_sra(x),
                            Sra!holdBaggage_in_sra(y)), Hl_set!empty);

(** Domain property : an object cannot be owned by the two or more
    airsideSubjects *)

property domain_restriction_airsideSubjects : all x y : A_subject,
  all s : Self, 
  ~ (A_subject!equal(x, y)) ->
  As_set!member(x, !airsideSubjects(s)) ->
  As_set!member(y, !airsideSubjects(s)) ->
  Obj_set!equal(Obj_set!inter(A_subject!objects_carried(x),
                              A_subject!objects_carried(y)), Obj_set!empty);

(** Domain property : all objects carried by airside subjects belong to 
    the given set objects. *)

property object_airsideSubjects : all p : A_subject, all s : Self,
  As_set!member(p, !airsideSubjects(s)) ->
  Obj_set!subset(A_subject!objects_carried(p), !objects(s));

signature allHoldBaggage_in_sra : Self -> Hl_set;

property allHoldBaggage_in_sra1 : all s : Self, all l : H_baggage,
  Hl_set!member(l, !allHoldBaggage_in_sra(s)) ->
  (ex area : Sra,
    Sra_set!member(area, !securityRestrictedAreas(s)) /\ 
    Hl_set!member(l, Sra!holdBaggage_in_sra(area)));

property allHoldBaggage_in_sra2 : all s : Self, all l : H_baggage,
  all area : Sra,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Hl_set!member(l, Sra!holdBaggage_in_sra(area)) ->
  Hl_set!member(l, !allHoldBaggage_in_sra(s));

(** Domain property : baggage designated as hold baggage are considered to 
    have been checked-in and therefore are in security restricted areas *)

property domain_restriction_holdBaggage : all s : Self,
  Hl_set!equal(!holdBaggage(s), !allHoldBaggage_in_sra(s));
  
(** Domain property : hold baggage cannot be loaded in two or more departing
    aircraft at the same time *)

property domain_restriction_holdBaggage2 : all x y : D_aircraft, all s : Self,
  ~ (D_aircraft!equal(x, y)) ->
  Dep_ac_set!member(x, !departingAircraft(s)) ->
  Dep_ac_set!member(y, !departingAircraft(s)) ->
  Hl_set!equal(Hl_set!inter(D_aircraft!loadedHoldBaggage(x),
                            D_aircraft!loadedHoldBaggage(y)), Hl_set!empty);

(** Domain property : all objects contained in hold baggage belong to the given
    set objects *)

property domain_restriction_holdBaggage3 : all l : H_baggage, all s : Self,
  Hl_set!member(l, !holdBaggage(s)) ->
  Obj_set!subset(H_baggage!get_objects(l), !objects(s));

(** Domain property : cabin person cannot be on board two or more departing
    aircraft at the same time *)

property domain_restriction_cabinPerson1 : all x y : D_aircraft, all s : Self,
  ~ (D_aircraft!equal(x, y)) ->
  Dep_ac_set!member(x, !departingAircraft(s)) ->
  Dep_ac_set!member(y, !departingAircraft(s)) ->
  Cp_set!equal(Cp_set!inter(D_aircraft!onboardPersons(x),
                            D_aircraft!onboardPersons(y)), Cp_set!empty);

(** Domain property : all cabin persons on board departing aircraft 
    belong to the given set cabin persons *)

property domain_restriction_cabinPerson2 : all a : D_aircraft, all s : Self,
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  Cp_set!subset(D_aircraft!onboardPersons(a), !cabinPersons(s));

(** Domain property : Hold baggage loaded into aircraft departing from sra
    belong to the given set hold baggage *)

theorem domain_hBaggageAircraft : all a : D_aircraft, all area : Sra,
  all s : Self,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Hl_set!subset(D_aircraft!loadedHoldBaggage(a), !holdBaggage(s))
proof = assumed (* To do *);

(* BUG ZENON
proof = by property !holdBaggage_in_sra, !allHoldBaggage_in_sra2,
        Hl_set!subset5, Hl_set!subset2, Hl_set!equal1,
        !domain_restriction_holdBaggage;*)

(** Domain property : all initial objects on board aircraft belong to the given
    set objects *)

property domain_restriction_departingAircraft1 : all a : D_aircraft,
  all s : Self, 
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  Obj_set!subset(D_aircraft!initial_objects(a), !objects(s));

(** Domain property : pilots for all departing aircraft belongs to the given
    set pilots *)

property domain_restriction_departingAircraft2 : all a : D_aircraft,
  all s : Self, 
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  Pilot_set!member(D_aircraft!pilot_in_command(a), !pilots(s));

(** Domain property : an item of cabin baggage belongs to one and only one
    cabin person *)

property cabinBaggage_cabinPerson : all s : Self, all x y : C_person,
  Cp_set!member(x, !cabinPersons(s)) ->
  Cp_set!member(y, !cabinPersons(s)) ->
  ~ (C_person!equal(x, y)) ->
  Cb_set!equal(Cb_set!inter(C_person!cabinBaggage(x),
                            C_person!cabinBaggage(y)), Cb_set!empty);

(** Domain property : all objects contained in cabin baggage of cabin persons 
    belong to the given set objects *)

property cabinBaggage_cabinPerson2 : all s : Self, all p : C_person,
  all cb : C_baggage,
  Cp_set!member(p, !cabinPersons(s)) ->
  Cb_set!member(cb, C_person!cabinBaggage(p)) ->
  Obj_set!subset(C_baggage!get_objects(cb), !objects(s));

(** conversion function from u_person to a_subject *)

let upToAs (p : U_person) : A_subject = ApToAs!to_super((UpToAp!to_super(p)));

(** Domain property : U_person to A_subject conversion properties *)

theorem uperson_to_a_subject : all p : U_person,
  A_subject!equal(!upToAs(p), ApToAs!to_super((UpToAp!to_super(p))))
proof = by property A_subject!equal_reflexive definition of upToAs;

theorem uperson_to_a_subject2 : all x y : U_person,
  U_person!equal(x, y) -> A_subject!equal(!upToAs(x), !upToAs(y))
proof = assumed (* To do *);

(* BUG COQ
proof = by property UpToAp!to_super_congruence, ApToAs!to_super_congruence
       definition of upToAs;*)

(** unescorted person in a given security restricted area *)
 
signature unescortedPersons_in_sra : Sra -> Self -> Up_set;

property unescortedPersons_in_sra1 : all area : Sra, all s : Self,
  all p : U_person,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Up_set!member(p, !unescortedPersons_in_sra(area, s)) ->
  As_set!member(!upToAs(p), Sra!airsideSubjects_in_sra(area));

property unescortedPersons_in_sra2 : all area : Sra, all s : Self,
  all p : U_person,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  As_set!member(!upToAs(p), Sra!airsideSubjects_in_sra(area)) ->
  Up_set!member(p, !unescortedPersons_in_sra(area, s));

signature screenedUnescortedPersons : Sra -> Self -> Up_set;

property screenedUnescortedPerson1 : all area : Sra, all s : Self,
  all p : U_person,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Up_set!member(p, !screenedUnescortedPersons(area, s)) ->
  (Up_set!member(p, !unescortedPersons_in_sra(area, s)) /\
   U_person!screened(p));

property screenedUnescortedPerson2 : all area : Sra, all s : Self,
  all p : U_person,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Up_set!member(p, !unescortedPersons_in_sra(area, s)) ->
  U_person!screened(p) ->
  Up_set!member(p, !screenedUnescortedPersons(area, s));

(** conversion function from weapon to object *)

let wpToObj (o : Wp) : Obj = DoToObj!to_super((WpToDo!to_super(o)));

(** Domain property : weapon to object conversion properties *)

theorem weapon_to_object : all o : Wp,
  Obj!equal(!wpToObj(o), DoToObj!to_super((WpToDo!to_super(o))))
proof = by property Obj!equal_reflexive definition of wpToObj;

theorem weapon_to_object2 : all x y : Wp,
  Wp!equal(x, y) -> Obj!equal(!wpToObj(x), !wpToObj(y))
proof = assumed (* To do *);

(* BUG COQ
proof = by property WpToDo!to_super_congruence, DoToObj!to_super_congruence
        definition of wpToObj;*)

(** conversion function from Dep_passenger to C_person *)

let depToCp (p : Dep_passenger) : C_person =
  CpaToCp!to_super(DepToCpa!to_super(p));

(** Domain property : Dep_passenger to C_person conversion properties *)

theorem dep_passenger_to_cperson : all p : Dep_passenger,
  C_person!equal(!depToCp(p), CpaToCp!to_super(DepToCpa!to_super(p)))
proof = by property C_person!equal_reflexive definition of depToCp;

theorem dep_passenger_to_cperson2 : all x y : Dep_passenger,
  Dep_passenger!equal(x, y) -> C_person!equal(!depToCp(x), !depToCp(y))
proof = assumed (* To do *);

(* BUG COQ
proof = by property DepToCpa!to_super_congruence, CpaToCp!to_super_congruence
        definition of depToCp;*)

(** conversion function from Dep_passenger set to C_person set *)

let depToCp_set (p : Dep_pa_set) : Cp_set =
  CpaToCp!to_super_set(DepToCpa!to_super_set(p));

(** Domain property : Dep_passenger set to C_person set conversion
    properties. *)

theorem dep_passenger_to_cperson_set : all p : Dep_pa_set,
  Cp_set!equal(!depToCp_set(p), CpaToCp!to_super_set(DepToCpa!to_super_set(p)))
proof = by property Cp_set!equal_reflexive definition of depToCp_set;

(** conversion function from Dsk_passenger to C_person *)

let dskToCp (p : Dsk_passenger) : C_person =
  CpaToCp!to_super(DskToCpa!to_super(p));

(** Domain property : Dsk_passenger to C_person conversion properties *)

theorem dsk_passenger_to_cperson : all p : Dsk_passenger,
  C_person!equal(!dskToCp(p), CpaToCp!to_super(DskToCpa!to_super(p)))
proof = by property C_person!equal_reflexive definition of dskToCp;

theorem dsk_passenger_to_cperson2 : all x y : Dsk_passenger,
  Dsk_passenger!equal(x, y) -> C_person!equal(!dskToCp(x), !dskToCp(y))
proof = assumed (* To do *);

(* BUG COQ
proof = by property DskToCpa!to_super_congruence, CpaToCp!to_super_congruence
        definition of dskToCp;*)

(** conversion function from Dsk_passenger set to C_person set *)

let dskToCp_set (p : Dsk_pa_set) : Cp_set =
  CpaToCp!to_super_set(DskToCpa!to_super_set(p));

(** Domain property : Dsk_passenger set to C_person set conversion
    properties. *)

theorem dsk_passenger_to_cperson_set : all p : Dsk_pa_set,
  Cp_set!equal(!dskToCp_set(p), CpaToCp!to_super_set(DskToCpa!to_super_set(p)))
proof = by property Cp_set!equal_reflexive definition of dskToCp_set;

(** conversion function from Dsk_passenger to A_person *)

let dskToAp (p : Dsk_passenger) : A_person = CpToAp!to_super(!dskToCp(p));

(** Domain property : Dsk_passenger to A_person conversion properties *)

theorem dsk_passenger_to_a_person : all p : Dsk_passenger,
  A_person!equal(!dskToAp(p), CpToAp!to_super(!dskToCp(p)))
proof = by property A_person!equal_reflexive definition of dskToAp;

theorem dsk_passenger_to_a_person2 : all x y : Dsk_passenger,
  Dsk_passenger!equal(x, y) -> A_person!equal(!dskToAp(x), !dskToAp(y))
proof = by property !dsk_passenger_to_cperson2, CpToAp!to_super_congruence
        definition of dskToAp;

theorem dsk_passenger_object_a_person : all x : Dsk_passenger,
  Obj_set!equal(A_person!objects_carried(!dskToAp(x)),
                Dsk_passenger!objects_carried(x))
proof = assumed (* To do *);

(* BUG COQ
proof = by property DskToCpa!to_super_airsideSubject,
        CpaToCp!to_super_airsideSubject, CpToAp!to_super_airsideSubject,
        Obj_set!equal_transitive, Obj_set!equal_symmetric
        definition of dskToAp, dskToCp;*)

(** conversion function from Dsk_passenger to A_subject *)

let dskToAs (p : Dsk_passenger) : A_subject = !cpToAs(!dskToCp(p));

(** Domain property : Dsk_passenger to A_subject conversion properties *)

theorem dsk_passenger_to_a_subject : all p : Dsk_passenger,
  A_subject!equal(!dskToAs(p), !cpToAs(!dskToCp(p)))
proof = by property A_subject!equal_reflexive definition of dskToAs;

theorem dsk_passenger_to_a_subject2 : all x y : Dsk_passenger,
  Dsk_passenger!equal(x, y) -> A_subject!equal(!dskToAs(x), !dskToAs(y))
proof = by property !dsk_passenger_to_cperson2, !cperson_to_a_subject2
        definition of dskToAs;

theorem dsk_passenger_object : all x : Dsk_passenger,
  Obj_set!equal(A_subject!objects_carried(!dskToAs(x)),
                Dsk_passenger!objects_carried(x))
proof = assumed (* To do *);

(* BUG COQ
proof = by property DskToCpa!to_super_airsideSubject,
        CpaToCp!to_super_airsideSubject, CpToAp!to_super_airsideSubject,
        ApToAs!to_super_airsideSubject, Obj_set!equal_transitive,
        Obj_set!equal_symmetric 
        definition of dskToAs, dskToCp, cpToAs;*)

logical let is_unescorted_person_vehicle (p : A_subject, s : Self) =
  (ex up : U_person,
    Up_set!member(up, !unescortedPersons(s)) /\
    A_subject!equal(!upToAs(up), p)) \/ 
  (ex v : Av,
    Av_set!member(v, !airsideVehicles(s)) /\
    A_subject!equal(AvToAs!to_super(v), p));

(** Domain property : airside subjects not accessing a departing aircraft 
    cannot introduced objects on board that aircraft. *)

property aSubject_dAircraft_not_access : all sa : Sra, all s : Self,
  all a : D_aircraft, all p : A_subject,
  Sra_set!member(sa, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(sa)) ->
  ~ (D_aircraft!accessing_aircraft(p, a)) ->
  all o : Obj,
    Obj_set!member(o, A_subject!objects_carried(p)) ->
    ~ (Obj_set!member(o, D_aircraft!onboardObjects(a)));

(** Predicate to test where a disembarked passenger is ending his/her
    journey *)

logical let not_transfer_or_transit (p : Dsk_passenger, s : Self) =
  ~ (Dsk_pa_set!member(p, TfToDsk!to_super_set(!transferPassengers(s)))) /\
  ~ (Dsk_pa_set!member(p, TsToDsk!to_super_set(!transitPassengers(s))));

(** Domain property : airside subjects having authorized access in sra belong
    to the given set airsideSubjects *)

property authorized_sra_const : all sa : Sra, all s : Self,
  all p : A_subject,
  Sra_set!member(sa, !securityRestrictedAreas(s)) ->
  Sra!access_authorized(p, sa) ->
  As_set!member(p, !airsideSubjects(s));

(** facts modeling a particular scenario against which the 
    regulation will be verified to detect contradictions or 
    conflicting security properties *)
 
signature zone1 : Sra;
signature my_airport : Self;

property fact1 : Sra_set!member(!zone1, !securityRestrictedAreas(!my_airport));

end;;
