(* $Id: holdBaggageEnv.fcl,v 1.1 2011-08-02 16:11:08 delahaye Exp $ *)

open "basic_sets";;
open "a17subjects";;
open "conversionFunctions";;
open "ordinaryPassengersEnv";;
open "specialPassengersEnv";;

species HoldBaggageEnv(Obj is Object,
                       Obj_set is Finite_set(Obj),
                       Do is DangerousObject,
                       Do_set is Finite_set(Do),
                       Wp is Weapon,
                       Wp_set is Finite_set(Wp),
                       Eo is Explosive,
                       Eo_set is Finite_set(Eo),
                       Dd is DangerousDevice,
                       Dd_set is Finite_set(Dd),
                       A_subject is AirsideSubject(Obj, Obj_set),
                       As_set is Finite_set(A_subject),
                       A_vehicle is AirsideVehicle(Obj, Obj_set),
                       Av_set is Finite_set(A_vehicle),
                       C_baggage is CabinBaggage(Obj, Obj_set),
                       Cb_set is Finite_set(C_baggage),
                       C_person is CabinPerson(Obj, Obj_set, C_baggage,
                         Cb_set),
                       Cp_set is Finite_set(C_person),
                       Seat_no is Seat_number,
                       Seat_set is Finite_set(Seat_no),
                       C_passenger is CabinPassenger(Obj, Obj_set, C_baggage,
                         Cb_set, Seat_no),
                       C_pa_set is Finite_set(C_passenger),
                       H_baggage is HoldBaggage(Obj, Obj_set, C_baggage,
                         Cb_set, Seat_no, C_passenger),
                       Hl_set is Finite_set(H_baggage),
                       Arm_passenger is ArmedPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no),
                       Arm_pa_set is Finite_set(Arm_passenger),
                       A_pilot is Pilot(Obj, Obj_set, C_baggage, Cb_set,
                         Seat_no, Seat_set),
                       Pilot_set is Finite_set(A_pilot),
                       A_carrier is AirCarrier,
                       D_aircraft is DepartingAircraft(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, C_person,
                         Cp_set, Seat_no, Seat_set, C_passenger, H_baggage,
                         Hl_set, Arm_passenger, A_pilot, A_carrier),
                       Dep_ac_set is Finite_set(D_aircraft),
                       A_person is AirsidePerson(Obj, Obj_set),
                       Ap_set is Finite_set(A_person),
                       U_person is UnescortedPerson(Obj, Obj_set),
                       Up_set is Finite_set(U_person),
                       Dsk_passenger is DisembarkedPassenger(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no),
                       Dsk_pa_set is Finite_set(Dsk_passenger),
                       Dep_passenger is DepartingPassenger(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no),
                       Dep_pa_set is Finite_set(Dep_passenger),
                       O_passenger is OrdinaryPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person),
                       Ord_pa_set is Finite_set(O_passenger),
                       Og_passenger is OriginatingPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person),
                       Og_pa_set is Finite_set(Og_passenger),
                       Tf_passenger is TransferPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person),
                       Tf_pa_set is Finite_set(Tf_passenger),
                       Ts_passenger is TransitPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person),
                       Ts_pa_set is Finite_set(Ts_passenger),
                       Sc_passenger is ScreenedPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person),
                       Sc_pa_set is Finite_set(Sc_passenger),
                       Arm_personnel is ArmedPersonnel(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no),
                       Arm_pe_set is Finite_set(Arm_personnel),
                       If_officer is InFlightOfficer(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no),
                       If_of_set is Finite_set(If_officer),
                       Dis_passenger is DisruptivePassenger(Obj, Obj_set, Do,
                         C_baggage, Cb_set, Seat_no),
                       Dis_pa_set is Finite_set(Dis_passenger),
                       Oh_baggage is OriginatingHoldBaggage(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, C_passenger),
                       Oh_set is Finite_set(Oh_baggage),
                       Th_baggage is TransferHoldBaggage(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, C_passenger),
                       Th_set is Finite_set(Th_baggage),
                       Sra is SecurityRestrictedArea(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, U_person,
                         C_person, Cp_set, Seat_no, Seat_set, C_passenger,
                         H_baggage, Hl_set, Arm_passenger, A_pilot, A_carrier,
                         D_aircraft, Dep_ac_set),
                       Sra_set is Finite_set(Sra),
                       WpToDo is DangerousObject_subtype(Wp, Do, Wp_set,
                         Do_set),
                       EoToDo is DangerousObject_subtype(Eo, Do, Eo_set,
                         Do_set),
                       DdToDo is DangerousObject_subtype(Dd, Do, Dd_set,
                         Do_set),
                       DoToObj is DangerousObjectToObject(Do, Obj, Do_set,
                         Obj_set),
                       ApToAs is AirsideSubject_subtype(Obj, Obj_set, A_person,
                         A_subject, Ap_set, As_set),
                       CpToAp is AirsideSubject_subtype(Obj, Obj_set, C_person,
                         A_person, Cp_set, Ap_set),
                       UpToAp is AirsideSubject_subtype(Obj, Obj_set, U_person,
                         A_person, Up_set, Ap_set),
                       AvToAs is AirsideSubject_subtype(Obj, Obj_set,
                         A_vehicle, A_subject, Av_set, As_set),
                       PiToUp is UnescortedPerson_subtype(Obj, Obj_set,
                         A_pilot, U_person, Pilot_set, Up_set),
                       PiToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                         Cb_set, A_pilot, C_person, Pilot_set, Cp_set),
                       DskToCpa is CabinPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Dsk_passenger,
                         C_passenger, Dsk_pa_set, C_pa_set),
                       DepToCpa is CabinPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Dep_passenger,
                         C_passenger, Dep_pa_set, C_pa_set),
                       CpaToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                         Cb_set, C_passenger, C_person, C_pa_set, Cp_set),
                       OpToDep is DepartingPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, O_passenger,
                         Dep_passenger, Ord_pa_set, Dep_pa_set),
                       ScToOp is OrdinaryPassenger_subtype(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person, Sc_passenger,
                         O_passenger, Sc_pa_set, Ord_pa_set),
                       TsToOp is OrdinaryPassenger_subtype(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person, Ts_passenger,
                         O_passenger, Ts_pa_set, Ord_pa_set),
                       TsToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Ts_passenger,
                         Dsk_passenger, Ts_pa_set, Dsk_pa_set),
                       TfToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Tf_passenger,
                         Dsk_passenger, Tf_pa_set, Dsk_pa_set),
                       OgToSc is ScreenedPassenger_subtype(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person, Og_passenger,
                         Sc_passenger, Og_pa_set, Sc_pa_set),
                       TfToSc is ScreenedPassenger_subtype(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person, Tf_passenger,
                         Sc_passenger, Tf_pa_set, Sc_pa_set),
                       ArmToDep is DepartingPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Arm_passenger,
                         Dep_passenger, Arm_pa_set, Dep_pa_set),
                       DisToDep is DepartingPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Dis_passenger,
                         Dep_passenger, Dis_pa_set, Dep_pa_set),
                       ApeToArm is ArmedPassenger_subtype(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, Arm_personnel,
                         Arm_passenger, Arm_pe_set, Arm_pa_set),
                       IfoToArm is ArmedPassenger_subtype(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, If_officer, Arm_passenger,
                         If_of_set, Arm_pa_set),
                       OhToHl is HoldBaggage_subtype(Obj, Obj_set, C_baggage,
                         Cb_set, Seat_no, C_passenger, Oh_baggage, H_baggage,
                         Oh_set, Hl_set),
                       ThToHl is HoldBaggage_subtype(Obj, Obj_set, C_baggage,
                         Cb_set, Seat_no, C_passenger, Th_baggage, H_baggage,
                         Th_set, Hl_set)) =

  inherit OrdinaryPassengersEnv(Obj, Obj_set, Do, Do_set, Wp, Wp_set, Eo,
                                Eo_set, Dd, Dd_set, A_subject, As_set,
                                A_vehicle, Av_set, C_baggage, Cb_set, C_person,
                                Cp_set, Seat_no, Seat_set, C_passenger,
                                C_pa_set, H_baggage, Hl_set, Arm_passenger,
                                A_pilot, Pilot_set, A_carrier, D_aircraft,
                                Dep_ac_set, A_person, Ap_set, U_person,
                                Up_set, Dsk_passenger, Dsk_pa_set,
                                Dep_passenger, Dep_pa_set, O_passenger,
                                Ord_pa_set, Og_passenger, Og_pa_set,
                                Tf_passenger, Tf_pa_set, Ts_passenger,
                                Ts_pa_set, Sc_passenger, Sc_pa_set, Sra,
                                Sra_set, WpToDo, EoToDo, DdToDo, DoToObj,
                                ApToAs, CpToAp, UpToAp, AvToAs, PiToUp, PiToCp,
                                DskToCpa, DepToCpa, CpaToCp, OpToDep, ScToOp,
                                TsToOp, TsToDsk, TfToDsk, OgToSc, TfToSc),
          SpecialPassengersEnv(Obj, Obj_set, Do, Do_set, Wp, Wp_set, Eo,
                               Eo_set, Dd, Dd_set, A_subject, As_set,
                               A_vehicle, Av_set, C_baggage, Cb_set, C_person,
                               Cp_set, Seat_no, Seat_set, C_passenger,
                               C_pa_set, H_baggage, Hl_set, Arm_passenger,
                               Arm_pa_set, A_pilot, Pilot_set, A_carrier,
                               D_aircraft, Dep_ac_set, A_person, Ap_set,
                               U_person, Up_set, Dsk_passenger, Dsk_pa_set,
                               Dep_passenger, Dep_pa_set, Tf_passenger,
                               Tf_pa_set, Ts_passenger, Ts_pa_set,
                               Arm_personnel, Arm_pe_set, If_officer,
                               If_of_set, Dis_passenger, Dis_pa_set, Sra,
                               Sra_set, WpToDo, EoToDo, DdToDo, DoToObj,
                               ApToAs, CpToAp, UpToAp, AvToAs, PiToUp, PiToCp,
                               DskToCpa, DepToCpa, CpaToCp, TsToDsk, TfToDsk,
                               ArmToDep, DisToDep, ApeToArm, IfoToArm);

let departingPassengers (s : Self) : Dep_pa_set =
  Dep_pa_set!union(OpToDep!to_super_set(!ordinaryPassengers(s)),
    Dep_pa_set!union(ArmToDep!to_super_set(!armedPassengers(s)),
                     DisToDep!to_super_set(!disruptivePassengers(s))));

signature originatingHoldBaggage : Self -> Oh_set;
signature transferHoldBaggage : Self -> Th_set;

let holdBaggage (s : Self) : Hl_set =
  Hl_set!union(OhToHl!to_super_set(!originatingHoldBaggage(s)),
               ThToHl!to_super_set(!transferHoldBaggage(s)));

theorem originatingHoldBaggage_holdBaggage : all hl : Oh_baggage, all s : Self,
  Oh_set!member(hl, !originatingHoldBaggage(s)) ->
  Hl_set!member(OhToHl!to_super(hl), !holdBaggage(s))
proof = by property Hl_set!union2, OhToHl!to_super_set_const2
        definition of holdBaggage;

theorem transferHoldBaggage_holdBaggage : all hl : Th_baggage, all s : Self,
  Th_set!member(hl, !transferHoldBaggage(s)) ->
  Hl_set!member(ThToHl!to_super(hl), !holdBaggage(s))
proof = by property Hl_set!union2, ThToHl!to_super_set_const2
        definition of holdBaggage;

(** Domain Property : the owner of an item of hold baggage  belongs to the 
    given set cabin passenger *)

property owner_hold_baggage1 : all s : Self, all hl : H_baggage,
  Hl_set!member(hl, !holdBaggage(s)) ->
  C_pa_set!member(H_baggage!owner(hl), !cabinPassengers(s));

(** Domain Property: a hold baggage is owned by one and only one cabin
    passenger. *)

property owner_hold_baggage2 : all s : Self, all h1 h2 : H_baggage,
  Hl_set!member(h1, !holdBaggage(s)) -> Hl_set!member(h2, !holdBaggage(s)) ->
  ~ (H_baggage!equal(h1, h2)) ->
  ~ (C_passenger!equal(H_baggage!owner(h1), H_baggage!owner(h2)));

(** Domain Property: hold baggage loaded on departed aircraft cannot be
    subjected to unauthorized interference. *)

property holdBaggage_departedAircraft : all s : Self, all hl : H_baggage,
  all area : Sra, all a : D_aircraft,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Hl_set!member(hl, D_aircraft!loadedHoldBaggage(a)) ->
  D_aircraft!departed(a) -> ~ (H_baggage!interference(hl));

proof of ordinaryPassenger_depPassenger =
<1>1 assume s : Self,
     prove Dep_pa_set!subset(OpToDep!to_super_set(!ordinaryPassengers(s)),
                             !departingPassengers(s))
     <2>1 assume p : Dep_passenger,
          hypothesis H1 :
            Dep_pa_set!member(p, OpToDep!to_super_set(!ordinaryPassengers(s))),
          prove Dep_pa_set!member(p, !departingPassengers(s))
          by hypothesis H1 property Dep_pa_set!union3
          definition of departingPassengers
     <2>2 qed by step <2>1 property Dep_pa_set!subset5
<1>2 conclude;

proof of armedPassenger_departingPassenger =
<1>1 assume s : Self,
     prove Dep_pa_set!subset(ArmToDep!to_super_set(!armedPassengers(s)),
                             !departingPassengers(s))
     <2>1 assume p : Dep_passenger,
          hypothesis H1 :
            Dep_pa_set!member(p, ArmToDep!to_super_set(!armedPassengers(s))),
          prove Dep_pa_set!member(p, !departingPassengers(s))
          by hypothesis H1 property Dep_pa_set!union2
          definition of departingPassengers
     <2>2 qed by step <2>1 property Dep_pa_set!subset5
<1>2 conclude;

proof of disruptivePassenger_departingPassenger =
<1>1 assume s : Self,
     prove Dep_pa_set!subset(DisToDep!to_super_set(!disruptivePassengers(s)),
                             !departingPassengers(s))
     <2>1 assume p : Dep_passenger,
          hypothesis H1 : Dep_pa_set!member(p,
            DisToDep!to_super_set(!disruptivePassengers(s))),
          prove Dep_pa_set!member(p, !departingPassengers(s))
          by hypothesis H1 property Dep_pa_set!union2
          definition of departingPassengers
     <2>2 qed by step <2>1 property Dep_pa_set!subset5
<1>2 conclude;

end;;
