(* $Id: specialPassengersEnv.fcl,v 1.1 2011-08-02 16:11:08 delahaye Exp $ *)

open "basic_sets";;
open "a17subjects";;
open "conversionFunctions";;
open "airsideSubjects";;

species SpecialPassengersEnv(Obj is Object,
                             Obj_set is Finite_set(Obj),
                             Do is DangerousObject,
                             Do_set is Finite_set(Do),
                             Wp is Weapon,
                             Wp_set is Finite_set(Wp),
                             Eo is Explosive,
                             Eo_set is Finite_set(Eo),
                             Dd is DangerousDevice,
                             Dd_set is Finite_set(Dd),
                             A_subject is AirsideSubject(Obj, Obj_set),
                             As_set is Finite_set(A_subject),
                             A_vehicle is AirsideVehicle(Obj, Obj_set),
                             Av_set is Finite_set(A_vehicle),
                             C_baggage is CabinBaggage(Obj, Obj_set),
                             Cb_set is Finite_set(C_baggage),
                             C_person is CabinPerson(Obj, Obj_set, C_baggage,
                               Cb_set),
                             Cp_set is Finite_set(C_person),
                             Seat_no is Seat_number,
                             Seat_set is Finite_set(Seat_no),
                             C_passenger is CabinPassenger(Obj, Obj_set,
                               C_baggage, Cb_set, Seat_no),
                             C_pa_set is Finite_set(C_passenger),
                             H_baggage is HoldBaggage(Obj, Obj_set, C_baggage,
                               Cb_set, Seat_no, C_passenger),
                             Hl_set is Finite_set(H_baggage),
                             Arm_passenger is ArmedPassenger(Obj, Obj_set, Wp,
                               C_baggage, Cb_set, Seat_no),
                             Arm_pa_set is Finite_set(Arm_passenger),
                             A_pilot is Pilot(Obj, Obj_set, C_baggage, Cb_set,
                               Seat_no, Seat_set),
                             Pilot_set is Finite_set(A_pilot),
                             A_carrier is AirCarrier,
                             D_aircraft is DepartingAircraft(Obj, Obj_set, Wp,
                               A_subject, As_set, C_baggage, Cb_set, C_person,
                               Cp_set, Seat_no, Seat_set, C_passenger,
                               H_baggage, Hl_set, Arm_passenger, A_pilot,
                               A_carrier),
                             Dep_ac_set is Finite_set(D_aircraft),
                             A_person is AirsidePerson(Obj, Obj_set),
                             Ap_set is Finite_set(A_person),
                             U_person is UnescortedPerson(Obj, Obj_set),
                             Up_set is Finite_set(U_person),
                             Dsk_passenger is DisembarkedPassenger(Obj,
                               Obj_set, C_baggage, Cb_set, Seat_no),
                             Dsk_pa_set is Finite_set(Dsk_passenger),
                             Dep_passenger is DepartingPassenger(Obj, Obj_set,
                               C_baggage, Cb_set, Seat_no),
                             Dep_pa_set is Finite_set(Dep_passenger),
                             Tf_passenger is TransferPassenger(Obj, Obj_set,
                               Wp, C_baggage, Cb_set, Seat_no, A_person),
                             Tf_pa_set is Finite_set(Tf_passenger),
                             Ts_passenger is TransitPassenger(Obj, Obj_set, Wp,
                               C_baggage, Cb_set, Seat_no, A_person),
                             Ts_pa_set is Finite_set(Ts_passenger),
                             Arm_personnel is ArmedPersonnel(Obj, Obj_set, Wp,
                               C_baggage, Cb_set, Seat_no),
                             Arm_pe_set is Finite_set(Arm_personnel),
                             If_officer is InFlightOfficer(Obj, Obj_set, Wp,
                               C_baggage, Cb_set, Seat_no),
                             If_of_set is Finite_set(If_officer),
                             Dis_passenger is DisruptivePassenger(Obj, Obj_set,
                               Do, C_baggage, Cb_set, Seat_no),
                             Dis_pa_set is Finite_set(Dis_passenger),
                             Sra is SecurityRestrictedArea(Obj, Obj_set, Wp,
                               A_subject, As_set, C_baggage, Cb_set, U_person,
                               C_person, Cp_set, Seat_no, Seat_set,
                               C_passenger, H_baggage, Hl_set, Arm_passenger,
                               A_pilot, A_carrier, D_aircraft, Dep_ac_set),
                             Sra_set is Finite_set(Sra),
                             WpToDo is DangerousObject_subtype(Wp, Do, Wp_set,
                               Do_set),
                             EoToDo is DangerousObject_subtype(Eo, Do, Eo_set,
                               Do_set),
                             DdToDo is DangerousObject_subtype(Dd, Do, Dd_set,
                               Do_set),
                             DoToObj is DangerousObjectToObject(Do, Obj,
                               Do_set, Obj_set),
                             ApToAs is AirsideSubject_subtype(Obj, Obj_set,
                               A_person, A_subject, Ap_set, As_set),
                             CpToAp is AirsideSubject_subtype(Obj, Obj_set,
                               C_person, A_person, Cp_set, Ap_set),
                             UpToAp is AirsideSubject_subtype(Obj, Obj_set,
                               U_person, A_person, Up_set, Ap_set),
                             AvToAs is AirsideSubject_subtype(Obj, Obj_set,
                               A_vehicle, A_subject, Av_set, As_set),
                             PiToUp is UnescortedPerson_subtype(Obj, Obj_set,
                               A_pilot, U_person, Pilot_set, Up_set),
                             PiToCp is CabinPerson_subtype(Obj, Obj_set,
                               C_baggage, Cb_set, A_pilot, C_person, Pilot_set,
                               Cp_set),
                             DskToCpa is CabinPassenger_subtype(Obj, Obj_set,
                               C_baggage, Cb_set, Seat_no, Dsk_passenger,
                               C_passenger, Dsk_pa_set, C_pa_set),
                             DepToCpa is CabinPassenger_subtype(Obj, Obj_set,
                               C_baggage, Cb_set, Seat_no, Dep_passenger,
                               C_passenger, Dep_pa_set, C_pa_set),
                             CpaToCp is CabinPerson_subtype(Obj, Obj_set,
                               C_baggage, Cb_set, C_passenger, C_person,
                               C_pa_set, Cp_set),
                             TsToDsk is DisembarkedPassenger_subtype(Obj,
                               Obj_set, C_baggage, Cb_set, Seat_no,
                               Ts_passenger, Dsk_passenger, Ts_pa_set,
                               Dsk_pa_set),
                             TfToDsk is DisembarkedPassenger_subtype(Obj,
                               Obj_set, C_baggage, Cb_set, Seat_no,
                               Tf_passenger, Dsk_passenger, Tf_pa_set,
                               Dsk_pa_set),
                             ArmToDep is DepartingPassenger_subtype(Obj,
                               Obj_set, C_baggage, Cb_set, Seat_no,
                               Arm_passenger, Dep_passenger, Arm_pa_set,
                               Dep_pa_set),
                             DisToDep is DepartingPassenger_subtype(Obj,
                               Obj_set, C_baggage, Cb_set, Seat_no,
                               Dis_passenger, Dep_passenger, Dis_pa_set,
                               Dep_pa_set),
                             ApeToArm is ArmedPassenger_subtype(Obj, Obj_set,
                               Wp, C_baggage, Cb_set, Seat_no, Arm_personnel,
                               Arm_passenger, Arm_pe_set, Arm_pa_set),
                             IfoToArm is ArmedPassenger_subtype(Obj, Obj_set,
                               Wp, C_baggage, Cb_set, Seat_no, If_officer,
                               Arm_passenger, If_of_set, Arm_pa_set)) =

  inherit AirsideEnv(Obj, Obj_set, Do, Do_set, Wp, Wp_set, Eo, Eo_set, Dd,
                     Dd_set, A_subject, As_set, A_vehicle, Av_set, C_baggage,
                     Cb_set, C_person, Cp_set, Seat_no, Seat_set, C_passenger,
                     C_pa_set, H_baggage, Hl_set, Arm_passenger, A_pilot,
                     Pilot_set, A_carrier, D_aircraft, Dep_ac_set, A_person,
                     Ap_set, U_person, Up_set, Dsk_passenger, Dsk_pa_set,
                     Dep_passenger, Dep_pa_set, Tf_passenger, Tf_pa_set,
                     Ts_passenger, Ts_pa_set, Sra, Sra_set, WpToDo, EoToDo,
                     DdToDo, DoToObj, ApToAs, CpToAp, UpToAp, AvToAs, PiToUp,
                     PiToCp, DskToCpa, DepToCpa, CpaToCp, TsToDsk, TfToDsk);

(** Special passengers entities *)

signature armedPersonnel : Self -> Arm_pe_set;
signature inFlightOfficers : Self -> If_of_set;

let armedPassengers (s : Self) : Arm_pa_set =
  Arm_pa_set!union(ApeToArm!to_super_set(!armedPersonnel(s)),
                   IfoToArm!to_super_set(!inFlightOfficers(s)));

(** Domain property: armed personnel are instances of armed passengers *)

theorem armedPersonnel_armedPassenger : all p : Arm_personnel, all s : Self,
  Arm_pe_set!member(p, !armedPersonnel(s)) ->
  Arm_pa_set!member(ApeToArm!to_super(p), !armedPassengers(s))
proof = by property Arm_pa_set!union2, ApeToArm!to_super_set_const2
       definition of armedPassengers;

(** Domain property: in flight officers are instances of armed passengers *)

theorem inFlightOfficer_armedPassenger : all p : If_officer, all s : Self,
  If_of_set!member(p, !inFlightOfficers(s)) ->
  Arm_pa_set!member(IfoToArm!to_super(p), !armedPassengers(s))
proof = by property Arm_pa_set!union2, IfoToArm!to_super_set_const2
        definition of armedPassengers;

signature disruptivePassengers : Self -> Dis_pa_set;

(** Domain property: armed passengers are instances of departing passengers. *)

property armedPassenger_departingPassenger : all s : Self,
  Dep_pa_set!subset(ArmToDep!to_super_set(!armedPassengers(s)),
                    !departingPassengers(s));

(** Domain property: disruptive passengers are instances of departing
    passengers. *)

property disruptivePassenger_departingPassenger : all s : Self,
  Dep_pa_set!subset(DisToDep!to_super_set(!disruptivePassengers(s)),
                    !departingPassengers(s));

(** Domain property: the pilot in command of an aircraft is also considered as
    an onboard person *)

property pilot_onboardPerson : all s : Self, all a : D_aircraft,
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  Cp_set!member(PiToCp!to_super(D_aircraft!pilot_in_command(a)),
                D_aircraft!onboardPersons(a));

(** Conversion function from Dis_passenger to C_person *)

let disToCp (p : Dis_passenger) : C_person = !depToCp((DisToDep!to_super(p)));

(** Domain property: Dis_passenger to C_person conversion properties *)

theorem dis_passenger_to_c_person : all p : Dis_passenger,
  C_person!equal(!disToCp(p), !depToCp((DisToDep!to_super(p))))
proof = by property C_person!equal_reflexive definition of disToCp;

(** Conversion function from Dis_passenger to A_subject *)

let disToAs (p : Dis_passenger) : A_subject = !cpToAs(!disToCp(p));

(** Domain property: Dis_passenger to A_subject conversion properties *)

theorem dis_passenger_to_a_subject : all p : Dis_passenger,
  A_subject!equal(!disToAs(p), !cpToAs(!disToCp(p)))
proof = by property A_subject!equal_reflexive definition of disToAs;

(** Domain property: dangerous object inaccessible in cabin cannot be in
    contact with disruptive passengers on board *)

property disruptivePassenger_inaccessible_do : all s : Self,
  all a : D_aircraft, all p : Dis_passenger, all o : Do,
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  Cp_set!member(!disToCp(p), D_aircraft!onboardPersons(a)) ->
  Obj_set!member(DoToObj!to_super(o), D_aircraft!onboardObjects(a)) ->
  Do!inaccessible_in_cabin(o) -> Dis_passenger!no_contact_with(o, p);

(** Conversion function from Arm_passenger to C_person *)

let armToCp (p : Arm_passenger) : C_person = !depToCp((ArmToDep!to_super(p)));

(** Domain property: Arm_passenger to C_person conversion properties *)

theorem arm_passenger_to_c_person : all p : Arm_passenger,
  C_person!equal(!armToCp(p), !depToCp((ArmToDep!to_super(p))))
proof = by property C_person!equal_reflexive definition of armToCp;

(** Conversion function from Arm_passenger to A_subject *)

let armToAs (p : Arm_passenger) : A_subject = !cpToAs(!armToCp(p));

(** Domain property: Arm_passenger to A_subject conversion properties *)

theorem arm_passenger_to_a_subject : all p : Arm_passenger,
  A_subject!equal(!armToAs(p), !cpToAs(!armToCp(p)))
proof = by property A_subject!equal_reflexive definition of armToAs;

(** Conversion function from Arm_personnel to C_person *)

let apeToCp (p : Arm_personnel) : C_person = !armToCp(ApeToArm!to_super(p));

(** Domain property: Arm_personnel to C_person conversion properties *)

theorem armed_personnel_to_cabin_person : all p : Arm_personnel,
  C_person!equal(!apeToCp(p), !armToCp(ApeToArm!to_super(p)))
proof = by property C_person!equal_reflexive definition of apeToCp;

(** Conversion function from Arm_personnel to A_subject *)

let apeToAs (p : Arm_personnel) : A_subject = !cpToAs(!apeToCp(p));

(** Domain property: Arm_personnel to A_subject conversion properties *)

theorem armed_personnel_to_a_subject : all p : Arm_personnel,
  A_subject!equal(!apeToAs(p), !cpToAs(!apeToCp(p)))
proof = by property A_subject!equal_reflexive definition of apeToAs;

(** Conversion function from If_officer to C_person *)

let ifoToCp (p : If_officer) : C_person = !armToCp(IfoToArm!to_super(p));

(** Domain property: If_officer to C_person conversion properties *)

theorem if_officer_to_cabin_person : all p : If_officer,
  C_person!equal(!ifoToCp(p), !armToCp(IfoToArm!to_super(p)))
proof = by property C_person!equal_reflexive definition of ifoToCp;

(** Conversion function from If_officer to A_subject *)

let ifoToAs (p : If_officer) : A_subject = !cpToAs(!ifoToCp(p));

(** Domain property: If_officer to A_subject conversion properties *)

theorem if_officer_to_a_subject : all p : If_officer,
  A_subject!equal(!ifoToAs(p), !cpToAs(!ifoToCp(p)))
proof = by property A_subject!equal_reflexive definition of ifoToAs;

end;;
