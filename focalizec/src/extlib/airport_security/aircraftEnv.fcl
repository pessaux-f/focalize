(* $Id: aircraftEnv.fcl,v 1.1 2011-08-02 16:11:08 delahaye Exp $ *)

open "basic_sets";;
open "a17subjects";;
open "conversionFunctions";;
open "airsideSubjects";;

species AircraftEnv(Obj is Object,
                    Obj_set is Finite_set(Obj),
                    Do is DangerousObject,
                    Do_set is Finite_set(Do),
                    Wp is Weapon,
                    Wp_set is Finite_set(Wp),
                    Eo is Explosive,
                    Eo_set is Finite_set(Eo),
                    Dd is DangerousDevice,
                    Dd_set is Finite_set(Dd),
                    A_subject is AirsideSubject(Obj, Obj_set),
                    As_set is Finite_set(A_subject),
                    A_vehicle is AirsideVehicle(Obj, Obj_set),
                    Av_set is Finite_set(A_vehicle),
                    C_baggage is CabinBaggage(Obj, Obj_set),
                    Cb_set is Finite_set(C_baggage),
                    C_person is CabinPerson(Obj, Obj_set, C_baggage, Cb_set),
                    Cp_set is Finite_set(C_person),
                    Seat_no is Seat_number,
                    Seat_set is Finite_set(Seat_no),
                    C_passenger is CabinPassenger(Obj, Obj_set, C_baggage,
                      Cb_set, Seat_no),
                    C_pa_set is Finite_set(C_passenger),
                    H_baggage is HoldBaggage(Obj, Obj_set, C_baggage, Cb_set,
                      Seat_no, C_passenger),
                    Hl_set is Finite_set(H_baggage),
                    Arm_passenger is ArmedPassenger(Obj, Obj_set, Wp,
                      C_baggage, Cb_set, Seat_no),
                    A_pilot is Pilot(Obj, Obj_set, C_baggage, Cb_set, Seat_no,
                      Seat_set),
                    Pilot_set is Finite_set(A_pilot),
                    A_carrier is AirCarrier,
                    D_aircraft is DepartingAircraft(Obj, Obj_set, Wp,
                      A_subject, As_set, C_baggage, Cb_set, C_person, Cp_set,
                      Seat_no, Seat_set, C_passenger, H_baggage, Hl_set,
                      Arm_passenger, A_pilot, A_carrier),
                    Dep_ac_set is Finite_set(D_aircraft),
                    A_person is AirsidePerson(Obj, Obj_set),
                    Ap_set is Finite_set(A_person),
                    U_person is UnescortedPerson(Obj, Obj_set),
                    Up_set is Finite_set(U_person),
                    Dsk_passenger is DisembarkedPassenger(Obj, Obj_set,
                      C_baggage, Cb_set, Seat_no),
                    Dsk_pa_set is Finite_set(Dsk_passenger),
                    Dep_passenger is DepartingPassenger(Obj, Obj_set,
                      C_baggage, Cb_set, Seat_no),
                    Dep_pa_set is Finite_set(Dep_passenger),
                    Tf_passenger is TransferPassenger(Obj, Obj_set, Wp,
                      C_baggage, Cb_set, Seat_no, A_person),
                    Tf_pa_set is Finite_set(Tf_passenger),
                    Ts_passenger is TransitPassenger(Obj, Obj_set, Wp,
                      C_baggage, Cb_set, Seat_no, A_person),
                    Ts_pa_set is Finite_set(Ts_passenger),
                    O_aircraft is OriginatingAircraft(Obj, Obj_set, Wp,
                      A_subject, As_set, C_baggage, Cb_set, C_person, Cp_set,
                      Seat_no, Seat_set, C_passenger, H_baggage, Hl_set,
                      Arm_passenger, A_pilot, A_carrier),
                    O_ac_set is Finite_set(O_aircraft),
                    Ts_aircraft is TransitAircraft(Obj, Obj_set, Wp, A_subject,
                      As_set, C_baggage, Cb_set, C_person, Cp_set, Seat_no,
                      Seat_set, Dsk_passenger, Dsk_pa_set, C_passenger,
                      H_baggage, Hl_set, Arm_passenger, A_pilot, A_carrier),
                    Ts_ac_set is Finite_set(Ts_aircraft),
                    Sra is SecurityRestrictedArea(Obj, Obj_set, Wp, A_subject,
                      As_set, C_baggage, Cb_set, U_person, C_person, Cp_set,
                      Seat_no, Seat_set, C_passenger, H_baggage, Hl_set,
                      Arm_passenger, A_pilot, A_carrier, D_aircraft,
                      Dep_ac_set),
                    Sra_set is Finite_set(Sra),
                    WpToDo is DangerousObject_subtype(Wp, Do, Wp_set, Do_set),
                    EoToDo is DangerousObject_subtype(Eo, Do, Eo_set, Do_set),
                    DdToDo is DangerousObject_subtype(Dd, Do, Dd_set, Do_set),
                    DoToObj is DangerousObjectToObject(Do, Obj, Do_set,
                      Obj_set),
                    ApToAs is AirsideSubject_subtype(Obj, Obj_set, A_person,
                      A_subject, Ap_set, As_set),
                    CpToAp is AirsideSubject_subtype(Obj, Obj_set, C_person,
                      A_person, Cp_set, Ap_set),
                    UpToAp is AirsideSubject_subtype(Obj, Obj_set, U_person,
                      A_person, Up_set, Ap_set),
                    AvToAs is AirsideSubject_subtype(Obj, Obj_set, A_vehicle,
                      A_subject, Av_set, As_set),
                    PiToUp is UnescortedPerson_subtype(Obj, Obj_set, A_pilot,
                      U_person, Pilot_set, Up_set),
                    PiToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                      Cb_set, A_pilot, C_person, Pilot_set, Cp_set),
                    DskToCpa is CabinPassenger_subtype(Obj, Obj_set, C_baggage,
                      Cb_set, Seat_no, Dsk_passenger, C_passenger, Dsk_pa_set,
                      C_pa_set),
                    DepToCpa is CabinPassenger_subtype(Obj, Obj_set, C_baggage,
                      Cb_set, Seat_no, Dep_passenger, C_passenger, Dep_pa_set,
                      C_pa_set),
                    CpaToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                      Cb_set, C_passenger, C_person, C_pa_set, Cp_set),
                    TsToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                      C_baggage, Cb_set, Seat_no, Ts_passenger, Dsk_passenger,
                      Ts_pa_set, Dsk_pa_set),
                    TfToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                      C_baggage, Cb_set, Seat_no, Tf_passenger, Dsk_passenger,
                      Tf_pa_set, Dsk_pa_set),
                    OacToAc is DepartingAircraft_subtype(Obj, Obj_set, Wp,
                      A_subject, As_set, C_baggage, Cb_set, C_person, Cp_set,
                      Seat_no, Seat_set, C_passenger, H_baggage, Hl_set,
                      Arm_passenger, A_pilot, A_carrier, O_aircraft,
                      D_aircraft, O_ac_set, Dep_ac_set),
                    TacToAc is DepartingAircraft_subtype(Obj, Obj_set, Wp,
                      A_subject, As_set, C_baggage, Cb_set, C_person, Cp_set,
                      Seat_no, Seat_set, C_passenger, H_baggage, Hl_set,
                      Arm_passenger, A_pilot, A_carrier, Ts_aircraft,
                      D_aircraft, Ts_ac_set, Dep_ac_set)) =

  inherit AirsideEnv(Obj, Obj_set, Do, Do_set, Wp, Wp_set, Eo, Eo_set, Dd,
                     Dd_set, A_subject, As_set, A_vehicle, Av_set, C_baggage,
                     Cb_set, C_person, Cp_set, Seat_no, Seat_set, C_passenger,
                     C_pa_set, H_baggage, Hl_set, Arm_passenger, A_pilot,
                     Pilot_set, A_carrier, D_aircraft, Dep_ac_set, A_person,
                     Ap_set, U_person, Up_set, Dsk_passenger, Dsk_pa_set,
                     Dep_passenger, Dep_pa_set, Tf_passenger, Tf_pa_set,
                     Ts_passenger, Ts_pa_set, Sra, Sra_set, WpToDo, EoToDo,
                     DdToDo, DoToObj, ApToAs, CpToAp, UpToAp, AvToAs, PiToUp,
                     PiToCp, DskToCpa, DepToCpa, CpaToCp, TsToDsk, TfToDsk);

signature originatingAircraft : Self -> O_ac_set;
signature transitAircraft : Self -> Ts_ac_set;

let departingAircraft (s : Self) : Dep_ac_set =
  Dep_ac_set!union(OacToAc!to_super_set(!originatingAircraft(s)), 
                   TacToAc!to_super_set(!transitAircraft(s)));

(** Domain Property : All disembarked passengers of a transit aircraft belong
    to the given set disembarked passengers *)

property transitAircraft_dsk_passenger : all a : Ts_aircraft, all s : Self,
  Ts_ac_set!member(a, !transitAircraft(s)) ->
  Dsk_pa_set!subset(Ts_aircraft!disembarkedPassengers(a), 
                    !disembarkedPassengers(s));

(** Derived property : All originating aircraft are instances of 
    departing aircraft. *) 

theorem originatingAircraft_to_dep_aircraft : all a : O_aircraft, all s : Self,
  O_ac_set!member(a, !originatingAircraft(s)) ->
  Dep_ac_set!member(OacToAc!to_super(a), !departingAircraft(s))
proof = by property Dep_ac_set!union2, OacToAc!to_super_set_const2
        definition of departingAircraft;

(** Derived property : All transit aircraft are instances of 
    departing aircraft. *) 

theorem transitAircraft_to_dep_aircraft : all a : Ts_aircraft, all s : Self,
  Ts_ac_set!member(a, !transitAircraft(s)) ->
  Dep_ac_set!member(TacToAc!to_super(a), !departingAircraft(s))
proof = by property Dep_ac_set!union2, TacToAc!to_super_set_const2
        definition of departingAircraft;

(** Domain Property : This property is derived from Property 4.3.4. Indeed, 
    if an originating aircraft is considered to be "departed", then it 
    is only accessible to on board cabin persons. *)

logical let onboardOAircraft (p : A_person, a : O_aircraft) =
  ex x : C_person,
    Cp_set!member(x, O_aircraft!onboardPersons(a)) /\
    A_person!equal(CpToAp!to_super(x), p);

property departed_oaircraft_cperson : all a : O_aircraft, all s : Self,
  all p : A_person,
  O_ac_set!member(a, !originatingAircraft(s)) -> O_aircraft!departed(a) ->
  Ap_set!member(p, !airsidePersons(s)) -> ~ (!onboardOAircraft(p, a)) ->
  ~ (O_aircraft!accessing_aircraft(ApToAs!to_super(p), a));

property departed_oaircraft_onboard : all a : O_aircraft, all s : Self,
  all p : A_person,
  O_ac_set!member(a, !originatingAircraft(s)) -> O_aircraft!departed(a) ->
  Ap_set!member(p, !airsidePersons(s)) -> !onboardOAircraft(p, a) ->
  O_aircraft!access_authorized(ApToAs!to_super(p), a);
 
property departed_oaircraft_avehicle : all a : O_aircraft, all s : Self,
  all v : A_vehicle,
  O_ac_set!member(a, !originatingAircraft(s)) -> O_aircraft!departed(a) ->
  Av_set!member(v, !airsideVehicles(s)) ->
  ~ (O_aircraft!accessing_aircraft(AvToAs!to_super(v), a));

property departed_aircraft_not_authorized : all a : D_aircraft, all area : Sra,
  all s : Self, all p : A_subject,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  ~ (D_aircraft!access_authorized(p, a)) ->
  ~ (D_aircraft!accessing_aircraft(p, a));

(** Domain Property : If a transit aircraft is considered to be "departed",
    then it is only accessible to on board cabin persons. *)

logical let onboardTAircraft (p : A_person, a : Ts_aircraft) =
  ex x : C_person,
    Cp_set!member(x, Ts_aircraft!onboardPersons(a)) /\
    A_person!equal(CpToAp!to_super(x), p);

property departed_taircraft_cperson : all a : Ts_aircraft, all s : Self,
  all p : A_person,
  Ts_ac_set!member(a, !transitAircraft(s)) -> Ts_aircraft!departed(a) ->
  Ap_set!member(p, !airsidePersons(s)) -> ~ (!onboardTAircraft(p, a)) ->
  ~ (Ts_aircraft!accessing_aircraft(ApToAs!to_super(p), a));

property departed_taircraft_onboard : all a : Ts_aircraft, all s : Self,
  all p : A_person,
  Ts_ac_set!member(a, !transitAircraft(s)) -> Ts_aircraft!departed(a) ->
  Ap_set!member(p, !airsidePersons(s)) -> !onboardTAircraft(p, a) ->
  Ts_aircraft!access_authorized(ApToAs!to_super(p), a);

property departed_taircraft_avehicle : all a : Ts_aircraft, all s : Self,
  all v : A_vehicle,
  Ts_ac_set!member(a, !transitAircraft(s)) -> Ts_aircraft!departed(a) ->
  Av_set!member(v, !airsideVehicles(s)) ->
  ~ (Ts_aircraft!accessing_aircraft(AvToAs!to_super(v), a));

(** Domain Property : if an originating aircraft was subjected to an aircraft
    security check or search then it is in a SRA *)

property oaircraft_check_search_sra : all a : O_aircraft, all s : Self,
  O_ac_set!member(a, !originatingAircraft(s)) ->
  (O_aircraft!aircraft_security_search(a) \/
   O_aircraft!aircraft_security_check(a)) ->
  ex area : Sra,
    Sra_set!member(area, !securityRestrictedAreas(s)) /\
    Dep_ac_set!member(OacToAc!to_super(a), Sra!departingAircraft_in_sra(area));

end;;
