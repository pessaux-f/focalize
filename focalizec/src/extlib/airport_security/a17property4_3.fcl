(* $Id: a17property4_3.fcl,v 1.1 2011-08-02 16:11:08 delahaye Exp $ *)

open "basics";;
open "basic_sets";;
open "a17subjects";;
open "conversionFunctions";;
open "aircraftEnv";;

species A17property4_3(Obj is Object,
                       Obj_set is Finite_set(Obj),
                       Do is DangerousObject,
                       Do_set is Finite_set(Do),
                       Wp is Weapon,
                       Wp_set is Finite_set(Wp),
                       Eo is Explosive,
                       Eo_set is Finite_set(Eo),
                       Dd is DangerousDevice,
                       Dd_set is Finite_set(Dd),
                       A_subject is AirsideSubject(Obj, Obj_set),
                       As_set is Finite_set(A_subject),
                       A_vehicle is AirsideVehicle(Obj, Obj_set),
                       Av_set is Finite_set(A_vehicle),
                       C_baggage is CabinBaggage(Obj, Obj_set),
                       Cb_set is Finite_set(C_baggage),
                       C_person is CabinPerson(Obj, Obj_set, C_baggage,
                         Cb_set),
                       Cp_set is Finite_set(C_person),
                       Seat_no is Seat_number,
                       Seat_set is Finite_set(Seat_no),
                       C_passenger is CabinPassenger(Obj, Obj_set, C_baggage,
                         Cb_set, Seat_no),
                       C_pa_set is Finite_set(C_passenger),
                       H_baggage is HoldBaggage(Obj, Obj_set, C_baggage,
                         Cb_set, Seat_no, C_passenger),
                       Hl_set is Finite_set(H_baggage),
                       Arm_passenger is ArmedPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no),
                       A_pilot is Pilot(Obj, Obj_set, C_baggage, Cb_set,
                         Seat_no, Seat_set),
                       Pilot_set is Finite_set(A_pilot),
                       A_carrier is AirCarrier,
                       D_aircraft is DepartingAircraft(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, C_person,
                         Cp_set, Seat_no, Seat_set, C_passenger, H_baggage,
                         Hl_set, Arm_passenger, A_pilot, A_carrier),
                       Dep_ac_set is Finite_set(D_aircraft),
                       A_person is AirsidePerson(Obj, Obj_set),
                       Ap_set is Finite_set(A_person),
                       U_person is UnescortedPerson(Obj, Obj_set),
                       Up_set is Finite_set(U_person),
                       Dsk_passenger is DisembarkedPassenger(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no),
                       Dsk_pa_set is Finite_set(Dsk_passenger),
                       Dep_passenger is DepartingPassenger(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no),
                       Dep_pa_set is Finite_set(Dep_passenger),
                       Tf_passenger is TransferPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person),
                       Tf_pa_set is Finite_set(Tf_passenger),
                       Ts_passenger is TransitPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person),
                       Ts_pa_set is Finite_set(Ts_passenger),
                       O_aircraft is OriginatingAircraft(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, C_person,
                         Cp_set, Seat_no, Seat_set, C_passenger, H_baggage,
                         Hl_set, Arm_passenger, A_pilot, A_carrier),
                       O_ac_set is Finite_set(O_aircraft),
                       Ts_aircraft is TransitAircraft(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, C_person,
                         Cp_set, Seat_no, Seat_set, Dsk_passenger, Dsk_pa_set,
                         C_passenger, H_baggage, Hl_set, Arm_passenger,
                         A_pilot, A_carrier),
                       Ts_ac_set is Finite_set(Ts_aircraft),
                       Sra is SecurityRestrictedArea(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, U_person,
                         C_person, Cp_set, Seat_no, Seat_set, C_passenger,
                         H_baggage, Hl_set, Arm_passenger, A_pilot, A_carrier,
                         D_aircraft, Dep_ac_set),
                       Sra_set is Finite_set(Sra),
                       WpToDo is DangerousObject_subtype(Wp, Do, Wp_set,
                         Do_set),
                       EoToDo is DangerousObject_subtype(Eo, Do, Eo_set,
                         Do_set),
                       DdToDo is DangerousObject_subtype(Dd, Do, Dd_set,
                         Do_set),
                       DoToObj is DangerousObjectToObject(Do, Obj, Do_set,
                         Obj_set),
                       ApToAs is AirsideSubject_subtype(Obj, Obj_set, A_person,
                         A_subject, Ap_set, As_set),
                       CpToAp is AirsideSubject_subtype(Obj, Obj_set, C_person,
                         A_person, Cp_set, Ap_set),
                       UpToAp is AirsideSubject_subtype(Obj, Obj_set, U_person,
                         A_person, Up_set, Ap_set),
                       AvToAs is AirsideSubject_subtype(Obj, Obj_set,
                         A_vehicle, A_subject, Av_set, As_set),
                       PiToUp is UnescortedPerson_subtype(Obj, Obj_set,
                         A_pilot, U_person, Pilot_set, Up_set),
                       PiToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                         Cb_set, A_pilot, C_person, Pilot_set, Cp_set),
                       DskToCpa is CabinPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Dsk_passenger,
                         C_passenger, Dsk_pa_set, C_pa_set),
                       DepToCpa is CabinPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Dep_passenger,
                         C_passenger, Dep_pa_set, C_pa_set),
                       CpaToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                         Cb_set, C_passenger, C_person, C_pa_set, Cp_set),
                       TsToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Ts_passenger,
                         Dsk_passenger, Ts_pa_set, Dsk_pa_set),
                       TfToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Tf_passenger,
                         Dsk_passenger, Tf_pa_set, Dsk_pa_set),
                       OacToAc is DepartingAircraft_subtype(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, C_person,
                         Cp_set, Seat_no, Seat_set, C_passenger, H_baggage,
                         Hl_set, Arm_passenger, A_pilot, A_carrier, O_aircraft,
                         D_aircraft, O_ac_set, Dep_ac_set),
                       TacToAc is DepartingAircraft_subtype(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, C_person,
                         Cp_set, Seat_no, Seat_set, C_passenger, H_baggage,
                         Hl_set, Arm_passenger, A_pilot, A_carrier,
                         Ts_aircraft, D_aircraft, Ts_ac_set, Dep_ac_set)) =

  inherit AircraftEnv(Obj, Obj_set, Do, Do_set, Wp, Wp_set, Eo, Eo_set, Dd,
                      Dd_set, A_subject, As_set, A_vehicle, Av_set, C_baggage,
                      Cb_set, C_person,  Cp_set, Seat_no, Seat_set,
                      C_passenger, C_pa_set, H_baggage, Hl_set, Arm_passenger,
                      A_pilot, Pilot_set, A_carrier, D_aircraft, Dep_ac_set,
                      A_person, Ap_set, U_person, Up_set, Dsk_passenger,
                      Dsk_pa_set, Dep_passenger, Dep_pa_set, Tf_passenger,
                      Tf_pa_set, Ts_passenger, Ts_pa_set, O_aircraft, O_ac_set,
                      Ts_aircraft, Ts_ac_set, Sra, Sra_set, WpToDo, EoToDo,
                      DdToDo, DoToObj, ApToAs, CpToAp, UpToAp, AvToAs, PiToUp,
                      PiToCp, DskToCpa, DepToCpa, CpaToCp, TsToDsk, TfToDsk,
                      OacToAc, TacToAc);

(** Security Property: 4.3.1. For each originating aircraft, either aircraft
    security checks are performed or an aircraft security search is carried
    out. 

    In Annex 17, a distinction is made between aircraft security search and
    aircraft security check.

    Aircraft security checks only concern the interior of aircraft to which
    passengers may have access to.

    An aircraft security search is a thorough inspection of the interior and
    exterior of an aircraft for the purpose of discovering any suspicious
    objects. *)

property property_4_3_1 : all a : O_aircraft, all area : Sra, all s : Self,
  O_ac_set!member(a, !originatingAircraft(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(OacToAc!to_super(a), Sra!departingAircraft_in_sra(area)) ->
  (O_aircraft!aircraft_security_check(a) \/
   O_aircraft!aircraft_security_search(a));

logical let initial_cabin_secure (a : O_aircraft, s : Self) =
  all o : Do, 
    Do_set!member(o, !dangerousObjects(s)) ->
    Obj_set!member(DoToObj!to_super(o), O_aircraft!initial_cabin(a)) ->
    (~ (Do_set!member(o, WpToDo!to_super_set(!weapons(s)))) /\
     Do!is_authorized(o));

logical let is_weapon_const (o : Do, s : Self) =
  Do_set!member(o, WpToDo!to_super_set(!weapons(s))) ->
  (ex w : Wp,
    Wp_set!member(w, !weapons(s)) /\ Do!equal(WpToDo!to_super(w), o) /\
    Wp!inaccessible_in_cabin(w) /\ ~ (Wp!loaded(w)));

logical let initial_hold_secure (a : O_aircraft, s : Self) =
  all o : Do,
    Do_set!member(o, !dangerousObjects(s)) ->
    Obj_set!member(DoToObj!to_super(o), O_aircraft!initial_hold(a)) ->
    (Do!is_authorized(o) /\ !is_weapon_const(o, s));

(* If weapons conveyed by unescorted persons and vehicles accessing departing
   aircraft are introduced on board then they are not accessible in cabin
   and are not loaded. This is ensured by the aircraft security check
   procedures. *)

logical let inaccessible_weapon_unescorted (a : O_aircraft, s : Self) =
  all p : A_subject, all o : Wp,
  !is_unescorted_person_vehicle(p, s) -> O_aircraft!access_authorized(p, a) ->
  Wp_set!member(o, !weapons(s)) ->
  Obj_set!member(!wpToObj(o), A_subject!objects_carried(p)) ->
  Obj_set!member(!wpToObj(o), O_aircraft!onboardObjects(a)) ->
  (Wp!inaccessible_in_cabin(o) /\ ~ (Wp!loaded(o)));
 
property securityCheck_OAircraft : all a : O_aircraft, all s : Self,
  O_ac_set!member(a, !originatingAircraft(s)) ->
  O_aircraft!aircraft_security_check(a) ->
  (!initial_cabin_secure(a, s) /\
   !initial_hold_secure(a, s) /\
   !inaccessible_weapon_unescorted(a, s));

logical let is_weapon_not_loaded (o : Do, s : Self) =
  Do_set!member(o, WpToDo!to_super_set(!weapons(s))) ->
  (ex w : Wp,
    Wp_set!member(w, !weapons(s)) /\ Do!equal(WpToDo!to_super(w), o) /\
    ~ (Wp!loaded(w)));

logical let initial_exterior_secure (a : O_aircraft, s : Self) =
  all o : Do,
    Do_set!member(o, !dangerousObjects(s)) ->
    Obj_set!member(DoToObj!to_super(o), O_aircraft!initial_exterior(a)) ->
    (Do!is_authorized(o) /\ !is_weapon_not_loaded(o, s));

property securitySearch_OAircraft : all a : O_aircraft, all s : Self,
  O_ac_set!member(a, !originatingAircraft(s)) ->
  O_aircraft!aircraft_security_search(a) ->
  (O_aircraft!aircraft_security_check(a) /\ !initial_exterior_secure(a, s));

(** Security Property: 4.3.2. Disembarking passengers must not leave items on
    board aircraft at transit stops. Here it is important to make a distinction
    between disembarked passengers who terminate their trip and
    transfer/transit passengers. In fact, in normal circumstances, transfer and
    transit passengers may reembarked a transit aircraft. *)

property property_4_3_2 : all a : Ts_aircraft, all area : Sra,
  all p : Dsk_passenger, all s : Self, all o : Obj,
  Ts_ac_set!member(a, !transitAircraft(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(TacToAc!to_super(a), Sra!departingAircraft_in_sra(area)) ->
  Dsk_pa_set!member(p, Ts_aircraft!disembarkedPassengers(a)) ->
  !not_transfer_or_transit(p, s) ->
  Obj_set!member(o, Dsk_passenger!objects_carried(p)) ->
  ~ (Obj_set!member(o, Ts_aircraft!onboardObjects(a)));

(** Security Property: 4.3.4. An aircraft subject to 4.3.1 must be protected
    from unauthorized interference from the time the aircraft search or check
    has started until the aircraft departs.

    Unauthorized interference occurs when an airside subject not having
    authorized access to an aircraft is accessing the aircraft. *)

logical let no_interferenceOAC (a : O_aircraft, s : Self) =
  all p : A_subject, all o : Obj,
    As_set!member(p, !airsideSubjects(s)) ->
    ~ (O_aircraft!access_authorized(p, a)) ->
    Obj_set!member(o, A_subject!objects_carried(p)) ->
    ~ (Obj_set!member(o, O_aircraft!onboardObjects(a)));

property property_4_3_4 : all a : O_aircraft, all area : Sra, all s : Self,
  O_ac_set!member(a, !originatingAircraft(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(OacToAc!to_super(a), Sra!departingAircraft_in_sra(area)) ->
  (O_aircraft!aircraft_security_check(a) \/
   O_aircraft!aircraft_security_search(a)) ->
  (!no_interferenceOAC(a, s) \/ O_aircraft!departed(a));

(** Security Property: 4.3. Irrespective of hold baggage being loaded and
    boarding passengers, there are no unauthorized dangerous objects on board
    departing aircraft. *)

logical let initial_objects_secure (o : Obj, a : D_aircraft, s : Self) =
  Obj_set!member(o, D_aircraft!initial_objects(a)) ->
  all d : Do, 
    Do_set!member(d, !dangerousObjects(s)) ->
    Obj!equal(DoToObj!to_super(d), o) -> Do!is_authorized(d);

logical let no_unauthorized_access (o : Obj, a : D_aircraft, s : Self) =
  all p : A_subject,
    As_set!member(p, !airsideSubjects(s)) ->
    ~ (D_aircraft!access_authorized(p, a)) ->
    ~ (Obj_set!member(o, A_subject!objects_carried(p)));

logical let dsk_passengers_const (o : Obj, a : D_aircraft, s : Self) =
  all p : Dsk_passenger,
  Dsk_pa_set!member(p, !disembarkedPassengers(s)) ->
  !not_transfer_or_transit(p, s) ->
  ~ (Obj_set!member(o, Dsk_passenger!objects_carried(p)));

(** Hidden Assumption: 4.3_H2. Disembarked passengers ending their journey
    cannot have access to originating aircraft departing from security
    restricted areas. *)

property hidden_assumption_4_3_H2 : all a : O_aircraft, all area : Sra,
  all s : Self, all p : Dsk_passenger,
  O_ac_set!member(a, !originatingAircraft(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(OacToAc!to_super(a), Sra!departingAircraft_in_sra(area)) ->
  Dsk_pa_set!member(p, !disembarkedPassengers(s)) ->
  !not_transfer_or_transit(p, s) ->
  ~ (O_aircraft!access_authorized(!dskToAs(p), a));

(** Hidden Assumption: 4.3_H1. Originating aircraft subjected only to aircraft
    security checks are considered not to have any unauthorized dangerous
    objects placed externally. *)

property hidden_assumption_4_3_H1 : all a : O_aircraft, all area : Sra,
  all s : Self,
  O_ac_set!member(a, !originatingAircraft(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(OacToAc!to_super(a), Sra!departingAircraft_in_sra(area)) ->
  O_aircraft!aircraft_security_check(a) -> !initial_exterior_secure(a, s);

(** Hidden Assumption: 4.3_H3. Transit aircraft must be protected from
    unauthorized interference to prevent unauthorized access. *)

property hidden_assumption_4_3_H3 : all a : Ts_aircraft, all area : Sra,
  all s : Self, all p : A_subject,
  As_set!member(p, !airsideSubjects(s)) ->
  Ts_ac_set!member(a, !transitAircraft(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(TacToAc!to_super(a), Sra!departingAircraft_in_sra(area)) ->
  ~ (Ts_aircraft!access_authorized(p, a)) ->
  all o : Obj, Obj_set!member(o, A_subject!objects_carried(p)) ->
    ~ (Obj_set!member(o, Ts_aircraft!onboardObjects(a)));

(** Hidden Assumption: 4.3_H4. Transit aircraft are considered as not
    containing any unauthorized dangerous objects irrespective of those brought
    in by boarding passengers, hold baggage being loaded. In other words, they
    are considered as if they have been subjected to an aircraft security
    search; *)

logical let initial_cabin_secureTS (a : Ts_aircraft, s : Self) =
  all o : Do, 
    Do_set!member(o, !dangerousObjects(s)) ->
    Obj_set!member(DoToObj!to_super(o), Ts_aircraft!initial_cabin(a)) ->
    (~ (Do_set!member(o, WpToDo!to_super_set(!weapons(s)))) /\
     Do!is_authorized(o));

logical let initial_hold_secureTS (a : Ts_aircraft, s : Self) =
  all o : Do,
    Do_set!member(o, !dangerousObjects(s)) ->
    Obj_set!member(DoToObj!to_super(o), Ts_aircraft!initial_hold(a)) ->
    (Do!is_authorized(o) /\ !is_weapon_const(o, s));

logical let initial_exterior_secureTS (a : Ts_aircraft, s : Self) =
  all o : Do,
    Do_set!member(o, !dangerousObjects(s)) ->
    Obj_set!member(DoToObj!to_super(o), Ts_aircraft!initial_exterior(a)) ->
    (Do!is_authorized(o) /\ !is_weapon_not_loaded(o, s));

logical let inaccessible_weapon_unescortedTS (a : Ts_aircraft, s : Self) =
  all p : A_subject, all o : Wp,
    !is_unescorted_person_vehicle(p, s) ->
    Ts_aircraft!access_authorized(p, a) ->
    Wp_set!member(o, !weapons(s)) ->
    Obj_set!member(!wpToObj(o), A_subject!objects_carried(p)) ->
    Obj_set!member(!wpToObj(o), Ts_aircraft!onboardObjects(a)) ->
    (Wp!inaccessible_in_cabin(o) /\ ~ (Wp!loaded(o)));

property hidden_assumption_4_3_H4 : all a : Ts_aircraft, all area : Sra,
  all s : Self,
  Ts_ac_set!member(a, !transitAircraft(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(TacToAc!to_super(a), Sra!departingAircraft_in_sra(area)) ->
  (!initial_cabin_secureTS(a, s) /\
   !initial_hold_secureTS(a, s) /\
   !inaccessible_weapon_unescortedTS(a, s) /\
   !initial_exterior_secureTS(a, s));

(** Hidden Assumption: 4.3_H5. disembarked passengers ending their journey do
    not have authorized access to other transit aircraft. *)

property hidden_assumption_4_3_H5 : all a : Ts_aircraft, all area : Sra,
  all s : Self, all p : Dsk_passenger,
  Ts_ac_set!member(a, !transitAircraft(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(TacToAc!to_super(a), Sra!departingAircraft_in_sra(area)) ->
  ~ (Dsk_pa_set!member(p, Ts_aircraft!disembarkedPassengers(a))) ->
  !not_transfer_or_transit(p, s) ->
  ~ (Ts_aircraft!access_authorized(!dskToAs(p), a));

theorem property_4_3 :
  all a : D_aircraft, all area : Sra, all s : Self, all o : Obj,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Obj_set!member(o, D_aircraft!onboardObjects(a)) ->
  (!initial_objects_secure(o, a, s) /\
   !no_unauthorized_access(o, a, s) /\
   !dsk_passengers_const(o, a, s))
proof = assumed (* To do *);
(* BUG COQ
<1>1 assume a : D_aircraft, area : Sra, s : Self, o : Obj,
     hypothesis H1 : Sra_set!member(area, !securityRestrictedAreas(s)),
     H2 : Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)),
     H3 : Obj_set!member(o, D_aircraft!onboardObjects(a)),
     prove (!initial_objects_secure(o, a, s) /\
            !no_unauthorized_access(o, a, s) /\
            !dsk_passengers_const(o, a, s))
     <2>1 assume oa : O_aircraft,
          hypothesis H4 : O_ac_set!member(oa, !originatingAircraft(s)),
          H5 : D_aircraft!equal(OacToAc!to_super(oa), a),
          prove (!initial_objects_secure(o, a, s) /\
                 !no_unauthorized_access(o, a, s) /\
                 !dsk_passengers_const(o, a, s))
          <3>1 assume asb : A_subject,
               hypothesis H6 : D_aircraft!accessing_aircraft(asb, a),
               prove O_aircraft!accessing_aircraft(asb, oa)
               assumed (* To do *)
(* BUG ZENON
               <4>1 prove D_aircraft!accessing_aircraft(asb,
                      OacToAc!to_super(oa))
                    by hypothesis H5, H6 property D_aircraft!equal_symmetric,
                    D_aircraft!equal_congruence2
               <4>2 qed by step <4>1 property OacToAc!to_super_access_aircraft,
                    beq_symm, beq_subst*)
          <3>2 assume asb : A_subject,
               hypothesis H6 : O_aircraft!access_authorized(asb, oa),
               prove D_aircraft!access_authorized(asb, a)
               assumed (* To do *)
(* BUG ZENON
               by hypothesis H5, H6 property OacToAc!to_super_access_aircraft,
               D_aircraft!equal_congruence3, beq_subst*)
          <3>3 prove !initial_objects_secure(o, a, s)
               <4>1 assume d : Do,
                    hypothesis H7 : Do_set!member(d, !dangerousObjects(s)),
                    H8 : Obj!equal(DoToObj!to_super(d), o),
                    H9 : O_aircraft!aircraft_security_check(oa),
                    H10 : Obj_set!member(o, O_aircraft!initial_objects(oa)),
                    prove Do!is_authorized(d)
                    by hypothesis H7, H8, H9, H10, H4, H1, H2, H5
                    property Dep_ac_set!equal_member2,
                    !securityCheck_OAircraft, Obj_set!equal_member2,
                    O_aircraft!initial_objects_const, !hidden_assumption_4_3_H1
                    definition of initial_cabin_secure, initial_hold_secure,
                    initial_exterior_secure
               <4>2 assume d : Do,
                    hypothesis H7 : Do_set!member(d, !dangerousObjects(s)),
                    H8 : Obj!equal(DoToObj!to_super(d), o),
                    H9 : O_aircraft!aircraft_security_search(oa),
                    H10 : Obj_set!member(o, O_aircraft!initial_objects(oa)),
                    prove Do!is_authorized(d)
                    by hypothesis H7, H8, H9, H10, H4
                    property !securitySearch_OAircraft,
                    !securityCheck_OAircraft, Obj_set!equal_member2,
                    O_aircraft!initial_objects_const
                    definition of initial_cabin_secure, initial_hold_secure,
                    initial_exterior_secure
               <4>3 qed by step <4>1, <4>2
                    property D_aircraft!equal_congruence,
                    OacToAc!to_super_aircraft, Obj_set!equal1, Obj_set!subset2,
                    Obj_set!equal_transitive, !property_4_3_1 hypothesis H1,
                    H2, H4, H5 property Dep_ac_set!equal_member2
                    definition of initial_objects_secure
          <3>4 prove !no_unauthorized_access(o, a, s)
              <4>1 hypothesis H7 : !no_interferenceOAC (oa, s),
                   prove !no_unauthorized_access(o, a, s)
                   by step <3>2 hypothesis H7, H3, H5
                   property OacToAc!to_super_aircraft,
                   D_aircraft!equal_congruence, Obj_set!equal1,
                   Obj_set!subset2, Obj_set!equal_transitive
                   definition of no_interferenceOAC, no_unauthorized_access
              <4>2 hypothesis H7 : O_aircraft!departed(oa),
                   prove !no_unauthorized_access(o, a, s)
                   <5>1 assume asb : A_subject, p : A_person,
                        hypothesis H8 : Ap_set!member(p, !airsidePersons(s)),
                        H9 : A_subject!equal(ApToAs!to_super(p), asb),
                        H10 : ~ (D_aircraft!access_authorized(asb, a)),
                        prove ~ (Obj_set!member(o,
                          A_subject!objects_carried(asb)))
                        assumed (* To do *)
(* BUG ZENON
                        by step <3>1, <3>2 hypothesis H4, H7, H8, H9, H1, H2,
                        H3, H10 property !departed_oaircraft_onboard,
                        !aSubject_dAircraft_not_access,
                        !departed_oaircraft_cperson,
                        A_subject!equal_congruence, Obj_set!equal1,
                        Obj_set!subset2,
                        D_aircraft!access_authorized_congruence*)
                   <5>2 assume asb : A_subject, v : A_vehicle,
                        hypothesis H8 : Av_set!member(v, !airsideVehicles(s)),
                        H9 : A_subject!equal(AvToAs!to_super(v), asb),
                        H10 : ~ (D_aircraft!access_authorized(asb, a)),
                        prove ~ (Obj_set!member(o,
                          A_subject!objects_carried(asb)))
                        by step <3>1 hypothesis H4, H7, H8, H9, H1
                        property A_subject!equal_symmetric
                        hypothesis H2, H3
                        property D_aircraft!accessing_aircraft_congruence,
                        !aSubject_dAircraft_not_access,
                        !departed_oaircraft_avehicle
                   <5>3 qed by step <5>1, <5>2 property As_set!union1,
                        ApToAs!to_super_set_const1, AvToAs!to_super_set_const1
                        definition of airsideSubjects, no_unauthorized_access
              <4>3 qed by step <4>1, <4>2 hypothesis H4, H5, H1, H2
                   property Dep_ac_set!equal_member2, !property_4_3_4,
                   !property_4_3_1
          <3>5 prove !dsk_passengers_const(o, a, s)
               assumed (* To do *)
(* BUG ZENON
              <4>1 assume asb : A_subject,
                   hypothesis H6 : D_aircraft!access_authorized(asb, a),
                   prove O_aircraft!access_authorized(asb, oa)
                   <5>1 prove D_aircraft!access_authorized(asb,
                          OacToAc!to_super(oa))
                        by hypothesis H5, H6
                        property D_aircraft!equal_symmetric,
                        D_aircraft!equal_congruence3
                   <5>2 qed by step <5>1
                        property OacToAc!to_super_access_aircraft, beq_symm,
                        beq_subst
              <4>2 qed by step <4>1 hypothesis H4, H1 step <3>2 hypothesis H5
                   property Dep_ac_set!equal_member2 hypothesis H2
                   property !hidden_assumption_4_3_H2 hypothesis H3
                   property !departed_aircraft_not_authorized,
                   !aSubject_dAircraft_not_access, !dsk_passenger_object,
                   Obj_set!equal1, Obj_set!subset2
                   definition of dsk_passengers_const*)
          <3>6 qed by step <3>3, <3>4, <3>5
     <2>2 assume ta : Ts_aircraft,
          hypothesis H4 : Ts_ac_set!member(ta, !transitAircraft(s)),
          H5 : D_aircraft!equal(TacToAc!to_super(ta), a),
          prove (!initial_objects_secure(o, a, s) /\ 
            !no_unauthorized_access(o, a, s) /\ !dsk_passengers_const(o, a, s))
          <3>1 prove !initial_objects_secure(o, a, s)
               <4>1 assume d : Do,
                    hypothesis H7 : Do_set!member(d, !dangerousObjects(s)),
                    H8 : Obj!equal(DoToObj!to_super(d), o),
                    H9 : Obj_set!member(o, Ts_aircraft!initial_objects(ta)),
                    prove Do!is_authorized(d)
                    by hypothesis H4, H1, H2, H5, H7, H8, H9
                    property Dep_ac_set!equal_member2, Obj_set!equal_member2,
                    !hidden_assumption_4_3_H4,
                    Ts_aircraft!initial_objects_const
                    definition of initial_cabin_secureTS,
                    initial_hold_secureTS, initial_exterior_secureTS
               <4>2 qed by step <4>1 property D_aircraft!equal_congruence,
                    TacToAc!to_super_aircraft, Obj_set!equal1, Obj_set!subset2,
                    Obj_set!equal_transitive hypothesis H5
                    definition of initial_objects_secure
          <3>2 prove !no_unauthorized_access(o, a, s)
               assumed (* To do *)
(* BUG ZENON
               <4>1 assume p : A_subject,
                    hypothesis H7 : As_set!member(p, !airsideSubjects(s)),
                    H8 : ~ (Ts_aircraft!access_authorized(p, ta)),
                    prove ~ (Obj_set!member(o, A_subject!objects_carried(p)))
                    by property !hidden_assumption_4_3_H3 hypothesis H4, H5,
                    H1, H2, H3 property D_aircraft!equal_congruence,
                    TacToAc!to_super_aircraft, Obj_set!equal_transitive,
                    Obj_set!equal1, Obj_set!subset2 hypothesis H8, H7
                    property Dep_ac_set!equal_member2
               <4>2 qed by step <4>1 hypothesis H5
                    property D_aircraft!equal_congruence3,
                    TacToAc!to_super_access_aircraft, beq_subst
                    definition of no_unauthorized_access*)
          <3>3 prove !dsk_passengers_const(o, a, s)
               <4>1 assume dp : Dsk_passenger,
                    hypothesis H7 : Dsk_pa_set!member(dp,
                      !disembarkedPassengers(s)),
                    H8 : !not_transfer_or_transit(dp, s),
                    H9 : Dsk_pa_set!member(dp,
                      Ts_aircraft!disembarkedPassengers(ta)),
                    prove ~ (Obj_set!member(o,
                      Dsk_passenger!objects_carried(dp)))
                    assumed (* To do *)
(* BUG ZENON
                    by hypothesis H4, H5, H1, H2, H3, H8, H9
                    property D_aircraft!equal_congruence,
                    TacToAc!to_super_aircraft, Obj_set!equal_transitive,
                    Obj_set!equal1, Obj_set!subset2, Dep_ac_set!equal_member2,
                    !property_4_3_2*)
               <4>2 assume dp : Dsk_passenger,
                    hypothesis H7 : Dsk_pa_set!member(dp,
                      !disembarkedPassengers(s)),
                    H8 : !not_transfer_or_transit(dp, s),
                    H9 : ~ (Dsk_pa_set!member(dp,
                      Ts_aircraft!disembarkedPassengers(ta))),
                    prove ~ (Obj_set!member(o,
                      Dsk_passenger!objects_carried(dp)))
                         assumed (* To do *)
(* BUG ZENON
                    <5>1 prove ~ (D_aircraft!access_authorized(!dskToAs(dp),
                           TacToAc!to_super(ta)))
                         by hypothesis H4, H1, H2, H5
                         property Dep_ac_set!equal_member2,
                         !hidden_assumption_4_3_H5 hypothesis H9, H8
                         property TacToAc!to_super_access_aircraft, beq_symm,
                         beq_subst
                    <5>2 prove ~ (D_aircraft!accessing_aircraft(!dskToAs(dp),
                           TacToAc!to_super(ta)))
                         by step <5>1 hypothesis H1, H2, H5
                         property !departed_aircraft_not_authorized,
                         Dep_ac_set!equal_member2
                    <5>3 qed by step <5>2 hypothesis H1, H2
                         property !aSubject_dAircraft_not_access,
                         Dep_ac_set!equal_member2, !dsk_passenger_object,
                         Obj_set!equal1, Obj_set!subset2 hypothesis H5, H3
                         property D_aircraft!equal_congruence*)
               <4>3 qed by step <4>1, <4>2 definition of dsk_passengers_const
          <3>4 qed by step <3>1, <3>2, <3>3
     <2>3 qed by step <2>1, <2>2 hypothesis H1, H2
          property !sra_departingAircraft, Dep_ac_set!union1,
          OacToAc!to_super_set_const1, TacToAc!to_super_set_const1
          definition of departingAircraft
<1>2 conclude;*)

(* Consistency Theorem: this theorem checks whether there is no contradiction
   or conflicting security properties in the part of the regulation dedicated
   to departing aircraft . This verification is carried out w.r.t. the
   following scenarios.

signature o_aircraft1 : O_aircraft;
signature ts_aircraft1 : Ts_aircraft;
signature dsk_pass1 : Dsk_passenger;
signature dsk_pass2 : Dsk_passenger;

property a17prop4_3_fact1 :
  O_ac_set!member(!o_aircraft1, !originatingAircraft(!my_airport));

property a17prop4_3_fact2 :
  Dep_ac_set!member(OacToAc!to_super(!o_aircraft1),
                    Sra!departingAircraft_in_sra(!zone1));

property a17prop4_3_fact3 :
  Ts_ac_set!member(!ts_aircraft1, !transitAircraft(!my_airport));

property a17prop4_3_fact4 :
  Dep_ac_set!member(TacToAc!to_super(!ts_aircraft1),
                    Sra!departingAircraft_in_sra(!zone1));

property a17prop4_3_fact5 : 
  Dsk_pa_set!member(!dsk_pass1,
                    Ts_aircraft!disembarkedPassengers(!ts_aircraft1)) /\
  !not_transfer_or_transit(!dsk_pass1, !my_airport);

property a17prop4_3_fact6 :
  Dsk_pa_set!member(!dsk_pass1, !disembarkedPassengers(!my_airport));

property a17prop4_3_fact7 :
  Dsk_pa_set!member(!dsk_pass2, !disembarkedPassengers(!my_airport));

property a17prop4_3_fact8 : 
  ~(Dsk_pa_set!member(!dsk_pass2,
                      Ts_aircraft!disembarkedPassengers(!ts_aircraft1))) /\
  !not_transfer_or_transit(!dsk_pass2, !my_airport);

BUG ZENON
theorem consistency_a17property3 : False
proof = by property !a17prop4_3_fact1, !a17prop4_3_fact2, !a17prop4_3_fact3,
        !a17prop4_3_fact4, !a17prop4_3_fact5, !a17prop4_3_fact6,
        !a17prop4_3_fact7, !a17prop4_3_fact8, !fact1,
        D_aircraft!equal_symmetric, D_aircraft!equal_congruence2,
        OacToAc!to_super_access_aircraft, beq_symm, beq_subst,
        D_aircraft!equal_congruence3, Dep_ac_set!equal_member2,
        !securityCheck_OAircraft, Obj_set!equal_member2,
        O_aircraft!initial_objects_const, !hidden_assumption_4_3_H1,
        !securitySearch_OAircraft, D_aircraft!equal_congruence,
        OacToAc!to_super_aircraft, Obj_set!equal1, Obj_set!subset2,
        Obj_set!equal_transitive, !property_4_3_1, !departed_oaircraft_onboard,
        !aSubject_dAircraft_not_access, !departed_oaircraft_cperson,
        A_subject!equal_congruence, D_aircraft!access_authorized_congruence,
        A_subject!equal_symmetric, D_aircraft!accessing_aircraft_congruence,
        !departed_oaircraft_avehicle, ApToAs!to_super_set_const1,
        AvToAs!to_super_set_const1, As_set!union1, !property_4_3_4,
        !property_4_3_1, !hidden_assumption_4_3_H2,
        !departed_aircraft_not_authorized, !dsk_passenger_object,
        !hidden_assumption_4_3_H4, Ts_aircraft!initial_objects_const,
        TacToAc!to_super_aircraft, !hidden_assumption_4_3_H3,
        TacToAc!to_super_access_aircraft, !property_4_3_2,
        !hidden_assumption_4_3_H5, !sra_departingAircraft, Dep_ac_set!union1,
        OacToAc!to_super_set_const1, TacToAc!to_super_set_const1
        definition of initial_cabin_secure, initial_hold_secure,
        initial_exterior_secure, initial_objects_secure, no_interferenceOAC,
        no_unauthorized_access, airsideSubjects, dsk_passengers_const,
        initial_cabin_secureTS, initial_hold_secureTS,
        initial_exterior_secureTS, departingAircraft;*)

end;;
