(* $Id: a17property4_7.fcl,v 1.2 2012-03-01 16:38:30 pessaux Exp $ *)

open "a17subjects";;
open "specialPassengersEnv";;
open "a17property4_2";;
open "basic_sets" ;;
open "conversionFunctions" ;;


species A17property4_7(Obj is Object,
                       Obj_set is Finite_set(Obj),
                       Do is DangerousObject,
                       Do_set is Finite_set(Do),
                       Wp is Weapon,
                       Wp_set is Finite_set(Wp),
                       Eo is Explosive,
                       Eo_set is Finite_set(Eo),
                       Dd is DangerousDevice,
                       Dd_set is Finite_set(Dd),
                       A_subject is AirsideSubject(Obj, Obj_set),
                       As_set is Finite_set(A_subject),
                       A_vehicle is AirsideVehicle(Obj, Obj_set),
                       Av_set is Finite_set(A_vehicle),
                       C_baggage is CabinBaggage(Obj, Obj_set),
                       Cb_set is Finite_set(C_baggage),
                       C_person is CabinPerson(Obj, Obj_set, C_baggage,
                         Cb_set),
                       Cp_set is Finite_set(C_person),
                       Seat_no is Seat_number,
                       Seat_set is Finite_set(Seat_no),
                       C_passenger is CabinPassenger(Obj, Obj_set, C_baggage,
                         Cb_set, Seat_no),
                       C_pa_set is Finite_set(C_passenger),
                       H_baggage is HoldBaggage(Obj, Obj_set, C_baggage,
                         Cb_set, Seat_no, C_passenger),
                       Hl_set is Finite_set(H_baggage),
                       Arm_passenger is ArmedPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no),
                       Arm_pa_set is Finite_set(Arm_passenger),
                       A_pilot is Pilot(Obj, Obj_set, C_baggage, Cb_set,
                         Seat_no, Seat_set),
                       Pilot_set is Finite_set(A_pilot),
                       A_carrier is AirCarrier,
                       D_aircraft is DepartingAircraft(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, C_person,
                         Cp_set, Seat_no, Seat_set, C_passenger, H_baggage,
                         Hl_set, Arm_passenger, A_pilot, A_carrier),
                       Dep_ac_set is Finite_set(D_aircraft),
                       A_person is AirsidePerson(Obj, Obj_set),
                       Ap_set is Finite_set(A_person),
                       U_person is UnescortedPerson(Obj, Obj_set),
                       Up_set is Finite_set(U_person),
                       Dsk_passenger is DisembarkedPassenger(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no),
                       Dsk_pa_set is Finite_set(Dsk_passenger),
                       Dep_passenger is DepartingPassenger(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no),
                       Dep_pa_set is Finite_set(Dep_passenger),
                       Tf_passenger is TransferPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person),
                       Tf_pa_set is Finite_set(Tf_passenger),
                       Ts_passenger is TransitPassenger(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, A_person),
                       Ts_pa_set is Finite_set(Ts_passenger),
                       Arm_personnel is ArmedPersonnel(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no),
                       Arm_pe_set is Finite_set(Arm_personnel),
                       If_officer is InFlightOfficer(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no),
                       If_of_set is Finite_set(If_officer),
                       Dis_passenger is DisruptivePassenger(Obj, Obj_set, Do,
                         C_baggage, Cb_set, Seat_no),
                       Dis_pa_set is Finite_set(Dis_passenger),
                       Sra is SecurityRestrictedArea(Obj, Obj_set, Wp,
                         A_subject, As_set, C_baggage, Cb_set, U_person,
                         C_person, Cp_set, Seat_no, Seat_set, C_passenger,
                         H_baggage, Hl_set, Arm_passenger, A_pilot, A_carrier,
                         D_aircraft, Dep_ac_set),
                       Sra_set is Finite_set(Sra),
                       WpToDo is DangerousObject_subtype(Wp, Do, Wp_set,
                         Do_set),
                       EoToDo is DangerousObject_subtype(Eo, Do, Eo_set,
                         Do_set),
                       DdToDo is DangerousObject_subtype(Dd, Do, Dd_set,
                         Do_set),
                       DoToObj is DangerousObjectToObject(Do, Obj, Do_set,
                         Obj_set),
                       ApToAs is AirsideSubject_subtype(Obj, Obj_set, A_person,
                         A_subject, Ap_set, As_set),
                       CpToAp is AirsideSubject_subtype(Obj, Obj_set, C_person,
                         A_person, Cp_set, Ap_set),
                       UpToAp is AirsideSubject_subtype(Obj, Obj_set, U_person,
                         A_person, Up_set, Ap_set),
                       AvToAs is AirsideSubject_subtype(Obj, Obj_set,
                         A_vehicle, A_subject, Av_set, As_set),
                       PiToUp is UnescortedPerson_subtype(Obj, Obj_set,
                         A_pilot, U_person, Pilot_set, Up_set),
                       PiToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                         Cb_set, A_pilot, C_person, Pilot_set, Cp_set),
                       DskToCpa is CabinPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Dsk_passenger,
                         C_passenger, Dsk_pa_set, C_pa_set),
                       DepToCpa is CabinPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Dep_passenger,
                         C_passenger, Dep_pa_set, C_pa_set),
                       CpaToCp is CabinPerson_subtype(Obj, Obj_set, C_baggage,
                         Cb_set, C_passenger, C_person, C_pa_set, Cp_set),
                       TsToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Ts_passenger,
                         Dsk_passenger, Ts_pa_set, Dsk_pa_set),
                       TfToDsk is DisembarkedPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Tf_passenger,
                         Dsk_passenger, Tf_pa_set, Dsk_pa_set),
                       ArmToDep is DepartingPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Arm_passenger,
                         Dep_passenger, Arm_pa_set, Dep_pa_set),
                       DisToDep is DepartingPassenger_subtype(Obj, Obj_set,
                         C_baggage, Cb_set, Seat_no, Dis_passenger,
                         Dep_passenger, Dis_pa_set, Dep_pa_set),
                       ApeToArm is ArmedPassenger_subtype(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, Arm_personnel,
                         Arm_passenger, Arm_pe_set, Arm_pa_set),
                       IfoToArm is ArmedPassenger_subtype(Obj, Obj_set, Wp,
                         C_baggage, Cb_set, Seat_no, If_officer, Arm_passenger,
                         If_of_set, Arm_pa_set)) =

  inherit SpecialPassengersEnv(Obj, Obj_set, Do, Do_set, Wp, Wp_set, Eo,
                               Eo_set, Dd, Dd_set, A_subject, As_set,
                               A_vehicle, Av_set, C_baggage, Cb_set, C_person,
                               Cp_set, Seat_no, Seat_set, C_passenger,
                               C_pa_set, H_baggage, Hl_set, Arm_passenger,
                               Arm_pa_set, A_pilot, Pilot_set, A_carrier,
                               D_aircraft, Dep_ac_set, A_person, Ap_set,
                               U_person, Up_set, Dsk_passenger, Dsk_pa_set,
                               Dep_passenger, Dep_pa_set, Tf_passenger,
                               Tf_pa_set, Ts_passenger, Ts_pa_set,
                               Arm_personnel, Arm_pe_set, If_officer,
                               If_of_set, Dis_passenger, Dis_pa_set, Sra,
                               Sra_set, WpToDo, EoToDo, DdToDo, DoToObj,
                               ApToAs, CpToAp, UpToAp, AvToAs, PiToUp, PiToCp,
                               DskToCpa, DepToCpa, CpaToCp, TsToDsk, TfToDsk,
                               ArmToDep, DisToDep, ApeToArm, IfoToArm),
          A17property4_2(Obj, Obj_set, Do, Do_set, Wp, Wp_set, Eo, Eo_set, Dd,
                         Dd_set, A_subject, As_set, A_vehicle, Av_set,
                         C_baggage, Cb_set, C_person, Cp_set, Seat_no,
                         Seat_set, C_passenger, C_pa_set, H_baggage, Hl_set,
                         Arm_passenger, A_pilot, Pilot_set, A_carrier,
                         D_aircraft, Dep_ac_set, A_person, Ap_set, U_person,
                         Up_set, Dsk_passenger, Dsk_pa_set, Dep_passenger,
                         Dep_pa_set, Tf_passenger, Tf_pa_set, Ts_passenger,
                         Ts_pa_set, Sra, Sra_set, WpToDo, EoToDo, DdToDo,
                         DoToObj, ApToAs, CpToAp, UpToAp, AvToAs, PiToUp,
                         PiToCp, DskToCpa, DepToCpa, CpaToCp, TsToDsk,
                         TfToDsk);

(** Security Property: 4.7.1. Appropriate requirements concerning the carriage
    of potentially disruptive passengers, who are obliged to travel due to
    judicial or administrative proceedings, must be developed for air carriers.

    To formalize this security property, we need to consider the correlation
    between departing aircraft and air carriers *)

property property_4_7_1 : all a : D_aircraft, all c : A_carrier, all s : Self,
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  A_carrier!equal(c, D_aircraft!airCarrier(a)) ->
  A_carrier!requirementDisruptive(c);

(** Security Property: 4.7.2. Air carriers should include in their security
    programme the measures and procedures necessary to ensure safety on board
    their aircraft when potentially disruptive passengers are obliged to
    travel. *)

property property_4_7_2 : all a : D_aircraft, all c : A_carrier, all s : Self,
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  A_carrier!equal(c, D_aircraft!airCarrier(a)) ->
  A_carrier!requirementDisruptive(c) ->
  A_carrier!safetyProceduresDisruptive(c);

(** Security Property: 4.7.3. The air carrier and the pilot in command must be
    informed when potentially disruptive passengers are obliged to travel, so
    that appropriate security controls can be applied.

    Here, we assume that for appropriate security controls to be applied,
    requirements for disruptive passengers must have been developed. *)

logical let disruptivePassengersOnBoard (a : D_aircraft, s : Self) =
  ex p : Dis_passenger,
    Dis_pa_set!member(p, !disruptivePassengers(s)) /\
    Cp_set!member(!disToCp(p), D_aircraft!onboardPersons(a));

property property_4_7_3 : all a : D_aircraft, all p : A_pilot,
  all c : A_carrier, all s : Self,
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  A_carrier!equal(c, D_aircraft!airCarrier(a)) ->
  A_pilot!equal(p, D_aircraft!pilot_in_command(a)) ->
  A_carrier!safetyProceduresDisruptive(c) ->
  !disruptivePassengersOnBoard(a, s) ->
  (A_pilot!informed_disruptive(p) /\ A_carrier!informed_disruptive(c) /\
   D_aircraft!secControls_applied(a));

(** Security Property: 4.7.4. The carriage of weapons by law enforcement
    officers and other authorized persons, acting in the performance of their
    duties, requires special authorization in accordance with the laws of the
    states involved. *)

logical let weaponCarried (o : Wp, p : Arm_passenger) =
  Obj_set!member(!wpToObj(o), Arm_passenger!objects_carried(p)) \/
  ex cb : C_baggage,
    Cb_set!member(cb, Arm_passenger!cabinBaggage(p)) /\
    Obj_set!member(!wpToObj(o), C_baggage!get_objects(cb));

property property_4_7_4a : all a : D_aircraft, all o : Wp,
  all p : Arm_passenger, all area : Sra, all s : Self,
  Arm_pa_set!member(p, !armedPassengers(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Cp_set!member(!armToCp(p), D_aircraft!onboardPersons(a)) ->
  !weaponCarried(o, p) -> Arm_passenger!has_authorization(o, p);

property property_4_7_4b : all p : Arm_passenger, all o : Wp, all s : Self,
  Arm_pa_set!member(p, !armedPassengers(s)) -> Wp_set!member(o, !weapons(s)) ->
  !weaponCarried(o, p) -> Arm_passenger!has_authorization(o, p) ->
  Wp!is_authorized(o);
 
(** Security Property: 4.7.5. The travel of armed personnel, including
    in-flight security officers, on board aircraft must obtained agreement from
    all states involved by such travel. *)

property property_4_7_5 : all a : D_aircraft, all p : Arm_passenger,
  all area : Sra, all s : Self,
  Arm_pa_set!member(p, !armedPassengers(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Cp_set!member(!armToCp(p), D_aircraft!onboardPersons(a)) ->
  D_aircraft!obtainedAgreement(p, a);

(** Security Property: 4.7.6. Weapons, other than those transported by armed
    personnel, are authorized on board only when they are not loaded (if
    applicable) and are inaccessible to any person during flight time. *)

property property_4_7_6 : all a : D_aircraft, all w : Wp, all area : Sra,
  all s : Self, all p : Arm_passenger,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Obj_set!member(!wpToObj(w), D_aircraft!onboardObjects(a)) ->
  Cp_set!member(!armToCp(p), D_aircraft!onboardPersons(a)) ->
  ~ (!weaponCarried(w, p)) ->
  (Wp!is_authorized(w) /\ Wp!inaccessible_in_cabin(w) /\ ~ (Wp!loaded(w)));

(** Security Property: 4.7.7. Deployed in-flight security officers must be
    government personnel who are especially selected and trained to take into
    account safety and security aspects on board aircraft. *)

property property_4_7_7 : all a : D_aircraft, all p : If_officer,
  all area : Sra, all s : Self,
  If_of_set!member(p, !inFlightOfficers(s)) ->
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Cp_set!member(!ifoToCp(p), D_aircraft!onboardPersons(a)) ->
  (If_officer!government_personnel(p) /\ If_officer!trained(p));

(** Security Property: 4.7.8. The pilot in command must be notified as to the
    number of armed persons and their seat location. *)

property property_4_7_8 : all a : D_aircraft, all area : Sra, all s : Self,
  all ap : Arm_passenger,
  Sra_set!member(area, !securityRestrictedAreas(s)) ->
  Dep_ac_set!member(a, Sra!departingAircraft_in_sra(area)) ->
  Cp_set!member(!armToCp(ap), D_aircraft!onboardPersons(a)) ->
  Seat_set!member(Arm_passenger!seat_number(ap),
                  A_pilot!informed_armed(D_aircraft!pilot_in_command(a)));

logical let objCarriedByArmPassenger (o : Obj, p : Arm_passenger) =
  Obj_set!member(o, Arm_passenger!objects_carried(p)) \/
  ex cb : C_baggage,
    Cb_set!member(cb, Arm_passenger!cabinBaggage(p)) /\
    Obj_set!member(o, C_baggage!get_objects(cb));

logical let authorizedObjByArmed (p : Arm_passenger, s : Self) =
  all o : Do,
    Do_set!member(o, !dangerousObjects(s)) ->
    !objCarriedByArmPassenger(DoToObj!to_super(o), p) -> Do!is_authorized(o);

logical let objCarriedByDisPassenger (o : Obj, p : Dis_passenger) =
  Obj_set!member(o, Dis_passenger!objects_carried(p)) \/
  ex cb : C_baggage,
    Cb_set!member(cb, Dis_passenger!cabinBaggage(p)) /\
    Obj_set!member(o, C_baggage!get_objects(cb));

logical let no_contact_DangerousObject (p : Dis_passenger, a : D_aircraft,
                                        s : Self) =
  all o : Do, Do_set!member(o, !dangerousObjects(s)) ->
  (~ (!objCarriedByDisPassenger(DoToObj!to_super(o), p)) /\
   (all x : Arm_passenger,    
     Arm_pa_set!member(x, !armedPassengers(s)) ->
     Obj_set!member(DoToObj!to_super(o), D_aircraft!onboardObjects(a)) ->
     Cp_set!member(!armToCp(x), D_aircraft!onboardPersons(a)) ->
     ~ (!objCarriedByArmPassenger(DoToObj!to_super(o), x)) ->
     Dis_passenger!no_contact_with(o, p)));

(** Hidden Assumption: 5. Armed personnel have authorized access to departing
    aircraft, only if their identity are verified, their movement to departing
    aircraft are supervised, their travel on board the corresponding aircraft
    has obtained appropriate agreement, and their seat number is known to the
    pilot in command. *)

property hidden_assumption_5 : all p : Arm_personnel, all a : D_aircraft,
  all s : Self, 
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  Cp_set!member(!apeToCp(p), D_aircraft!onboardPersons(a)) ->
  Arm_personnel!identityVerified(p) ->
  D_aircraft!movementSupervised(!apeToAs(p), a) ->
  D_aircraft!obtainedAgreement(ApeToArm!to_super(p), a) ->
  Seat_set!member(Arm_personnel!seat_number(p),
                  A_pilot!informed_armed(D_aircraft!pilot_in_command(a))) ->
  D_aircraft!access_authorized(!apeToAs(p), a);

(** Hidden Assumption: 6. In Flight Security Officers have authorized access to
    departing aircraft, only if their identity are verified, their movement to
    departing aircraft are supervised, their travel on board the corresponding
    aircraft has obtained appropriate agreement, their seat number is known to
    the pilot in command, and they are government personnel who have been
    trained properly. *)

property hidden_assumption_6 : all p : If_officer, all a : D_aircraft,
  all s : Self,
  Dep_ac_set!member(a, !departingAircraft(s)) ->
  Cp_set!member(!ifoToCp(p), D_aircraft!onboardPersons(a)) ->
  If_officer!identityVerified(p) ->
  D_aircraft!movementSupervised(!ifoToAs(p), a) ->
  D_aircraft!obtainedAgreement(IfoToArm!to_super(p), a) ->
  Seat_set!member(If_officer!seat_number(p),
                  A_pilot!informed_armed(D_aircraft!pilot_in_command(a))) ->
  If_officer!government_personnel(p) -> If_officer!trained(p) ->
  D_aircraft!access_authorized(!ifoToAs(p), a);

(** Hidden Assumption: 7. Irrespective of the carriage of weapons, armed
    passengers having authorized access to departing aircraft are considered
    not to transport any other unauthorized dangerous object. *)

property hidden_assumption_7 : all p : Arm_passenger, all o : Do, all s : Self,
  Do_set!member(o, Do_set!diff(!dangerousObjects(s),
    WpToDo!to_super_set(!weapons(s)))) ->
  !objCarriedByArmPassenger(DoToObj!to_super(o), p) -> Do!is_authorized(o);

(*    
(** Security Property: 4.7a. Armed passengers admitted on board are eligible
    and can only transport authorized objects. *)

theorem property_4_7a : all p : arm_passenger, all a : d_aircraft, all area : sra, 
  all s : Self,
  arm_pa_set!member(p, !armedPassengers(s)) -> 
  sra_set!member(area, !securityRestrictedAreas(s)) ->
    dep_ac_set!member(a, sra!departingAircraft_in_sra(area)) ->
     cp_set!member(!armToCp(p), d_aircraft!onboardPersons(a)) -> 
       (d_aircraft!access_authorized(!armToAs(p), a) /\
        !authorizedObjByArmed(p, s))

proof : 
<1>1 assume p : arm_passenger
            a : d_aircraft
            area : sra s : self
     H1 : arm_pa_set!member(p, !armedPassengers(s)) 
     H2 : sra_set!member(area, !securityRestrictedAreas(s))
     H3 : dep_ac_set!member(a, sra!departingAircraft_in_sra(area))
     H4 : cp_set!member(!armToCp(p), d_aircraft!onboardPersons(a))
 
     prove d_aircraft!access_authorized(!armToAs(p), a) /\
           !authorizedObjByArmed(p, s)

  <2>1 assume 
       H7 : dep_ac_set!member(a, !departingAircraft(s))
      
       prove  sra!access_authorized(!cpToAs(!armToCp(p)), area)
              /\ d_aircraft!accessing_aircraft(!cpToAs(!armToCp(p)), a)
              /\ as_set!member(!cpToAs(!armToCp(p)),
                                sra!airsideSubjects_in_sra(area)) 

       by  <1>:H4, <2>:H7, <1>:H3, <1>:H2, !departingAircraft_ob_person,
           !airsideSubjects_in_sra, !property_4_2_1

 <2>2 assume p1 : arm_personnel
      H5 : arm_pe_set!member(p1, !armedPersonnel(s)) 
      H6 : arm_passenger!equal(apeToArm!to_super(p1), p)
      H7 : dep_ac_set!member(a, !departingAircraft(s))

      prove d_aircraft!access_authorized(!armToAs(p), a)

  <3>1 prove arm_personnel!identityVerified(p1) /\
             arm_personnel!movementSupervised(p1)

      by <2>1, <1>:H2, <2>:H6, <1>:H3, <2>:H7, !property_4_2_3, !property_4_2_5, 
         cpToAp!to_super_airsideSubject, apToAs!to_super_airsideSubject, 
         cpaToCp!to_super_airsideSubject, depToCpa!to_super_airsideSubject, 
         armToDep!to_super_airsideSubject,
         arm_passenger!equal_congruence, apeToArm!to_super_airsideSubject,
         (* arm_passenger!equal_symmetric,*) #beq_symm, #beq_subst
         def !cpToAs, !armToCp, !depToCp

  <3>2 prove d_aircraft!obtainedAgreement(apeToArm!to_super(p1), a)
     
       by <1>:H1, <1>:H2, <1>:H3, <1>:H4, <2>:H6, !property_4_7_5,
       d_aircraft!obtainedAgreement_congruence, arm_passenger!equal_symmetric

  <3>3 prove seat_set!member(arm_personnel!seat_number(p1),
               a_pilot!informed_armed(d_aircraft!pilot_in_command(a)))

       by <1>:H2, <1>:H3, <1>:H4, <2>:H6, !property_4_7_8, 
          arm_passenger!equal_seat, apeToArm!to_super_cabinPassenger, 
          seat_set!equal_member2
   
  <3>4 prove d_aircraft!access_authorized(!apeToAs(p1), a)
       by <3>1, <3>2, <3>3, <2>:H7, <2>:H6, <1>:H4, 
          cpaToCp!to_super_congruence, depToCpa!to_super_congruence, 
          armToDep!to_super_congruence, !hidden_assumption_5,
          cp_set!equal_member2, !armed_personnel_to_cabin_person
          def !armToCp, !depToCp

  <3>5 qed by <3>4, <2>:H6, d_aircraft!access_authorized_congruence,
           armToDep!to_super_congruence,
           cpaToCp!to_super_congruence,depToCpa!to_super_congruence, 
           cpToAp!to_super_congruence, apToAs!to_super_congruence
           def !armToAs, !armToCp, !cpToAs, !apeToAs, !apeToCp, 
               !depToCp

 <2>3 assume p1 : if_officer
      H5 : if_of_set!member(p1, !inFlightOfficers(s)) 
      H6 : arm_passenger!equal(ifoToArm!to_super(p1), p)
      H7 : dep_ac_set!member(a, !departingAircraft(s))

      prove d_aircraft!access_authorized(!armToAs(p), a)
      
  <3>2 prove if_officer!identityVerified(p1) /\
             if_officer!movementSupervised(p1)

      by <2>1, <1>:H2, <2>:H6, <1>:H3, <2>:H7, !property_4_2_3, !property_4_2_5, 
          cpToAp!to_super_airsideSubject, apToAs!to_super_airsideSubject, 
          armToDep!to_super_airsideSubject, cpaToCp!to_super_airsideSubject,
          depToCpa!to_super_airsideSubject, 
          arm_passenger!equal_congruence,
          ifoToArm!to_super_airsideSubject, (*arm_passenger!equal_symmetric,*)
          #beq_symm, #beq_subst def !cpToAs, !armToCp, !depToCp

  <3>3 prove d_aircraft!obtainedAgreement(ifoToArm!to_super(p1), a)
     
       by <1>:H1, <1>:H2, <1>:H3, <1>:H4, <2>:H6, !property_4_7_5,
       d_aircraft!obtainedAgreement_congruence, arm_passenger!equal_symmetric

  <3>4 prove seat_set!member(if_officer!seat_number(p1),
               a_pilot!informed_armed(d_aircraft!pilot_in_command(a)))

       by <1>:H2, <1>:H3, <1>:H4, <2>:H6, !property_4_7_8, 
          arm_passenger!equal_seat, ifoToArm!to_super_cabinPassenger, 
          seat_set!equal_member2
   
  <3>5 prove d_aircraft!access_authorized(!ifoToAs(p1), a) 
       
       by <3>2, <3>3, <3>4, <2>:H7, <1>:H2, <1>:H3, <2>:H5, <2>:H6, 
          <1>:H4, !property_4_7_7, armToDep!to_super_congruence,
          cpaToCp!to_super_congruence, depToCpa!to_super_congruence, 
          !hidden_assumption_6, cp_set!equal_member2 
          def !armToCp, !ifoToCp, !depToCp         

  <3>6 qed by <3>5, <2>:H6, 
           d_aircraft!access_authorized_congruence,
           armToDep!to_super_congruence, cpaToCp!to_super_congruence,
           depToCpa!to_super_congruence,
           cpToAp!to_super_congruence, apToAs!to_super_congruence
           def !ifoToAs, !armToAs, !ifoToCp, !cpToAs, !armToCp, 
               !depToCp 

 <2>4 prove !authorizedObjByArmed(p, s)

  <3>1 assume o : do 
       H5 : do_set!member(o, ddToDo!to_super_set(!dangerousDevices(s)))
       H6 : !objCarriedByArmPassenger(doToObj!to_super(o), p)
      
      prove  do!is_authorized(o)     
     
      by <3>:H5, <3>:H6, do_set!diff3, !dd_not_wp_exp_const, 
         !hidden_assumption_7, do_set!union3
         def !dangerousObjects

  <3>2 assume o : do 
      H5 : do_set!member(o, wpToDo!to_super_set(!weapons(s))) 
      H6 : !objCarriedByArmPassenger(doToObj!to_super(o), p)
      
      prove do!is_authorized(o)

   <4>1 assume w : wp 
         H7 : wp_set!member(w, !weapons(s)) 
         H8 : do!equal(wpToDo!to_super(w), o)

        prove do!is_authorized(o)
        
        by <3>:H6, <1>:H1, <1>:H2, <1>:H3, <1>:H4,
           <4>:H8, <4>:H7, !property_4_7_4a, !property_4_7_4b, 
            doToObj!to_super_congruence, obj_set!equal_member2, 
            !weapon_to_object, wpToDo!to_super_congruence3,  
            #beq_subst, do!equal_authorized 
            def !weaponCarried, !objCarriedByArmPassenger 
   
   <4>2 qed by <4>1, <3>:H5, wpToDo!to_super_set_const1
  
  <3>3 assume o : do 
       H5 : do_set!member(o, eoToDo!to_super_set(!explosives(s))) 
       H6 : !objCarriedByArmPassenger(doToObj!to_super(o), p)
      
       prove do!is_authorized(o)
      
       by <3>:H5, <3>:H6, do_set!diff3, !wp_not_exp_const, 
         !hidden_assumption_7, do_set!union4
          def !dangerousObjects

  <3>4 qed by <3>1, <3>2, <3>3, do_set!union1 
           def !dangerousObjects, !authorizedObjByArmed 

 <2>5 qed by <2>2, <2>3, <2>4, <1>:H1, <1>:H2, <1>:H3, apeToArm!to_super_set_const1, 
          ifoToArm!to_super_set_const1, arm_pa_set!union1, !sra_departingAircraft
      def !armedPassengers
<1>2 qed;

(** Hidden Assumption : 8. Disruptive passengers have authorized access to departing 
    aircraft, only if their identity is verified, their movement to 
    aircraft is supervised, and that appropriate security controls are applied 
    on board the corresponding departing aircraft to accommodate for their 
    presence. 
*)

property hidden_assumption_8 : all p : dis_passenger, all a : d_aircraft, 
  all s : self, 
   dep_ac_set!member(a, !departingAircraft(s)) ->
    cp_set!member(!disToCp(p), d_aircraft!onboardPersons(a)) -> 
     dis_passenger!identityVerified(p) ->
      dis_passenger!movementSupervised(p) -> 
       d_aircraft!secControls_applied(a) ->
          d_aircraft!access_authorized(!disToAs(p), a);

(** Hidden Assumption : 9. If appropriate security controls are applied to 
    cater for the presence of disruptive passengers on board departing aircraft, 
    then the latter are considered not to be in contact with any potential 
    dangerous objects on board. *)

logical let no_dangerousObjWithDisPass(p : dis_passenger, a : d_aircraft, s : self) = 
   all o : do, do_set!member(o, !dangerousObjects(s)) -> 
    (~(!objCarriedByDisPassenger(doToObj!to_super(o), p)) /\ 
     
    (all x : arm_passenger,  
      ~(do_set!member(o, wpToDo!to_super_set(!weapons(s)))) ->
      obj_set!member(doToObj!to_super(o), d_aircraft!onboardObjects(a)) ->
        cp_set!member(!armToCp(x), d_aircraft!onboardPersons(a)) ->
          ~(!objCarriedByArmPassenger(doToObj!to_super(o), x)) -> 
            dis_passenger!no_contact_with(o, p)));

property hidden_assumption_9 : all p : dis_passenger, all a : d_aircraft, 
  all s : self, 
   dep_ac_set!member(a, !departingAircraft(s)) ->
    cp_set!member(!disToCp(p), d_aircraft!onboardPersons(a)) -> 
       d_aircraft!secControls_applied(a) ->
          !no_dangerousObjWithDisPass(p, a, s);

theorem property_4_7b : all p : dis_passenger, all a : d_aircraft, 
 all area : sra, all s : self, 
  dis_pa_set!member(p, !disruptivePassengers(s)) ->
  sra_set!member(area, !securityRestrictedAreas(s)) ->
    dep_ac_set!member(a, sra!departingAircraft_in_sra(area)) ->
     cp_set!member(!disToCp(p), d_aircraft!onboardPersons(a)) -> 
       (d_aircraft!access_authorized(!disToAs(p), a) /\
          !no_contact_DangerousObject(p, a, s))
        
proof : 

<1>1 assume p : dis_passenger
            a : d_aircraft 
            area : sra
            s : self
  
     H1 : dis_pa_set!member(p, !disruptivePassengers(s))
     H2 : sra_set!member(area, !securityRestrictedAreas(s))
     H3 : dep_ac_set!member(a, sra!departingAircraft_in_sra(area))
     H4 : cp_set!member(!disToCp(p), d_aircraft!onboardPersons(a))
     H5 : dep_ac_set!member(a, !departingAircraft(s))
   
     prove d_aircraft!access_authorized(!disToAs(p), a) /\
          !no_contact_DangerousObject(p, a, s)
 

 <2>1 prove dis_passenger!identityVerified(p) /\
            dis_passenger!movementSupervised(p) 

      by  <1>:H4, <1>:H5, <1>:H2, <1>:H3, !departingAircraft_ob_person,
           !airsideSubjects_in_sra, !property_4_2_1, !property_4_2_3,
           !property_4_2_5, cpToAp!to_super_airsideSubject, 
           apToAs!to_super_airsideSubject,
           disToDep!to_super_airsideSubject, cpaToCp!to_super_airsideSubject,
           depToCpa!to_super_airsideSubject, 
           #beq_symm, #beq_subst def !cpToAs, !disToCp, !depToCp

 <2>2 prove d_aircraft!secControls_applied(a) 
      
      by <1>:H5, <1>:H1, <1>:H4, !property_4_7_1, !property_4_7_2, 
         a_carrier!equal_reflexive, a_pilot!equal_reflexive,
         !property_4_7_3 def !disruptivePassengersOnBoard

 <2>3 prove d_aircraft!access_authorized(!disToAs(p),a)
      
      by <2>1, <2>2, <1>:H5, <1>:H4, !hidden_assumption_8  

 <2>4 prove !no_contact_DangerousObject(p,a, s)

   <3>1 assume o : do
         H6 : do_set!member(o, !dangerousObjects(s))
         H7 : ~(do_set!member(o, wpToDo!to_super_set(!weapons(s))))

         prove ~(!objCarriedByDisPassenger(doToObj!to_super(o), p))

           by <1>:H4, <1>:H5, <2>2, <3>:H6, !hidden_assumption_9
              def !no_dangerousObjWithDisPass
         
   <3>2 assume o : do 
               x : arm_passenger
          H6 : do_set!member(o,!dangerousObjects(s))
          H7 : ~(do_set!member(o, wpToDo!to_super_set(!weapons(s)))) 
          H8 : arm_pa_set!member(x, !armedPassengers(s))
          H9 : obj_set!member(doToObj!to_super(o), d_aircraft!onboardObjects(a)) 
          H10 : cp_set!member(!armToCp(x), d_aircraft!onboardPersons(a)) 
          H11 : ~(!objCarriedByArmPassenger(doToObj!to_super(o), x)) 
       
          prove dis_passenger!no_contact_with(o, p)
        
            by <1>:H4, <1>:H5, <2>2, <3>:H6, <3>:H7, <3>:H9, <3>:H10, <3>:H11, 
               !hidden_assumption_9 def !no_dangerousObjWithDisPass

   <3>3 assume o : do 
         H6 : do_set!member(o, !dangerousObjects(s))
         H7 : do_set!member(o, wpToDo!to_super_set(!weapons(s)))

         prove ~(!objCarriedByDisPassenger(doToObj!to_super(o), p))

         by <1>:H4, <1>:H5, <2>2, <3>:H6, !hidden_assumption_9
             def !no_dangerousObjWithDisPass

   <3>4 assume o : do 
               x : arm_passenger
          H6 : do_set!member(o, !dangerousObjects(s))
          H7 : do_set!member(o, wpToDo!to_super_set(!weapons(s))) 
          H8 : arm_pa_set!member(x, !armedPassengers(s))
          H9 : obj_set!member(doToObj!to_super(o), d_aircraft!onboardObjects(a)) 
          H10 : cp_set!member(!armToCp(x), d_aircraft!onboardPersons(a)) 
          H11 : ~(!objCarriedByArmPassenger(doToObj!to_super(o), x)) 
       
          prove dis_passenger!no_contact_with(o, p)
    
      <4>1 assume w : wp 
           H12 : wp_set!member(w, !weapons(s))
           H13 : do!equal(wpToDo!to_super(w), o)
           H14 : obj_set!member(!wpToObj(w), d_aircraft!onboardObjects(a)) 
           H15 : obj!equal(!wpToObj(w), doToObj!to_super(o))

           prove dis_passenger!no_contact_with(o, p)

        <5>1 prove do!inaccessible_in_cabin(o)

             by <3>:H11, <4>:H15, obj_set!equal_member1, 
                <1>:H2, <1>:H3, <4>:H14, <3>:H10,
                !property_4_7_6, wpToDo!to_super_congruence2, #beq_subst, 
                 <4>:H13, do!equal_inaccessible_in_cabin
             def !objCarriedByArmPassenger, !weaponCarried
             
        <5>2 qed by <5>1, <1>:H5, <1>:H4, <3>:H9, 
                 !disruptivePassenger_inaccessible_do 

       <4>2 qed by <4>1, <3>:H7, <3>:H9, wpToDo!to_super_set_const1, 
                !weapon_to_object, obj!equal_transitive, 
                doToObj!to_super_congruence, obj_set!equal_member2

   <3>5 qed by <3>1, <3>2, <3>3, <3>4 
            def !no_contact_DangerousObject     

 <2>5 qed by <2>3, <2>4

 <1>2 qed by <1>1, !sra_departingAircraft;
*)

end;;
