require('dedukti')
dk_sets = { }
require("dk_builtins")
require("basics")
check_ext(dk_cc,'[ Lua ]  cc is undefined.')
dk_sets.species_instance__Setoid_c = { cid = "sets.species_instance__Setoid" ; args = { } }
dk_sets.species_instance__Setoid_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
check_ext(dk_dk_builtins,'[ Lua ]  dk_builtins is undefined.')
dk_sets.species_instance__Setoid_c = { cid="sets.species_instance__Setoid" ; arity = 0 ; args = { } ; f = function() return app0(dk_dk_builtins.collection_c) end }
dk_sets.methtype__Setoid__different_c = { cid = "sets.methtype__Setoid__different" ; args = { } }
dk_sets.methtype__Setoid__different_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
check_ext(dk_basics,'[ Lua ]  basics is undefined.')
dk_sets.methtype__Setoid__different_c = { cid="sets.methtype__Setoid__different" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (equal_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) end }
check_ext(dk_sets,'[ Lua ]  sets is undefined.')
dk_sets.meth__Setoid__different_c = { cid = "sets.meth__Setoid__different" ; args = { } }
dk_sets.meth__Setoid__different_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Setoid__different_c) ) end } }
dk_sets.methtype__Setoid__same_is_not_different_c = { cid = "sets.methtype__Setoid__same_is_not_different" ; args = { } }
dk_sets.methtype__Setoid__same_is_not_different_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
check_ext(dk_dk_logic,'[ Lua ]  dk_logic is undefined.')
dk_sets.methtype__Setoid__same_is_not_different_c = { cid="sets.methtype__Setoid__same_is_not_different" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (equal_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (equal_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) ) , { clam_f = function (different_c) return app( app0(dk_dk_logic.eeP_c) , app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.eqv_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( different_c , rep_c ) , equal_c ) , var__x_c ) , var__y_c ) ) ) , app( app0(dk_dk_logic.not_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( equal_c , rep_c ) , var__x_c ) , var__y_c ) ) ) ) end } ) end } ) ) end } ) end } ) end } ) end }
dk_sets.meth__Setoid__same_is_not_different_c = { cid = "sets.meth__Setoid__same_is_not_different" ; args = { } }
dk_sets.meth__Setoid__same_is_not_different_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Setoid__same_is_not_different_c) ) end } }
dk_sets.methtype__Setoid__different_is_complete_c = { cid = "sets.methtype__Setoid__different_is_complete" ; args = { } }
dk_sets.methtype__Setoid__different_is_complete_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Setoid__different_is_complete_c = { cid="sets.methtype__Setoid__different_is_complete" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (equal_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (equal_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) ) , { clam_f = function (different_c) return app( app0(dk_dk_logic.eeP_c) , app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__z_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( different_c , rep_c ) , equal_c ) , var__x_c ) , var__y_c ) ) ) , app( app( app0(dk_dk_logic.or_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( different_c , rep_c ) , equal_c ) , var__x_c ) , var__z_c ) ) ) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( different_c , rep_c ) , equal_c ) , var__y_c ) , var__z_c ) ) ) ) end } ) end } ) end } ) ) end } ) end } ) end } ) end }
dk_sets.meth__Setoid__different_is_complete_c = { cid = "sets.meth__Setoid__different_is_complete" ; args = { } }
dk_sets.meth__Setoid__different_is_complete_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Setoid__different_is_complete_c) ) end } }
dk_sets.methtype__Setoid__different_is_irreflexive_c = { cid = "sets.methtype__Setoid__different_is_irreflexive" ; args = { } }
dk_sets.methtype__Setoid__different_is_irreflexive_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Setoid__different_is_irreflexive_c = { cid="sets.methtype__Setoid__different_is_irreflexive" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (equal_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (equal_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) ) , { clam_f = function (different_c) return app( app0(dk_dk_logic.eeP_c) , app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__x_c) return app( app0(dk_dk_logic.not_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( different_c , rep_c ) , equal_c ) , var__x_c ) , var__x_c ) ) ) end } ) ) end } ) end } ) end } ) end }
dk_sets.meth__Setoid__different_is_irreflexive_c = { cid = "sets.meth__Setoid__different_is_irreflexive" ; args = { } }
dk_sets.meth__Setoid__different_is_irreflexive_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Setoid__different_is_irreflexive_c) ) end } }
dk_sets.methtype__Setoid__different_is_symmetric_c = { cid = "sets.methtype__Setoid__different_is_symmetric" ; args = { } }
dk_sets.methtype__Setoid__different_is_symmetric_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Setoid__different_is_symmetric_c = { cid="sets.methtype__Setoid__different_is_symmetric" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (equal_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (equal_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) ) , { clam_f = function (different_c) return app( app0(dk_dk_logic.eeP_c) , app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( different_c , rep_c ) , equal_c ) , var__x_c ) , var__y_c ) ) ) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( different_c , rep_c ) , equal_c ) , var__y_c ) , var__x_c ) ) ) end } ) end } ) ) end } ) end } ) end } ) end }
dk_sets.meth__Setoid__different_is_symmetric_c = { cid = "sets.meth__Setoid__different_is_symmetric" ; args = { } }
dk_sets.meth__Setoid__different_is_symmetric_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Setoid__different_is_symmetric_c) ) end } }
dk_sets.collmeth__rep_c = { cid = "sets.collmeth__rep" ; args = { } }
dk_sets.collmeth__rep_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app0(dk_cc.uT_c) end } }
dk_sets.collmeth__element_c = { cid = "sets.collmeth__element" ; args = { } }
dk_sets.collmeth__element_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) end } }
dk_sets.collmeth__equal_c = { cid = "sets.collmeth__equal" ; args = { } }
dk_sets.collmeth__equal_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , app0(dk_basics.bool_c) ) ) ) end } }
dk_sets.collmeth__different_c = { cid = "sets.collmeth__different" ; args = { } }
dk_sets.collmeth__different_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , app0(dk_basics.bool_c) ) ) ) end } }
dk_sets.collmeth__equal_reflexive_c = { cid = "sets.collmeth__equal_reflexive" ; args = { } }
dk_sets.collmeth__equal_reflexive_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__x_c) return app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , c_c ) , var__x_c ) , var__x_c ) ) end } ) ) end } }
dk_sets.collmeth__equal_symmetric_c = { cid = "sets.collmeth__equal_symmetric" ; args = { } }
dk_sets.collmeth__equal_symmetric_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , c_c ) , var__x_c ) , var__y_c ) ) ) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , c_c ) , var__y_c ) , var__x_c ) ) ) end } ) end } ) ) end } }
dk_sets.collmeth__equal_transitive_c = { cid = "sets.collmeth__equal_transitive" ; args = { } }
dk_sets.collmeth__equal_transitive_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__z_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , c_c ) , var__x_c ) , var__y_c ) ) ) , app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , c_c ) , var__y_c ) , var__z_c ) ) ) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , c_c ) , var__x_c ) , var__z_c ) ) ) ) end } ) end } ) end } ) ) end } }
dk_sets.collmeth__parse_c = { cid = "sets.collmeth__parse" ; args = { } }
dk_sets.collmeth__parse_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app( app( app0(dk_cc.Arrow_c) , app0(dk_basics.string_c) ) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) ) end } }
dk_sets.collmeth__print_c = { cid = "sets.collmeth__print" ; args = { } }
dk_sets.collmeth__print_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , app0(dk_basics.string_c) ) ) end } }
dk_sets.collmeth__same_is_not_different_c = { cid = "sets.collmeth__same_is_not_different" ; args = { } }
dk_sets.collmeth__same_is_not_different_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.eqv_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__different_c) , c_c ) , var__x_c ) , var__y_c ) ) ) , app( app0(dk_dk_logic.not_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , c_c ) , var__x_c ) , var__y_c ) ) ) ) end } ) end } ) ) end } }
dk_sets.collmeth__different_is_complete_c = { cid = "sets.collmeth__different_is_complete" ; args = { } }
dk_sets.collmeth__different_is_complete_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__z_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__different_c) , c_c ) , var__x_c ) , var__y_c ) ) ) , app( app( app0(dk_dk_logic.or_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__different_c) , c_c ) , var__x_c ) , var__z_c ) ) ) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__different_c) , c_c ) , var__y_c ) , var__z_c ) ) ) ) end } ) end } ) end } ) ) end } }
dk_sets.collmeth__different_is_irreflexive_c = { cid = "sets.collmeth__different_is_irreflexive" ; args = { } }
dk_sets.collmeth__different_is_irreflexive_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__x_c) return app( app0(dk_dk_logic.not_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__different_c) , c_c ) , var__x_c ) , var__x_c ) ) ) end } ) ) end } }
dk_sets.collmeth__different_is_symmetric_c = { cid = "sets.collmeth__different_is_symmetric" ; args = { } }
dk_sets.collmeth__different_is_symmetric_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__different_c) , c_c ) , var__x_c ) , var__y_c ) ) ) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__different_c) , c_c ) , var__y_c ) , var__x_c ) ) ) end } ) end } ) ) end } }
dk_sets.species_instance__Anti_setoid_c = { cid = "sets.species_instance__Anti_setoid" ; args = { } }
dk_sets.species_instance__Anti_setoid_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.species_instance__Anti_setoid_c = { cid="sets.species_instance__Anti_setoid" ; arity = 0 ; args = { } ; f = function() return app0(dk_dk_builtins.collection_c) end }
dk_sets.methtype__Anti_setoid__equal_c = { cid = "sets.methtype__Anti_setoid__equal" ; args = { } }
dk_sets.methtype__Anti_setoid__equal_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Anti_setoid__equal_c = { cid="sets.methtype__Anti_setoid__equal" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (different_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) end }
dk_sets.meth__Anti_setoid__equal_c = { cid = "sets.meth__Anti_setoid__equal" ; args = { } }
dk_sets.meth__Anti_setoid__equal_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Anti_setoid__equal_c) ) end } }
dk_sets.methtype__Anti_setoid__different_is_not_same_c = { cid = "sets.methtype__Anti_setoid__different_is_not_same" ; args = { } }
dk_sets.methtype__Anti_setoid__different_is_not_same_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Anti_setoid__different_is_not_same_c = { cid="sets.methtype__Anti_setoid__different_is_not_same" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (different_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (different_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) ) , { clam_f = function (equal_c) return app( app0(dk_dk_logic.eeP_c) , app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.eqv_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( equal_c , rep_c ) , different_c ) , var__x_c ) , var__y_c ) ) ) , app( app0(dk_dk_logic.not_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( different_c , rep_c ) , var__x_c ) , var__y_c ) ) ) ) end } ) end } ) ) end } ) end } ) end } ) end }
dk_sets.meth__Anti_setoid__different_is_not_same_c = { cid = "sets.meth__Anti_setoid__different_is_not_same" ; args = { } }
dk_sets.meth__Anti_setoid__different_is_not_same_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Anti_setoid__different_is_not_same_c) ) end } }
dk_sets.methtype__Anti_setoid__equal_reflexive_c = { cid = "sets.methtype__Anti_setoid__equal_reflexive" ; args = { } }
dk_sets.methtype__Anti_setoid__equal_reflexive_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Anti_setoid__equal_reflexive_c = { cid="sets.methtype__Anti_setoid__equal_reflexive" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (different_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (different_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) ) , { clam_f = function (equal_c) return app( app0(dk_dk_logic.eeP_c) , app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__x_c) return app( app0(dk_dk_logic.ebP_c) , app( app( app( app( equal_c , rep_c ) , different_c ) , var__x_c ) , var__x_c ) ) end } ) ) end } ) end } ) end } ) end }
dk_sets.meth__Anti_setoid__equal_reflexive_c = { cid = "sets.meth__Anti_setoid__equal_reflexive" ; args = { } }
dk_sets.meth__Anti_setoid__equal_reflexive_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Anti_setoid__equal_reflexive_c) ) end } }
dk_sets.methtype__Anti_setoid__equal_symmetric_c = { cid = "sets.methtype__Anti_setoid__equal_symmetric" ; args = { } }
dk_sets.methtype__Anti_setoid__equal_symmetric_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Anti_setoid__equal_symmetric_c = { cid="sets.methtype__Anti_setoid__equal_symmetric" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (different_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (different_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) ) , { clam_f = function (equal_c) return app( app0(dk_dk_logic.eeP_c) , app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( equal_c , rep_c ) , different_c ) , var__x_c ) , var__y_c ) ) ) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( equal_c , rep_c ) , different_c ) , var__y_c ) , var__x_c ) ) ) end } ) end } ) ) end } ) end } ) end } ) end }
dk_sets.meth__Anti_setoid__equal_symmetric_c = { cid = "sets.meth__Anti_setoid__equal_symmetric" ; args = { } }
dk_sets.meth__Anti_setoid__equal_symmetric_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Anti_setoid__equal_symmetric_c) ) end } }
dk_sets.methtype__Anti_setoid__equal_transitive_c = { cid = "sets.methtype__Anti_setoid__equal_transitive" ; args = { } }
dk_sets.methtype__Anti_setoid__equal_transitive_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Anti_setoid__equal_transitive_c = { cid="sets.methtype__Anti_setoid__equal_transitive" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (different_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) ) , { clam_f = function (different_c) return app( app( app0(dk_cc.Arrow_c) , rep_c ) , app( app( app0(dk_cc.Arrow_c) , rep_c ) , app0(dk_basics.bool_c) ) ) end } ) end } ) ) , { clam_f = function (equal_c) return app( app0(dk_dk_logic.eeP_c) , app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.forall_c) , rep_c ) , { clam_f = function (var__z_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( equal_c , rep_c ) , different_c ) , var__x_c ) , var__y_c ) ) ) , app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( equal_c , rep_c ) , different_c ) , var__y_c ) , var__z_c ) ) ) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app( equal_c , rep_c ) , different_c ) , var__x_c ) , var__z_c ) ) ) ) end } ) end } ) end } ) ) end } ) end } ) end } ) end }
dk_sets.meth__Anti_setoid__equal_transitive_c = { cid = "sets.meth__Anti_setoid__equal_transitive" ; args = { } }
dk_sets.meth__Anti_setoid__equal_transitive_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Anti_setoid__equal_transitive_c) ) end } }
dk_sets.collmeth__different_is_not_same_c = { cid = "sets.collmeth__different_is_not_same" ; args = { } }
dk_sets.collmeth__different_is_not_same_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.eqv_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , c_c ) , var__x_c ) , var__y_c ) ) ) , app( app0(dk_dk_logic.not_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__different_c) , c_c ) , var__x_c ) , var__y_c ) ) ) ) end } ) end } ) ) end } }
dk_sets.ifailed_c = { cid = "sets.ifailed" ; args = { } }
dk_sets.ifailed_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_cc.uT_c) end } ; cpi_f = function (type_var__a_c) return app( app0(dk_cc.eT_c) , app( app( app0(dk_cc.Arrow_c) , app0(dk_basics.string_c) ) , app( app( app0(dk_cc.Arrow_c) , type_var__a_c ) , type_var__a_c ) ) ) end } }
dk_sets.species_instance__Partial_set_c = { cid = "sets.species_instance__Partial_set" ; args = { } }
dk_sets.species_instance__Partial_set_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.species_instance__Partial_set_c = { cid="sets.species_instance__Partial_set" ; arity = 0 ; args = { } ; f = function() return app0(dk_dk_builtins.collection_c) end }
dk_sets.methtype__Partial_set__failed_c = { cid = "sets.methtype__Partial_set__failed" ; args = { } }
dk_sets.methtype__Partial_set__failed_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Partial_set__failed_c = { cid="sets.methtype__Partial_set__failed" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_cc.uuT_c) ) , { clam_f = function (rep_c) return rep_c end } ) ) , { clam_f = function (element_c) return app( app( app0(dk_cc.Arrow_c) , app0(dk_basics.string_c) ) , rep_c ) end } ) end } ) end }
dk_sets.meth__Partial_set__failed_c = { cid = "sets.meth__Partial_set__failed" ; args = { } }
dk_sets.meth__Partial_set__failed_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Partial_set__failed_c) ) end } }
dk_sets.collmeth__failed_c = { cid = "sets.collmeth__failed" ; args = { } }
dk_sets.collmeth__failed_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app( app( app0(dk_cc.Arrow_c) , app0(dk_basics.string_c) ) , app( app0(dk_dk_builtins.collmeth__rep_c) , c_c ) ) ) end } }
dk_sets.species_instance__Equivalence_relation_c = { cid = "sets.species_instance__Equivalence_relation" ; args = { } }
dk_sets.species_instance__Equivalence_relation_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.species_instance__Equivalence_relation_c = { cid="sets.species_instance__Equivalence_relation" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_sets.species_instance__Setoid_c) ) , { clam_f = function (isparam__Equivalence_relation__S_c) return app0(dk_dk_builtins.collection_c) end } ) end }
dk_sets.isparam__Equivalence_relation__S_c = { cid = "sets.isparam__Equivalence_relation__S" ; args = { } }
dk_sets.isparam__Equivalence_relation__S_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Object_c) end } ; cpi_f = function (s_c) return app( app0(dk_cc.eT_c) , app0(dk_sets.species_instance__Setoid_c) ) end } }
dk_sets.coll_isparam__S_c = { cid = "sets.coll_isparam__S" ; args = { } }
dk_sets.coll_isparam__S_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app0(dk_sets.species_instance__Setoid_c) ) end } }
dk_sets.methtype__Equivalence_relation__equiv_reflexive_c = { cid = "sets.methtype__Equivalence_relation__equiv_reflexive" ; args = { } }
dk_sets.methtype__Equivalence_relation__equiv_reflexive_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.methtype__Equivalence_relation__equiv_reflexive_c = { cid="sets.methtype__Equivalence_relation__equiv_reflexive" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_sets.species_instance__Setoid_c) ) , { clam_f = function (S_c) return app( app( app0(dk_cc.Pi_TTT_c) , app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_sets.species_instance__Setoid_c) ) , { clam_f = function (S_c) return app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , S_c ) ) , app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , S_c ) ) , app0(dk_dk_builtins.prop_c) ) ) end } ) ) , { clam_f = function (equiv_c) return app( app0(dk_dk_logic.eeP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , S_c ) ) , { clam_f = function (var__x_c) return app( app( app( equiv_c , S_c ) , var__x_c ) , var__x_c ) end } ) ) end } ) end } ) end }
dk_sets.meth__Equivalence_relation__equiv_reflexive_c = { cid = "sets.meth__Equivalence_relation__equiv_reflexive" ; args = { } }
dk_sets.meth__Equivalence_relation__equiv_reflexive_t = { tbox_cty = { clazy = function() return app( app0(dk_cc.eT_c) , app0(dk_sets.methtype__Equivalence_relation__equiv_reflexive_c) ) end } }
dk_sets.collmeth__equiv_c = { cid = "sets.collmeth__equiv" ; args = { } }
dk_sets.collmeth__equiv_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , app0(dk_dk_builtins.prop_c) ) ) ) end } }
dk_sets.collmeth__equal_refines_equiv_c = { cid = "sets.collmeth__equal_refines_equiv" ; args = { } }
dk_sets.collmeth__equal_refines_equiv_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) , var__x_c ) , var__y_c ) ) ) , app( app( app( app0(dk_sets.collmeth__equiv_c) , c_c ) , var__x_c ) , var__y_c ) ) end } ) end } ) ) end } }
dk_sets.collmeth__equiv_symmetric_c = { cid = "sets.collmeth__equiv_symmetric" ; args = { } }
dk_sets.collmeth__equiv_symmetric_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.imp_c) , app( app( app( app0(dk_sets.collmeth__equiv_c) , c_c ) , var__x_c ) , var__y_c ) ) , app( app( app( app0(dk_sets.collmeth__equiv_c) , c_c ) , var__y_c ) , var__x_c ) ) end } ) end } ) ) end } }
dk_sets.collmeth__equiv_transitive_c = { cid = "sets.collmeth__equiv_transitive" ; args = { } }
dk_sets.collmeth__equiv_transitive_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , { clam_f = function (var__z_c) return app( app( app0(dk_dk_logic.imp_c) , app( app( app( app0(dk_sets.collmeth__equiv_c) , c_c ) , var__x_c ) , var__y_c ) ) , app( app( app0(dk_dk_logic.imp_c) , app( app( app( app0(dk_sets.collmeth__equiv_c) , c_c ) , var__y_c ) , var__z_c ) ) , app( app( app( app0(dk_sets.collmeth__equiv_c) , c_c ) , var__x_c ) , var__z_c ) ) ) end } ) end } ) end } ) ) end } }
dk_sets.collmeth__equiv_reflexive_c = { cid = "sets.collmeth__equiv_reflexive" ; args = { } }
dk_sets.collmeth__equiv_reflexive_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__S_c) , c_c ) ) ) , { clam_f = function (var__x_c) return app( app( app( app0(dk_sets.collmeth__equiv_c) , c_c ) , var__x_c ) , var__x_c ) end } ) ) end } }
dk_sets.species_instance__Setoid_morphism_c = { cid = "sets.species_instance__Setoid_morphism" ; args = { } }
dk_sets.species_instance__Setoid_morphism_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.species_instance__Setoid_morphism_c = { cid="sets.species_instance__Setoid_morphism" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_sets.species_instance__Setoid_c) ) , { clam_f = function (isparam__Setoid_morphism__A_c) return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_sets.species_instance__Setoid_c) ) , { clam_f = function (isparam__Setoid_morphism__B_c) return app0(dk_dk_builtins.collection_c) end } ) end } ) end }
dk_sets.isparam__Setoid_morphism__A_c = { cid = "sets.isparam__Setoid_morphism__A" ; args = { } }
dk_sets.isparam__Setoid_morphism__A_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Object_c) end } ; cpi_f = function (s_c) return app( app0(dk_cc.eT_c) , app0(dk_sets.species_instance__Setoid_c) ) end } }
dk_sets.coll_isparam__A_c = { cid = "sets.coll_isparam__A" ; args = { } }
dk_sets.coll_isparam__A_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app0(dk_sets.species_instance__Setoid_c) ) end } }
dk_sets.isparam__Setoid_morphism__B_c = { cid = "sets.isparam__Setoid_morphism__B" ; args = { } }
dk_sets.isparam__Setoid_morphism__B_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Object_c) end } ; cpi_f = function (s_c) return app( app0(dk_cc.eT_c) , app0(dk_sets.species_instance__Setoid_c) ) end } }
dk_sets.coll_isparam__B_c = { cid = "sets.coll_isparam__B" ; args = { } }
dk_sets.coll_isparam__B_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app0(dk_sets.species_instance__Setoid_c) ) end } }
dk_sets.collmeth__morph_c = { cid = "sets.collmeth__morph" ; args = { } }
dk_sets.collmeth__morph_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_cc.eT_c) , app( app( app0(dk_cc.Arrow_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__A_c) , c_c ) ) ) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__B_c) , c_c ) ) ) ) end } }
dk_sets.collmeth__morph_substitution_rule_c = { cid = "sets.collmeth__morph_substitution_rule" ; args = { } }
dk_sets.collmeth__morph_substitution_rule_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Collection_c) end } ; cpi_f = function (c_c) return app( app0(dk_dk_logic.eP_c) , app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__A_c) , c_c ) ) ) , { clam_f = function (var__x_c) return app( app( app0(dk_dk_logic.forall_c) , app( app0(dk_dk_builtins.collmeth__rep_c) , app( app0(dk_sets.coll_isparam__A_c) , c_c ) ) ) , { clam_f = function (var__y_c) return app( app( app0(dk_dk_logic.imp_c) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , app( app0(dk_sets.coll_isparam__A_c) , c_c ) ) , var__x_c ) , var__y_c ) ) ) , app( app0(dk_dk_logic.ebP_c) , app( app( app( app0(dk_sets.collmeth__equal_c) , app( app0(dk_sets.coll_isparam__B_c) , c_c ) ) , app( app( app0(dk_sets.collmeth__morph_c) , c_c ) , var__x_c ) ) , app( app( app0(dk_sets.collmeth__morph_c) , c_c ) , var__y_c ) ) ) ) end } ) end } ) ) end } }
dk_sets.species_instance__Setoid_automorphism_c = { cid = "sets.species_instance__Setoid_automorphism" ; args = { } }
dk_sets.species_instance__Setoid_automorphism_t = { tbox_cty = { clazy = function() return app0(dk_cc.uT_c) end } }
dk_sets.species_instance__Setoid_automorphism_c = { cid="sets.species_instance__Setoid_automorphism" ; arity = 0 ; args = { } ; f = function() return app( app( app0(dk_cc.Pi_TTT_c) , app0(dk_sets.species_instance__Setoid_c) ) , { clam_f = function (isparam__Setoid_automorphism__A_c) return app0(dk_dk_builtins.collection_c) end } ) end }
dk_sets.isparam__Setoid_automorphism__A_c = { cid = "sets.isparam__Setoid_automorphism__A" ; args = { } }
dk_sets.isparam__Setoid_automorphism__A_t = { tbox_cty = { cpi_cty = { clazy = function() return app0(dk_dk_builtins.Object_c) end } ; cpi_f = function (s_c) return app( app0(dk_cc.eT_c) , app0(dk_sets.species_instance__Setoid_c) ) end } }
