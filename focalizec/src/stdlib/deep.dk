#NAME deep
#IMPORT cc
#IMPORT dk_logic
#IMPORT dk_list

method : cc.uT.
method_deps : m : cc.eT method -> cc.eT (dk_list.dlist method m).

method_type : m : cc.eT method -> cc.uT.

rep : cc.eT method.
[] method_deps rep --> dk_list.dnil method rep.
[] method_type rep --> cc.uuT.

eq : cc.eT method.
[] method_deps eq --> dk_list.dcons method eq (l : dk_list.dlist method eq => method) (dk_list.dnil method eq) rep.

partial_method_type : cc.eT method -> cc.uT := m : cc.eT method => cc.option (method_type m).
new_method : cc.uT -> cc.eT method.
[t : cc.uT] method_type (new_method t) --> t.

mlist : cc.uT := dk_list.list method.
mnil : cc.eT mlist := dk_list.nil method.
mcons : cc.eT method -> cc.eT mlist -> cc.eT mlist := dk_list.cons method. 

mdef : cc.uT := cc.dTuple method method_type.
mdfst : cc.eT mdef -> cc.eT method := cc.dfst method method_type.
mdsnd : md : cc.eT mdef -> cc.eT (method_type (mdfst md)) := cc.dsnd method method_type.
mdcpl : m : cc.eT method -> cc.eT (method_type m) -> cc.eT mdef := cc.dcpl method method_type. 
mmlist : cc.uT := dk_list.list mdef.

pmdef : cc.uT := cc.dTuple method partial_method_type.
pmdfst : cc.eT pmdef -> cc.eT method := cc.dfst method partial_method_type.
pmdcpl : m : cc.eT method -> cc.eT (partial_method_type m) -> cc.eT pmdef := cc.dcpl method partial_method_type.
pmdnone : cc.eT method -> cc.eT pmdef := m : cc.eT method => pmdcpl m (cc.None (method_type m)).
pmdsome : cc.eT mdef -> cc.eT pmdef := md : cc.eT mdef => pmdcpl (mdfst md) (cc.Some (method_type (mdfst md)) (mdsnd md)).
pmmlist : cc.uT := dk_list.list pmdef.
pmmnil : cc.eT pmmlist := dk_list.nil pmdef.
pmmcons : cc.eT pmdef -> cc.eT pmmlist -> cc.eT pmmlist := dk_list.cons pmdef.
pmmconsnone : cc.eT method -> cc.eT pmmlist -> cc.eT pmmlist := m : cc.eT method => pmmcons (pmdnone m).
pmmconssome : cc.eT mdef -> cc.eT pmmlist -> cc.eT pmmlist := md : cc.eT mdef => pmmcons (pmdsome md).
pmmconsdef : m : cc.eT method -> cc.eT (method_type m) -> cc.eT pmmlist -> cc.eT pmmlist :=
   m : cc.eT method => d : cc.eT (method_type m) => pmmconssome (mdcpl m d).

rep : cc.eT method := new_method cc.uuT.

object : cc.uT.
public_method : m : cc.eT method -> o : cc.eT object -> cc.eT (method_type m).

object_method_list : cc.eT object -> cc.eT mlist.
object_state : o : cc.eT object -> cc.eT (public_method rep o).


class : cc.uT.
class_method_list : cc.eT class -> cc.eT mlist.

instance : cc.eT mlist -> cc.uT.
instanciate : l : cc.eT mmlist ->
              cc.eT (instance (dk_list.map mdef method mdfst l)).
partial_instance : cc.eT mlist -> cc.uT.
partial_instanciate : l : cc.eT (dk_list.list pmdef) ->
                      cc.eT (partial_instance (dk_list.map pmdef method pmdfst l)).


new_class : l : cc.eT mlist -> cc.eT (partial_instance l) -> cc.eT class.
[l : cc.eT mlist, i : cc.eT (partial_instance l)] class_method_list (new_class l i) --> l.

new_abstract_class : cc.eT mlist -> cc.eT class :=
  l : cc.eT mlist =>
  new_class l
    (dk_logic.equal_ind mlist partial_instance (dk_list.map method method (x0 : cc.eT method => x0) l) l (dk_list.map_id method l)
      (partial_instanciate
        (dk_list.map method pmdef pmdnone l))).

protected_method : m : cc.eT method -> c : cc.eT class -> cc.eT (instance (class_method_list c)) -> cc.eT (method_type m).


eq : cc.eT method := new_method (cc.Pi_TTT cc.uuT (local_rep : cc.uT => cc.Arrow local_rep (cc.Arrow local_rep dk_bool.bool))).

diff : cc.eT method := new_method (cc.Pi_TTT cc.uuT (local_rep : cc.uT => cc.Arrow local_rep (cc.Arrow local_rep dk_bool.bool))).

refl : cc.eT method := new_method (
   cc.Pi_TTT cc.uuT
     (local_rep : cc.uT =>
       (cc.Pi_TTT (method_type eq)
         (local_eq : cc.eT (method_type eq) =>
           (dk_logic.eeP
             (dk_logic.forall local_rep (x : cc.eT local_rep =>
               (dk_logic.ebP
                 (local_eq local_rep x x))))))))).

setoid : cc.eT class := new_abstract_class
       (mcons rep
       (mcons eq
       (mcons diff
       (mcons refl
       mnil)))).

bool_setoid : cc.eT class := new_class
       (mcons rep
       (mcons eq
       (mcons diff
       (mcons refl
       mnil))))
       (partial_instanciate
         (pmmconsdef rep dk_bool.bool
         (pmmconsnone eq
         (pmmconsnone diff
         (pmmconsnone refl
         pmmnil))))).

