#NAME dk_nat.

(; nat, 0, and S are keywords in Sukerujo ;)

def Bool : Type := dk_bool.Bool.
Nat : Type.
[] cc.eT nat --> Nat.

def call_by_value_nat : R : cc.uT -> (Nat -> cc.eT R) -> Nat -> cc.eT R.
[f]   call_by_value_nat _ f 0 --> f 0
[f,n] call_by_value_nat _ f (S n) --> f (S n).

(; Order ;)
def lt : Nat -> Nat -> Bool.
[] lt 0 (S _) --> dk_bool.true
[] lt _ 0 --> dk_bool.false
[n,m] lt (S n) (S m) --> lt n m.

def gt : Nat -> Nat -> Bool.
[n,m] gt n m --> lt m n.

def leq : Nat -> Nat -> Bool.
[] leq 0 _ --> dk_bool.true
[] leq (S _) 0 --> dk_bool.false
[n,m] leq (S n) (S m) --> leq n m.

def geq : Nat -> Nat -> Bool.
[n,m] geq n m --> leq m n.

(; Equality ;)
def eq : Nat -> Nat -> Bool.
[n,m] eq n m --> dk_bool.and (leq n m) (geq n m).
(; Alternative_definition ;)
(; [] eq 0 0 --> dk_bool.true ;)
(; [] eq 0 (S _) --> dk_bool.false ;)
(; [] eq (S _) 0 --> dk_bool.false ;)
(; [n,m] eq (S n) (S m) --> eq n m. ;)

(; Operations ;)

(; Addition ;)
(; This definition of plus is compatible with dependant list concatenation... ;)
def plus : Nat -> Nat -> Nat.
[m] plus 0 m --> m
[n,m] plus (S n) m --> S (plus n m)
(; ...but we also need the symmetric rules for confluence of dk_int.leq ;)
[n] plus n 0 --> n
[n,m] plus n (S m) --> S (plus n m).

(; Product ;)
def mult : Nat -> Nat -> Nat.
[] mult 0 _ --> 0
[n,m] mult (S n) m --> plus (mult n m) m.

(; Min and Max ;)
def max : Nat -> Nat -> Nat.
[m,n] max m n --> dk_bool.ite nat (leq m n) n m.

def min : Nat -> Nat -> Nat.
[m,n] min m n --> dk_bool.ite nat (leq m n) m n.

(; Euclidian division ;)
(; invariants : n + r mod m, r < m ;)
def mod_aux : Nat -> Nat -> Nat -> Nat.
[r] mod_aux 0 _ r --> r
[n,m,r]
    mod_aux (S n) m r
      -->
    mod_aux n m (dk_bool.ite nat (lt (S r) m) (S r) 0).

def mod : Nat -> Nat -> Nat.
[n,m] mod n m --> mod_aux n m 0.

def quo_aux : Nat -> Nat -> Nat -> Nat.
[] quo_aux 0 _ _ --> 0
[n,m,r]
    quo_aux (S n) m r
      -->
    dk_bool.ite nat (lt (S r) m) (quo_aux n m (S r)) (S (quo_aux n m 0)).

def quo : Nat -> Nat -> Nat.
[n,m] quo n m --> quo_aux n m 0.

(; exponentiation ;)
def pow : Nat -> Nat -> Nat.
[] pow _ 0 --> S 0
[n,k] pow n (S k) --> mult n (pow n k).

(; Decimal representation ;)
Digit : cc.uT.
_0 : cc.eT Digit.
_1 : cc.eT Digit.
_2 : cc.eT Digit.
_3 : cc.eT Digit.
_4 : cc.eT Digit.
_5 : cc.eT Digit.
_6 : cc.eT Digit.
_7 : cc.eT Digit.
_8 : cc.eT Digit.
_9 : cc.eT Digit.

def digit_to_nat : cc.eT Digit -> Nat.
[] digit_to_nat _0 --> 0
[] digit_to_nat _1 --> 1
[] digit_to_nat _2 --> 2
[] digit_to_nat _3 --> 3
[] digit_to_nat _4 --> 4
[] digit_to_nat _5 --> 5
[] digit_to_nat _6 --> 6
[] digit_to_nat _7 --> 7
[] digit_to_nat _8 --> 8
[] digit_to_nat _9 --> 9.

(; Conversion from a list of digits (weakest digit at head) to_nat a nat ;)
def Diglist := cc.eT (list Digit).
def list_to_nat : Diglist -> Nat.
[ ] list_to_nat (nil Digit) --> 0
[d,l]
    list_to_nat (cons Digit d l)
      -->
    plus (digit_to_nat d) (mult 10 (list_to_nat l)).

(; Notation with weakest digit on the right side ;)
def dnil : Diglist := nil Digit.
def dcons : Diglist -> cc.eT Digit -> Diglist
      := l : Diglist => d : cc.eT Digit => cons Digit d l.

def nat_to_digit : Nat -> cc.eT Digit.
[] nat_to_digit 0 --> _0
[] nat_to_digit (S 0) --> _1
[] nat_to_digit (S (S 0)) --> _2
[] nat_to_digit (S (S (S 0))) --> _3
[] nat_to_digit (S (S (S (S 0)))) --> _4
[] nat_to_digit (S (S (S (S (S 0))))) --> _5
[] nat_to_digit (S (S (S (S (S (S 0)))))) --> _6
[] nat_to_digit (S (S (S (S (S (S (S 0))))))) --> _7
[] nat_to_digit (S (S (S (S (S (S (S (S 0)))))))) --> _8
[] nat_to_digit (S (S (S (S (S (S (S (S (S 0))))))))) --> _9.

def nat_to_list_aux : Nat -> Diglist.
[] nat_to_list_aux 0 --> nil Digit
[n]
    nat_to_list_aux (S n)
      -->
    cons Digit
      (nat_to_digit (mod (S n) 10))
      (nat_to_list_aux (quo (S n) 10)).

def nat_to_list : Nat -> Diglist.
[] nat_to_list 0 --> cons Digit _0 (nil Digit)
[n] nat_to_list (S n) --> nat_to_list_aux (S n).
