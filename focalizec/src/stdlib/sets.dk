#NAME sets
(; Generated by focalizec ;)
#IMPORT dk_builtins

#IMPORT basics
(; Species Setoid ;)
  (; Definition of the species' instance type ;)
  species_instance__Setoid : cc.uT.
  [  ] species_instance__Setoid --> dk_builtins.collection.
  (; Declaration of Parameters ;)
  
  (; Declaration of methods ;)
  methtype__Setoid__different : cc.uT.
  [  ] methtype__Setoid__different -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (equal :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Arrow rep (cc.Arrow rep basics.bool))))).
  (; method different ;)
  meth__Setoid__different : cc.eT (methtype__Setoid__different).
  methtype__Setoid__same_is_not_different : cc.uT.
  [  ] methtype__Setoid__same_is_not_different -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (equal :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Pi_TTT
                   (cc.Pi_TTT
                       cc.uuT
                       (rep : (cc.eT cc.uuT) =>
                        (cc.Pi_TTT
                            (cc.Pi_TTT
                                cc.uuT
                                (rep : (cc.eT cc.uuT) =>
                                 (cc.Arrow rep (cc.Arrow rep basics.bool))))
                            (equal :
                                (cc.eT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))) =>
                             (cc.Arrow rep (cc.Arrow rep basics.bool))))))
                   (different :
                       (cc.eT
                           (cc.Pi_TTT
                               cc.uuT
                               (rep : (cc.eT cc.uuT) =>
                                (cc.Pi_TTT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))
                                    (equal :
                                        (cc.eT
                                            (cc.Pi_TTT
                                                cc.uuT
                                                (rep : (cc.eT cc.uuT) =>
                                                 (cc.Arrow
                                                     rep
                                                     (cc.Arrow
                                                         rep
                                                         basics.bool))))) =>
                                     (cc.Arrow rep (cc.Arrow rep basics.bool))))))) =>
                    (dk_logic.eeP
                        (dk_logic.forall
                            rep
                            (var__x : (cc.eT rep) =>
                             (dk_logic.forall
                                 rep
                                 (var__y : (cc.eT rep) =>
                                  (dk_logic.eqv
                                      (dk_logic.ebP
                                          (different rep equal var__x var__y))
                                      (dk_logic.not
                                          (dk_logic.ebP
                                              (equal rep var__x var__y)))))))))))))).
  (; method same_is_not_different ;)
  meth__Setoid__same_is_not_different :
    cc.eT (methtype__Setoid__same_is_not_different).
  methtype__Setoid__different_is_complete : cc.uT.
  [  ] methtype__Setoid__different_is_complete -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (equal :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Pi_TTT
                   (cc.Pi_TTT
                       cc.uuT
                       (rep : (cc.eT cc.uuT) =>
                        (cc.Pi_TTT
                            (cc.Pi_TTT
                                cc.uuT
                                (rep : (cc.eT cc.uuT) =>
                                 (cc.Arrow rep (cc.Arrow rep basics.bool))))
                            (equal :
                                (cc.eT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))) =>
                             (cc.Arrow rep (cc.Arrow rep basics.bool))))))
                   (different :
                       (cc.eT
                           (cc.Pi_TTT
                               cc.uuT
                               (rep : (cc.eT cc.uuT) =>
                                (cc.Pi_TTT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))
                                    (equal :
                                        (cc.eT
                                            (cc.Pi_TTT
                                                cc.uuT
                                                (rep : (cc.eT cc.uuT) =>
                                                 (cc.Arrow
                                                     rep
                                                     (cc.Arrow
                                                         rep
                                                         basics.bool))))) =>
                                     (cc.Arrow rep (cc.Arrow rep basics.bool))))))) =>
                    (dk_logic.eeP
                        (dk_logic.forall
                            rep
                            (var__x : (cc.eT rep) =>
                             (dk_logic.forall
                                 rep
                                 (var__y : (cc.eT rep) =>
                                  (dk_logic.forall
                                      rep
                                      (var__z : (cc.eT rep) =>
                                       (dk_logic.imp
                                           (dk_logic.ebP
                                               (different
                                                   rep
                                                   equal
                                                   var__x
                                                   var__y))
                                           (dk_logic.or
                                               (dk_logic.ebP
                                                   (different
                                                       rep
                                                       equal
                                                       var__x
                                                       var__z))
                                               (dk_logic.ebP
                                                   (different
                                                       rep
                                                       equal
                                                       var__y
                                                       var__z)))))))))))))))).
  (; method different_is_complete ;)
  meth__Setoid__different_is_complete :
    cc.eT (methtype__Setoid__different_is_complete).
  methtype__Setoid__different_is_irreflexive : cc.uT.
  [  ] methtype__Setoid__different_is_irreflexive -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (equal :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Pi_TTT
                   (cc.Pi_TTT
                       cc.uuT
                       (rep : (cc.eT cc.uuT) =>
                        (cc.Pi_TTT
                            (cc.Pi_TTT
                                cc.uuT
                                (rep : (cc.eT cc.uuT) =>
                                 (cc.Arrow rep (cc.Arrow rep basics.bool))))
                            (equal :
                                (cc.eT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))) =>
                             (cc.Arrow rep (cc.Arrow rep basics.bool))))))
                   (different :
                       (cc.eT
                           (cc.Pi_TTT
                               cc.uuT
                               (rep : (cc.eT cc.uuT) =>
                                (cc.Pi_TTT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))
                                    (equal :
                                        (cc.eT
                                            (cc.Pi_TTT
                                                cc.uuT
                                                (rep : (cc.eT cc.uuT) =>
                                                 (cc.Arrow
                                                     rep
                                                     (cc.Arrow
                                                         rep
                                                         basics.bool))))) =>
                                     (cc.Arrow rep (cc.Arrow rep basics.bool))))))) =>
                    (dk_logic.eeP
                        (dk_logic.forall
                            rep
                            (var__x : (cc.eT rep) =>
                             (dk_logic.not
                                 (dk_logic.ebP
                                     (different rep equal var__x var__x))))))))))).
  (; method different_is_irreflexive ;)
  meth__Setoid__different_is_irreflexive :
    cc.eT (methtype__Setoid__different_is_irreflexive).
  methtype__Setoid__different_is_symmetric : cc.uT.
  [  ] methtype__Setoid__different_is_symmetric -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (equal :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Pi_TTT
                   (cc.Pi_TTT
                       cc.uuT
                       (rep : (cc.eT cc.uuT) =>
                        (cc.Pi_TTT
                            (cc.Pi_TTT
                                cc.uuT
                                (rep : (cc.eT cc.uuT) =>
                                 (cc.Arrow rep (cc.Arrow rep basics.bool))))
                            (equal :
                                (cc.eT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))) =>
                             (cc.Arrow rep (cc.Arrow rep basics.bool))))))
                   (different :
                       (cc.eT
                           (cc.Pi_TTT
                               cc.uuT
                               (rep : (cc.eT cc.uuT) =>
                                (cc.Pi_TTT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))
                                    (equal :
                                        (cc.eT
                                            (cc.Pi_TTT
                                                cc.uuT
                                                (rep : (cc.eT cc.uuT) =>
                                                 (cc.Arrow
                                                     rep
                                                     (cc.Arrow
                                                         rep
                                                         basics.bool))))) =>
                                     (cc.Arrow rep (cc.Arrow rep basics.bool))))))) =>
                    (dk_logic.eeP
                        (dk_logic.forall
                            rep
                            (var__x : (cc.eT rep) =>
                             (dk_logic.forall
                                 rep
                                 (var__y : (cc.eT rep) =>
                                  (dk_logic.imp
                                      (dk_logic.ebP
                                          (different rep equal var__x var__y))
                                      (dk_logic.ebP
                                          (different rep equal var__y var__x))))))))))))).
  (; method different_is_symmetric ;)
  meth__Setoid__different_is_symmetric :
    cc.eT (methtype__Setoid__different_is_symmetric).
  
  collmeth__rep : c : dk_builtins.Collection -> cc.uT.
  collmeth__element :
    c : dk_builtins.Collection -> (cc.eT (dk_builtins.collmeth__rep c)).
  collmeth__equal :
    c : dk_builtins.Collection ->
    (cc.eT
        (cc.Arrow
            (dk_builtins.collmeth__rep c)
            (cc.Arrow (dk_builtins.collmeth__rep c) basics.bool))).
  collmeth__different :
    c : dk_builtins.Collection ->
    (cc.eT
        (cc.Arrow
            (dk_builtins.collmeth__rep c)
            (cc.Arrow (dk_builtins.collmeth__rep c) basics.bool))).
  collmeth__equal_reflexive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.ebP (collmeth__equal c var__x var__x))))).
  collmeth__equal_symmetric :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.imp
                      (dk_logic.ebP (collmeth__equal c var__x var__y))
                      (dk_logic.ebP (collmeth__equal c var__y var__x)))))))).
  collmeth__equal_transitive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.forall
                      (dk_builtins.collmeth__rep c)
                      (var__z : (cc.eT (dk_builtins.collmeth__rep c)) =>
                       (dk_logic.imp
                           (dk_logic.ebP (collmeth__equal c var__x var__y))
                           (dk_logic.imp
                               (dk_logic.ebP
                                   (collmeth__equal c var__y var__z))
                               (dk_logic.ebP
                                   (collmeth__equal c var__x var__z))))))))))).
  collmeth__parse :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow basics.string (dk_builtins.collmeth__rep c))).
  collmeth__print :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow (dk_builtins.collmeth__rep c) basics.string)).
  collmeth__same_is_not_different :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.eqv
                      (dk_logic.ebP (collmeth__different c var__x var__y))
                      (dk_logic.not
                          (dk_logic.ebP (collmeth__equal c var__x var__y))))))))).
  collmeth__different_is_complete :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.forall
                      (dk_builtins.collmeth__rep c)
                      (var__z : (cc.eT (dk_builtins.collmeth__rep c)) =>
                       (dk_logic.imp
                           (dk_logic.ebP
                               (collmeth__different c var__x var__y))
                           (dk_logic.or
                               (dk_logic.ebP
                                   (collmeth__different c var__x var__z))
                               (dk_logic.ebP
                                   (collmeth__different c var__y var__z))))))))))).
  collmeth__different_is_irreflexive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.not
                 (dk_logic.ebP (collmeth__different c var__x var__x)))))).
  collmeth__different_is_symmetric :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.imp
                      (dk_logic.ebP (collmeth__different c var__x var__y))
                      (dk_logic.ebP (collmeth__different c var__y var__x)))))))).
  
  (; Definitions of methods ;)
  
  
  
  
  
  
  
  
  
  
  
  
  
  
(; Species Anti_setoid ;)
  (; Definition of the species' instance type ;)
  species_instance__Anti_setoid : cc.uT.
  [  ] species_instance__Anti_setoid --> dk_builtins.collection.
  (; Declaration of Parameters ;)
  
  (; Declaration of methods ;)
  methtype__Anti_setoid__equal : cc.uT.
  [  ] methtype__Anti_setoid__equal -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (different :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Arrow rep (cc.Arrow rep basics.bool))))).
  (; method equal ;)
  meth__Anti_setoid__equal : cc.eT (methtype__Anti_setoid__equal).
  methtype__Anti_setoid__different_is_not_same : cc.uT.
  [  ] methtype__Anti_setoid__different_is_not_same -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (different :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Pi_TTT
                   (cc.Pi_TTT
                       cc.uuT
                       (rep : (cc.eT cc.uuT) =>
                        (cc.Pi_TTT
                            (cc.Pi_TTT
                                cc.uuT
                                (rep : (cc.eT cc.uuT) =>
                                 (cc.Arrow rep (cc.Arrow rep basics.bool))))
                            (different :
                                (cc.eT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))) =>
                             (cc.Arrow rep (cc.Arrow rep basics.bool))))))
                   (equal :
                       (cc.eT
                           (cc.Pi_TTT
                               cc.uuT
                               (rep : (cc.eT cc.uuT) =>
                                (cc.Pi_TTT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))
                                    (different :
                                        (cc.eT
                                            (cc.Pi_TTT
                                                cc.uuT
                                                (rep : (cc.eT cc.uuT) =>
                                                 (cc.Arrow
                                                     rep
                                                     (cc.Arrow
                                                         rep
                                                         basics.bool))))) =>
                                     (cc.Arrow rep (cc.Arrow rep basics.bool))))))) =>
                    (dk_logic.eeP
                        (dk_logic.forall
                            rep
                            (var__x : (cc.eT rep) =>
                             (dk_logic.forall
                                 rep
                                 (var__y : (cc.eT rep) =>
                                  (dk_logic.eqv
                                      (dk_logic.ebP
                                          (equal rep different var__x var__y))
                                      (dk_logic.not
                                          (dk_logic.ebP
                                              (different rep var__x var__y)))))))))))))).
  (; method different_is_not_same ;)
  meth__Anti_setoid__different_is_not_same :
    cc.eT (methtype__Anti_setoid__different_is_not_same).
  methtype__Anti_setoid__equal_reflexive : cc.uT.
  [  ] methtype__Anti_setoid__equal_reflexive -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (different :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Pi_TTT
                   (cc.Pi_TTT
                       cc.uuT
                       (rep : (cc.eT cc.uuT) =>
                        (cc.Pi_TTT
                            (cc.Pi_TTT
                                cc.uuT
                                (rep : (cc.eT cc.uuT) =>
                                 (cc.Arrow rep (cc.Arrow rep basics.bool))))
                            (different :
                                (cc.eT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))) =>
                             (cc.Arrow rep (cc.Arrow rep basics.bool))))))
                   (equal :
                       (cc.eT
                           (cc.Pi_TTT
                               cc.uuT
                               (rep : (cc.eT cc.uuT) =>
                                (cc.Pi_TTT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))
                                    (different :
                                        (cc.eT
                                            (cc.Pi_TTT
                                                cc.uuT
                                                (rep : (cc.eT cc.uuT) =>
                                                 (cc.Arrow
                                                     rep
                                                     (cc.Arrow
                                                         rep
                                                         basics.bool))))) =>
                                     (cc.Arrow rep (cc.Arrow rep basics.bool))))))) =>
                    (dk_logic.eeP
                        (dk_logic.forall
                            rep
                            (var__x : (cc.eT rep) =>
                             (dk_logic.ebP
                                 (equal rep different var__x var__x)))))))))).
  (; method equal_reflexive ;)
  meth__Anti_setoid__equal_reflexive :
    cc.eT (methtype__Anti_setoid__equal_reflexive).
  methtype__Anti_setoid__equal_symmetric : cc.uT.
  [  ] methtype__Anti_setoid__equal_symmetric -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (different :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Pi_TTT
                   (cc.Pi_TTT
                       cc.uuT
                       (rep : (cc.eT cc.uuT) =>
                        (cc.Pi_TTT
                            (cc.Pi_TTT
                                cc.uuT
                                (rep : (cc.eT cc.uuT) =>
                                 (cc.Arrow rep (cc.Arrow rep basics.bool))))
                            (different :
                                (cc.eT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))) =>
                             (cc.Arrow rep (cc.Arrow rep basics.bool))))))
                   (equal :
                       (cc.eT
                           (cc.Pi_TTT
                               cc.uuT
                               (rep : (cc.eT cc.uuT) =>
                                (cc.Pi_TTT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))
                                    (different :
                                        (cc.eT
                                            (cc.Pi_TTT
                                                cc.uuT
                                                (rep : (cc.eT cc.uuT) =>
                                                 (cc.Arrow
                                                     rep
                                                     (cc.Arrow
                                                         rep
                                                         basics.bool))))) =>
                                     (cc.Arrow rep (cc.Arrow rep basics.bool))))))) =>
                    (dk_logic.eeP
                        (dk_logic.forall
                            rep
                            (var__x : (cc.eT rep) =>
                             (dk_logic.forall
                                 rep
                                 (var__y : (cc.eT rep) =>
                                  (dk_logic.imp
                                      (dk_logic.ebP
                                          (equal rep different var__x var__y))
                                      (dk_logic.ebP
                                          (equal rep different var__y var__x))))))))))))).
  (; method equal_symmetric ;)
  meth__Anti_setoid__equal_symmetric :
    cc.eT (methtype__Anti_setoid__equal_symmetric).
  methtype__Anti_setoid__equal_transitive : cc.uT.
  [  ] methtype__Anti_setoid__equal_transitive -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  cc.uuT
                  (rep : (cc.eT cc.uuT) =>
                   (cc.Arrow rep (cc.Arrow rep basics.bool))))
              (different :
                  (cc.eT
                      (cc.Pi_TTT
                          cc.uuT
                          (rep : (cc.eT cc.uuT) =>
                           (cc.Arrow rep (cc.Arrow rep basics.bool))))) =>
               (cc.Pi_TTT
                   (cc.Pi_TTT
                       cc.uuT
                       (rep : (cc.eT cc.uuT) =>
                        (cc.Pi_TTT
                            (cc.Pi_TTT
                                cc.uuT
                                (rep : (cc.eT cc.uuT) =>
                                 (cc.Arrow rep (cc.Arrow rep basics.bool))))
                            (different :
                                (cc.eT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))) =>
                             (cc.Arrow rep (cc.Arrow rep basics.bool))))))
                   (equal :
                       (cc.eT
                           (cc.Pi_TTT
                               cc.uuT
                               (rep : (cc.eT cc.uuT) =>
                                (cc.Pi_TTT
                                    (cc.Pi_TTT
                                        cc.uuT
                                        (rep : (cc.eT cc.uuT) =>
                                         (cc.Arrow
                                             rep
                                             (cc.Arrow rep basics.bool))))
                                    (different :
                                        (cc.eT
                                            (cc.Pi_TTT
                                                cc.uuT
                                                (rep : (cc.eT cc.uuT) =>
                                                 (cc.Arrow
                                                     rep
                                                     (cc.Arrow
                                                         rep
                                                         basics.bool))))) =>
                                     (cc.Arrow rep (cc.Arrow rep basics.bool))))))) =>
                    (dk_logic.eeP
                        (dk_logic.forall
                            rep
                            (var__x : (cc.eT rep) =>
                             (dk_logic.forall
                                 rep
                                 (var__y : (cc.eT rep) =>
                                  (dk_logic.forall
                                      rep
                                      (var__z : (cc.eT rep) =>
                                       (dk_logic.imp
                                           (dk_logic.ebP
                                               (equal
                                                   rep
                                                   different
                                                   var__x
                                                   var__y))
                                           (dk_logic.imp
                                               (dk_logic.ebP
                                                   (equal
                                                       rep
                                                       different
                                                       var__y
                                                       var__z))
                                               (dk_logic.ebP
                                                   (equal
                                                       rep
                                                       different
                                                       var__x
                                                       var__z)))))))))))))))).
  (; method equal_transitive ;)
  meth__Anti_setoid__equal_transitive :
    cc.eT (methtype__Anti_setoid__equal_transitive).
  
  collmeth__rep : c : dk_builtins.Collection -> cc.uT.
  collmeth__different :
    c : dk_builtins.Collection ->
    (cc.eT
        (cc.Arrow
            (dk_builtins.collmeth__rep c)
            (cc.Arrow (dk_builtins.collmeth__rep c) basics.bool))).
  collmeth__element :
    c : dk_builtins.Collection -> (cc.eT (dk_builtins.collmeth__rep c)).
  collmeth__different_is_complete :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.forall
                      (dk_builtins.collmeth__rep c)
                      (var__z : (cc.eT (dk_builtins.collmeth__rep c)) =>
                       (dk_logic.imp
                           (dk_logic.ebP
                               (collmeth__different c var__x var__y))
                           (dk_logic.or
                               (dk_logic.ebP
                                   (collmeth__different c var__x var__z))
                               (dk_logic.ebP
                                   (collmeth__different c var__y var__z))))))))))).
  collmeth__different_is_irreflexive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.not
                 (dk_logic.ebP (collmeth__different c var__x var__x)))))).
  collmeth__different_is_symmetric :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.imp
                      (dk_logic.ebP (collmeth__different c var__x var__y))
                      (dk_logic.ebP (collmeth__different c var__y var__x)))))))).
  collmeth__equal :
    c : dk_builtins.Collection ->
    (cc.eT
        (cc.Arrow
            (dk_builtins.collmeth__rep c)
            (cc.Arrow (dk_builtins.collmeth__rep c) basics.bool))).
  collmeth__parse :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow basics.string (dk_builtins.collmeth__rep c))).
  collmeth__print :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow (dk_builtins.collmeth__rep c) basics.string)).
  collmeth__different_is_not_same :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.eqv
                      (dk_logic.ebP (collmeth__equal c var__x var__y))
                      (dk_logic.not
                          (dk_logic.ebP (collmeth__different c var__x var__y))))))))).
  collmeth__equal_reflexive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.ebP (collmeth__equal c var__x var__x))))).
  collmeth__equal_symmetric :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.imp
                      (dk_logic.ebP (collmeth__equal c var__x var__y))
                      (dk_logic.ebP (collmeth__equal c var__y var__x)))))))).
  collmeth__equal_transitive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.forall
                      (dk_builtins.collmeth__rep c)
                      (var__z : (cc.eT (dk_builtins.collmeth__rep c)) =>
                       (dk_logic.imp
                           (dk_logic.ebP (collmeth__equal c var__x var__y))
                           (dk_logic.imp
                               (dk_logic.ebP
                                   (collmeth__equal c var__y var__z))
                               (dk_logic.ebP
                                   (collmeth__equal c var__x var__z))))))))))).
  
  (; Definitions of methods ;)
  
  
  
  
  
  
  
  
  
  
  
  
  
  
ifailed :
  type_var__a : cc.uT ->
  (cc.eT (cc.Arrow basics.string (cc.Arrow type_var__a type_var__a))).
(; Species Partial_set ;)
  (; Definition of the species' instance type ;)
  species_instance__Partial_set : cc.uT.
  [  ] species_instance__Partial_set --> dk_builtins.collection.
  (; Declaration of Parameters ;)
  
  (; Declaration of methods ;)
  methtype__Partial_set__failed : cc.uT.
  [  ] methtype__Partial_set__failed -->
      cc.Pi_TTT
         cc.uuT
         (rep : (cc.eT cc.uuT) =>
          (cc.Pi_TTT
              (cc.Pi_TTT cc.uuT (rep : (cc.eT cc.uuT) => rep))
              (element :
                  (cc.eT (cc.Pi_TTT cc.uuT (rep : (cc.eT cc.uuT) => rep))) =>
               (cc.Arrow basics.string rep)))).
  (; method failed ;)
  meth__Partial_set__failed : cc.eT (methtype__Partial_set__failed).
  
  collmeth__rep : c : dk_builtins.Collection -> cc.uT.
  collmeth__element :
    c : dk_builtins.Collection -> (cc.eT (dk_builtins.collmeth__rep c)).
  collmeth__equal :
    c : dk_builtins.Collection ->
    (cc.eT
        (cc.Arrow
            (dk_builtins.collmeth__rep c)
            (cc.Arrow (dk_builtins.collmeth__rep c) basics.bool))).
  collmeth__different :
    c : dk_builtins.Collection ->
    (cc.eT
        (cc.Arrow
            (dk_builtins.collmeth__rep c)
            (cc.Arrow (dk_builtins.collmeth__rep c) basics.bool))).
  collmeth__equal_reflexive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.ebP (collmeth__equal c var__x var__x))))).
  collmeth__equal_symmetric :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.imp
                      (dk_logic.ebP (collmeth__equal c var__x var__y))
                      (dk_logic.ebP (collmeth__equal c var__y var__x)))))))).
  collmeth__equal_transitive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.forall
                      (dk_builtins.collmeth__rep c)
                      (var__z : (cc.eT (dk_builtins.collmeth__rep c)) =>
                       (dk_logic.imp
                           (dk_logic.ebP (collmeth__equal c var__x var__y))
                           (dk_logic.imp
                               (dk_logic.ebP
                                   (collmeth__equal c var__y var__z))
                               (dk_logic.ebP
                                   (collmeth__equal c var__x var__z))))))))))).
  collmeth__failed :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow basics.string (dk_builtins.collmeth__rep c))).
  collmeth__parse :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow basics.string (dk_builtins.collmeth__rep c))).
  collmeth__print :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow (dk_builtins.collmeth__rep c) basics.string)).
  collmeth__same_is_not_different :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.eqv
                      (dk_logic.ebP (collmeth__different c var__x var__y))
                      (dk_logic.not
                          (dk_logic.ebP (collmeth__equal c var__x var__y))))))))).
  collmeth__different_is_complete :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.forall
                      (dk_builtins.collmeth__rep c)
                      (var__z : (cc.eT (dk_builtins.collmeth__rep c)) =>
                       (dk_logic.imp
                           (dk_logic.ebP
                               (collmeth__different c var__x var__y))
                           (dk_logic.or
                               (dk_logic.ebP
                                   (collmeth__different c var__x var__z))
                               (dk_logic.ebP
                                   (collmeth__different c var__y var__z))))))))))).
  collmeth__different_is_irreflexive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.not
                 (dk_logic.ebP (collmeth__different c var__x var__x)))))).
  collmeth__different_is_symmetric :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep c)
            (var__x : (cc.eT (dk_builtins.collmeth__rep c)) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep c)
                 (var__y : (cc.eT (dk_builtins.collmeth__rep c)) =>
                  (dk_logic.imp
                      (dk_logic.ebP (collmeth__different c var__x var__y))
                      (dk_logic.ebP (collmeth__different c var__y var__x)))))))).
  
  (; Definitions of methods ;)
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
(; Species Equivalence_relation ;)
  (; Definition of the species' instance type ;)
  species_instance__Equivalence_relation : cc.uT.
  [  ] species_instance__Equivalence_relation -->
      cc.Pi_TTT
         sets.species_instance__Setoid
         (isparam__Equivalence_relation__S :
             (cc.eT sets.species_instance__Setoid) =>
          dk_builtins.collection).
  (; Declaration of Parameters ;)
  isparam__Equivalence_relation__S :
    s : dk_builtins.Object -> (cc.eT sets.species_instance__Setoid).
  coll_isparam__S :
    c : dk_builtins.Collection -> (cc.eT sets.species_instance__Setoid).
  
  (; Declaration of methods ;)
  methtype__Equivalence_relation__equiv_reflexive : cc.uT.
  [  ] methtype__Equivalence_relation__equiv_reflexive -->
      cc.Pi_TTT
         sets.species_instance__Setoid
         (S : (cc.eT sets.species_instance__Setoid) =>
          (cc.Pi_TTT
              (cc.Pi_TTT
                  sets.species_instance__Setoid
                  (S : (cc.eT sets.species_instance__Setoid) =>
                   (cc.Arrow
                       (dk_builtins.collmeth__rep S)
                       (cc.Arrow
                           (dk_builtins.collmeth__rep S)
                           dk_builtins.prop))))
              (equiv :
                  (cc.eT
                      (cc.Pi_TTT
                          sets.species_instance__Setoid
                          (S : (cc.eT sets.species_instance__Setoid) =>
                           (cc.Arrow
                               (dk_builtins.collmeth__rep S)
                               (cc.Arrow
                                   (dk_builtins.collmeth__rep S)
                                   dk_builtins.prop))))) =>
               (dk_logic.eeP
                   (dk_logic.forall
                       (dk_builtins.collmeth__rep S)
                       (var__x : (cc.eT (dk_builtins.collmeth__rep S)) =>
                        (equiv S var__x var__x))))))).
  (; method equiv_reflexive ;)
  meth__Equivalence_relation__equiv_reflexive :
    cc.eT (methtype__Equivalence_relation__equiv_reflexive).
  
  collmeth__rep : c : dk_builtins.Collection -> cc.uT.
  collmeth__equiv :
    c : dk_builtins.Collection ->
    (cc.eT
        (cc.Arrow
            (dk_builtins.collmeth__rep (coll_isparam__S c))
            (cc.Arrow
                (dk_builtins.collmeth__rep (coll_isparam__S c))
                dk_builtins.prop))).
  collmeth__equal_refines_equiv :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep (coll_isparam__S c))
            (var__x : (cc.eT (dk_builtins.collmeth__rep (coll_isparam__S c))) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep (coll_isparam__S c))
                 (var__y :
                     (cc.eT (dk_builtins.collmeth__rep (coll_isparam__S c))) =>
                  (dk_logic.imp
                      (dk_logic.ebP
                          (sets.collmeth__equal
                              (coll_isparam__S c)
                              var__x
                              var__y))
                      (collmeth__equiv c var__x var__y))))))).
  collmeth__equiv_symmetric :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep (coll_isparam__S c))
            (var__x : (cc.eT (dk_builtins.collmeth__rep (coll_isparam__S c))) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep (coll_isparam__S c))
                 (var__y :
                     (cc.eT (dk_builtins.collmeth__rep (coll_isparam__S c))) =>
                  (dk_logic.imp
                      (collmeth__equiv c var__x var__y)
                      (collmeth__equiv c var__y var__x))))))).
  collmeth__equiv_transitive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep (coll_isparam__S c))
            (var__x : (cc.eT (dk_builtins.collmeth__rep (coll_isparam__S c))) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep (coll_isparam__S c))
                 (var__y :
                     (cc.eT (dk_builtins.collmeth__rep (coll_isparam__S c))) =>
                  (dk_logic.forall
                      (dk_builtins.collmeth__rep (coll_isparam__S c))
                      (var__z :
                          (cc.eT
                              (dk_builtins.collmeth__rep (coll_isparam__S c))) =>
                       (dk_logic.imp
                           (collmeth__equiv c var__x var__y)
                           (dk_logic.imp
                               (collmeth__equiv c var__y var__z)
                               (collmeth__equiv c var__x var__z)))))))))).
  collmeth__parse :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow basics.string (dk_builtins.collmeth__rep c))).
  collmeth__print :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow (dk_builtins.collmeth__rep c) basics.string)).
  collmeth__equiv_reflexive :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep (coll_isparam__S c))
            (var__x : (cc.eT (dk_builtins.collmeth__rep (coll_isparam__S c))) =>
             (collmeth__equiv c var__x var__x)))).
  
  (; Definitions of methods ;)
  
  
  
  
  
  
  
  
  
  
(; Species Setoid_morphism ;)
  (; Definition of the species' instance type ;)
  species_instance__Setoid_morphism : cc.uT.
  [  ] species_instance__Setoid_morphism -->
      cc.Pi_TTT
         sets.species_instance__Setoid
         (isparam__Setoid_morphism__A : (cc.eT sets.species_instance__Setoid) =>
          (cc.Pi_TTT
              sets.species_instance__Setoid
              (isparam__Setoid_morphism__B :
                  (cc.eT sets.species_instance__Setoid) =>
               dk_builtins.collection))).
  (; Declaration of Parameters ;)
  isparam__Setoid_morphism__A :
    s : dk_builtins.Object -> (cc.eT sets.species_instance__Setoid).
  coll_isparam__A :
    c : dk_builtins.Collection -> (cc.eT sets.species_instance__Setoid).
  isparam__Setoid_morphism__B :
    s : dk_builtins.Object -> (cc.eT sets.species_instance__Setoid).
  coll_isparam__B :
    c : dk_builtins.Collection -> (cc.eT sets.species_instance__Setoid).
  
  (; Declaration of methods ;)
  
  collmeth__rep : c : dk_builtins.Collection -> cc.uT.
  collmeth__morph :
    c : dk_builtins.Collection ->
    (cc.eT
        (cc.Arrow
            (dk_builtins.collmeth__rep (coll_isparam__A c))
            (dk_builtins.collmeth__rep (coll_isparam__B c)))).
  collmeth__morph_substitution_rule :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep (coll_isparam__A c))
            (var__x : (cc.eT (dk_builtins.collmeth__rep (coll_isparam__A c))) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep (coll_isparam__A c))
                 (var__y :
                     (cc.eT (dk_builtins.collmeth__rep (coll_isparam__A c))) =>
                  (dk_logic.imp
                      (dk_logic.ebP
                          (sets.collmeth__equal
                              (coll_isparam__A c)
                              var__x
                              var__y))
                      (dk_logic.ebP
                          (sets.collmeth__equal
                              (coll_isparam__B c)
                              (collmeth__morph c var__x)
                              (collmeth__morph c var__y))))))))).
  collmeth__parse :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow basics.string (dk_builtins.collmeth__rep c))).
  collmeth__print :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow (dk_builtins.collmeth__rep c) basics.string)).
  
  (; Definitions of methods ;)
  
  
  
  
  
  
  
  
(; Species Setoid_automorphism ;)
  (; Definition of the species' instance type ;)
  species_instance__Setoid_automorphism : cc.uT.
  [  ] species_instance__Setoid_automorphism -->
      cc.Pi_TTT
         sets.species_instance__Setoid
         (isparam__Setoid_automorphism__A :
             (cc.eT sets.species_instance__Setoid) =>
          dk_builtins.collection).
  (; Declaration of Parameters ;)
  isparam__Setoid_automorphism__A :
    s : dk_builtins.Object -> (cc.eT sets.species_instance__Setoid).
  coll_isparam__A :
    c : dk_builtins.Collection -> (cc.eT sets.species_instance__Setoid).
  
  (; Declaration of methods ;)
  
  collmeth__rep : c : dk_builtins.Collection -> cc.uT.
  collmeth__morph :
    c : dk_builtins.Collection ->
    (cc.eT
        (cc.Arrow
            (dk_builtins.collmeth__rep (coll_isparam__A c))
            (dk_builtins.collmeth__rep (coll_isparam__A c)))).
  collmeth__morph_substitution_rule :
    c : dk_builtins.Collection ->
    (dk_logic.eP
        (dk_logic.forall
            (dk_builtins.collmeth__rep (coll_isparam__A c))
            (var__x : (cc.eT (dk_builtins.collmeth__rep (coll_isparam__A c))) =>
             (dk_logic.forall
                 (dk_builtins.collmeth__rep (coll_isparam__A c))
                 (var__y :
                     (cc.eT (dk_builtins.collmeth__rep (coll_isparam__A c))) =>
                  (dk_logic.imp
                      (dk_logic.ebP
                          (sets.collmeth__equal
                              (coll_isparam__A c)
                              var__x
                              var__y))
                      (dk_logic.ebP
                          (sets.collmeth__equal
                              (coll_isparam__A c)
                              (collmeth__morph c var__x)
                              (collmeth__morph c var__y))))))))).
  collmeth__parse :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow basics.string (dk_builtins.collmeth__rep c))).
  collmeth__print :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow (dk_builtins.collmeth__rep c) basics.string)).
  
  (; Definitions of methods ;)
  
  
  
  
  
  
  
