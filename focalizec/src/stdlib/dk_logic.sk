#NAME dk_logic.

(; Impredicative prop ;)

def prop := sttforall.bool.
Prop : Type.
[] sttforall.etap (sttforall.p sttforall.bool) --> Prop.
def ebP : cc.eT dk_bool.bool -> Prop.

def eP : Prop -> Type := sttforall.eps.
def imp := sttforall.impl.
def forall := sttforall.forall.
def forall_type := sttforall.forallP.

def and (a : Prop) (b : Prop) :=
  forall prop (c : Prop => imp (imp a (imp b c)) c).

def or (a : Prop) (b : Prop) :=
  forall prop (c : Prop => imp (imp a c) (imp (imp b c) c)).

def True : Prop := forall prop (P : Prop => imp P P).
def False : Prop := forall prop (P : Prop => P).
def not (f : Prop) : Prop := imp f False.
def eqv (A : Prop) (B : Prop) : Prop :=
  and (imp A B) (imp B A).

def exists (A : cc.uT) (f : cc.eT A -> Prop) : Prop :=
  forall prop (P : Prop => imp (forall A (x : cc.eT A => imp (f x) P)) P).
def forallc (A : cc.uT) (f : cc.eT A -> Prop) : Prop :=
  not (not (forall A (x : cc.eT A => not (not (f x))))).
def existsc (A : cc.uT) (f : cc.eT A -> Prop) : Prop :=
  not (not (exists A (x : cc.eT A => not (not (f x))))).

def exists_type (f : cc.uT -> Prop) : Prop
:= forall prop (z : Prop =>
                (imp (forall_type (a : cc.uT =>
                                   imp (f a) z))
                     z)).


def TrueT : Type := eP True.
def FalseT : Type := eP False.
I : TrueT.
False_elim : A : cc.uT -> FalseT -> cc.eT A.

def Istrue : dk_bool.Bool -> Type.
[b] Istrue b --> eP (ebP b).

def and_intro (a : Prop) (b : Prop) (Ha : eP a) (Hb : eP b) : eP (and a b)
:= c : Prop =>
   f : (eP a -> eP b -> eP c) =>
   f Ha Hb.

def and_elim1 (a : Prop) (b : Prop) (Hab : eP (and a b)) : eP a :=
  Hab a (Ha => Hb => Ha).

def and_elim2 (a : Prop) (b : Prop) (Hab : eP (and a b)) : eP b :=
  Hab b (Ha => Hb => Hb).

def or_intro1 (a : Prop) (b : Prop) (Ha : eP a) : eP (or a b) :=
  c : Prop =>
  fa : (eP a -> eP c) =>
  fb : (eP b -> eP c) =>
  fa Ha.

def or_intro2 (a : Prop) (b : Prop) (Hb : eP b) : eP (or a b) :=
  c : Prop =>
  fa : (eP a -> eP c) =>
  fb : (eP b -> eP c) =>
  fb Hb.

def or_elim (a : Prop)
            (b : Prop)
            (c : Prop)
            (Hab : eP (or a b))
            (Ha : eP (imp a c))
            (Hb : eP (imp b c)) : eP c
:= Hab c Ha Hb.

def eqv_intro := f1 : Prop =>
                 f2 : Prop =>
                 and_intro (imp f1 f2) (imp f2 f1).
def eqv_elim1 := f1 : Prop =>
                 f2 : Prop =>
                 and_elim1 (imp f1 f2) (imp f2 f1).
def eqv_elim2 := f1 : Prop =>
                 f2 : Prop =>
                 and_elim2 (imp f1 f2) (imp f2 f1).

(; equality ;)
def equal : A : cc.uT -> x : cc.eT A -> y : cc.eT A -> Prop
          := A : cc.uT => x : cc.eT A => y : cc.eT A =>
                                         forall (cc.Arrow A prop)
                                                (H : (cc.eT A -> Prop) =>
                                                 imp (H x) (H y)).

def equalc (A : cc.uT) (x : cc.eT A) (y : cc.eT A) : Prop :=
  not (not (equal A x y)).

def refl : A : cc.uT -> x : cc.eT A -> eP (equal A x x)
         := A : cc.uT => x : cc.eT A =>
                         H : (cc.eT A -> Prop) =>
                         px : eP (H x) => px.

def equal_ind : A : cc.uT ->
                H : (cc.eT A -> Prop) ->
                x : cc.eT A ->
                y : cc.eT A ->
                eP (equal A x y) ->
                eP (H x) ->
                eP (H y)
              :=
                A : cc.uT =>
                P : (cc.eT A -> Prop) =>
                x : cc.eT A =>
                y : cc.eT A =>
                eq: eP (equal A x y) =>
                eq P.

def equal_sym : A : cc.uT ->
                x : cc.eT A ->
                y : cc.eT A ->
                eP (equal A x y) ->
                eP (equal A y x)
              :=
                A : cc.uT =>
                x : cc.eT A =>
                y : cc.eT A =>
                eq : eP (equal A x y) =>
                equal_ind
                  A
                  (z : cc.eT A => equal A z x)
                  x
                  y
                  eq
                  (refl A x).

def equal_congr :
  A : cc.uT ->
  B : cc.uT ->
  f : (cc.eT A -> cc.eT B) ->
  x : cc.eT A ->
  y : cc.eT A ->
  eP (equal A x y) ->
  eP (equal B (f x) (f y))
  :=
    A : cc.uT =>
    B : cc.uT =>
    f : (cc.eT A -> cc.eT B) =>
    x : cc.eT A =>
    y : cc.eT A =>
    H : eP (equal A x y) =>
    equal_ind A (z : cc.eT A => equal B (f x) (f z)) x y H (refl B (f x)).



[] ebP dk_bool.true --> True
[] ebP dk_bool.false --> False.
