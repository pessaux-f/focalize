(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: sums.fcl,v 1.18 2011-05-25 14:43:16 maarek Exp $ *)

(**

   @title Abstract and concrete sums.
   A first attempt to describe sums in a abstract way.
   Here we want to derive some basic functionalities which enable
   to implement equality without depending too much on the proof assistant.
   @author Renaud Rioboo

*)

(* [rr]: strictly speakin we only equal and thus sets but no orders *)
open "sets";;
open "basics";;

(**
   A sum of two things, method and property names clash with product since
   there is nothing that is both a sum and a product.
   This forbids to inherits from a product and a sum.
 *)
species Abstract_sum (A is Basic_object, B is Basic_object) =

  inherit Basic_object;

  (** first builder, name clash with product is intentional. *)
  signature first: A -> Self;
  (** an effective way to check if first case is true *)
  signature first_case: Self -> bool;
  property first_has_case: all x : A, !first_case(!first(x));


  (** second builder, name clash with product is intentional *)
  signature second: B -> Self;
  (** an effective way to check if second case is true *)
  signature second_case: Self -> bool;
  property second_has_case: all x : B, !second_case(!second(x));

  (**
     Every element is either first or second case,
     this is implicit when using variants.
   *)
  property case_complete: all x : Self,
    !first_case(x) \/ !second_case(x);

  (**
     First and second case are mutually exclusive,
     again implicit with variants and disjoint unions
   *)
  property case_exclusive: all x : Self,
    ~(!first_case(x) /\ !second_case(x));


end;;

(**
   This species is intended to abstract the concrete match used in
   type theoetic models which are traditionally used
   in conjunction with variant types.
 *)
species Sum_set(A is Setoid, B is Setoid) =

  inherit Abstract_sum(A, B), Setoid;

  (** this is a (partial) function which is intended to reverse first *)
  signature first_term: Self -> A;
  property first_reverses_term: all x : A,
    A!equal(!first_term(!first(x)), x);

  (** this is a (partial) function which is intended to reverse second *)
  signature second_term: Self -> B;
  property second_reverses_term: all x : B,
    B!equal(!second_term(!second(x)), x);


  (** Equality defined with protected extractors  *)
  let equal(x, y) =
     if !first_case(x) && !first_case(y)
     then
       A!equal(!first_term(x), !first_term(y))
     else
       if !second_case(x) && !second_case(y)
       then B!equal(!second_term(x), !second_term(y))
       else
         (* [rr]: start thinking about this,
            an auxiliary function ? Better specs ? *)
         false
  ;

  theorem equal_spec: all x y : Self,
    !equal(x, y)
       <->
     ((!first_case(x) /\
       !first_case(y) /\
        A!equal(!first_term(x), !first_term(y)))
      \/
      (!second_case(x) /\
       !second_case(y) /\
        B!equal(!second_term(x), !second_term(y))))
    proof = by property !case_exclusive
              definition of equal;

  (** Since equality is defined, we prove its reflexity *)
  proof of equal_reflexive =
    by property A!equal_reflexive, B!equal_reflexive, !case_complete,
       !equal_spec;

  (** Since equality is defined, we prove its symmetry *)
  proof of equal_symmetric =
    by property A!equal_symmetric, B!equal_symmetric,
       !equal_spec;

  (** Since equality is defined, we prove its transitivity *)
  proof of equal_transitive =
    by property A!equal_transitive, B!equal_transitive, !case_exclusive,
       !equal_spec;

  (**
     arbitrarily select element from first case,
   *)
  let element = !first(A!element);

  (** specifications are compatible with equality *)
  theorem first_term_substitution_rule: all x_1 x_2 : Self,
    !first_case(x_1) -> !equal(x_1, x_2) ->
      A!equal(!first_term(x_1), !first_term(x_2))
    proof =
      <1>1 assume x_1 : Self, x_2 : Self,
           hypothesis H_1: !first_case(x_1),
           hypothesis H_2: !equal(x_1, x_2),
           prove A!equal(!first_term(x_1), !first_term(x_2))
           <2>1 prove ~(!second_case(x_1) /\ !second_case(x_2))
                by property !case_exclusive hypothesis H_1
           <2>f qed by step <2>1 hypothesis H_2 property !equal_spec
      <1>f conclude
    ;


  (** first construction is a function *)

  theorem first_substitution_rule: all x y : A,
    A!equal(x, y) -> !equal(!first(x), !first(y))
    proof =
      <1>1 assume x : A, y : A,
           hypothesis H: A!equal(x, y),
           prove !equal(!first(x), !first(y))
           <2>1 prove A!equal(x, !first_term(!first(x)))
                by property !first_reverses_term, A!equal_symmetric
           <2>2 prove A!equal(y, !first_term(!first(y)))
                by property !first_reverses_term, A!equal_symmetric
           <2>3 prove !first_case(!first(x))
                by property !first_has_case
           <2>4 prove !first_case(!first(y))
                by property !first_has_case
           <2>5 prove A!equal(!first_term(!first(x)), !first_term(!first(y)))
                by step <2>1, <2>2
                   hypothesis H
                   property A!equal_transitive, A!equal_symmetric
           <2>f qed by step <2>3, <2>4, <2>5 definition of equal
      <1>f qed by step <1>1 property equal;


  (**
     A classical theorem from category theory says that there exists
     an injection from A to A + B
   *)
  theorem first_is_injective: all x y : A,
    !equal(!first(x), !first(y)) -> A!equal(x, y)
    proof =
      <1>1 assume x : A, y : A,
           hypothesis H: !equal(!first(x), !first(y)),
           prove A!equal(x, y)
           <2>1 prove A!equal(!first_term(!first(x)), x)
                by property !first_reverses_term
           <2>2 prove A!equal(!first_term(!first(y)), y)
                by property !first_reverses_term
           <2>3 prove A!equal(!first_term(!first(x)), !first_term(!first(y)))
                <3>1 prove !first_case(!first(x)) by property !first_has_case
                <3>f qed by
                       step <3>1
                       hypothesis H
                       property !first_term_substitution_rule
           <2>f qed by step <2>1, <2>2, <2>3
                       property A!equal_reflexive,
                                A!equal_symmetric,
                                A!equal_transitive
      <1>f conclude
    ;

  (** specifications are compatible with equality *)
  theorem second_term_substitution_rule: all x_1 x_2 : Self,
    !second_case(x_1) -> !equal(x_1, x_2) ->
      B!equal(!second_term(x_1), !second_term(x_2))
    proof =
      <1>1 assume x_1 : Self, x_2 : Self,
           hypothesis H_1: !second_case(x_1),
           hypothesis H_2: !equal(x_1, x_2),
           prove B!equal(!second_term(x_1), !second_term(x_2))
           <2>1 prove ~(!first_case(x_1) /\ !first_case(x_2))
                by property !case_exclusive hypothesis H_1
           <2>f qed by
                  step <2>1
                  hypothesis H_2
                  property !equal_spec
      <1>f conclude
    ;


  (** second construction is a function *)

  theorem second_substitution_rule: all x y : B,
    B!equal(x, y) -> !equal(!second(x), !second(y))
    proof =
      <1>1 assume x : B, y : B,
           hypothesis H: B!equal(x, y),
           prove !equal(!second(x), !second(y))
           <2>1 prove B!equal(x, !second_term(!second(x)))
                by property !second_reverses_term, B!equal_symmetric
           <2>2 prove B!equal(y, !second_term(!second(y)))
                by property !second_reverses_term, B!equal_symmetric
           <2>3 prove !second_case(!second(x))
                by property !second_has_case
           <2>4 prove !second_case(!second(y))
                by property !second_has_case
           <2>5 prove B!equal(!second_term(!second(x)), !second_term(!second(y)))
                by step <2>1, <2>2
                   hypothesis H
                   property B!equal_transitive, B!equal_symmetric
           <2>f qed by step <2>3, <2>4, <2>5
                       property !case_complete, !case_exclusive
                       definition of equal
      <1>f qed by step <1>1 property equal;

  (**
     A classical theorem from category theory says that there exists
     an injection from B to A + B
   *)
  theorem second_is_injective: all x y : B,
    !equal(!second(x), !second(y)) -> B!equal(x, y)
    proof =
      <1>1 assume x : B, y : B,
           hypothesis H: !equal(!second(x), !second(y)),
           prove B!equal(x, y)
           <2>1 prove B!equal(!second_term(!second(x)), x)
                by property !second_reverses_term
           <2>2 prove B!equal(!second_term(!second(y)), y)
                by property !second_reverses_term
           <2>3 prove B!equal(!second_term(!second(x)),
                              !second_term(!second(y)))
                <3>1 prove !second_case(!second(x))
                     by property !second_has_case
                <3>f qed by
                       step <3>1
                       hypothesis H
                       property !second_term_substitution_rule
           <2>f qed by step <2>1, <2>2, <2>3
                       property B!equal_reflexive,
                                B!equal_symmetric,
                                B!equal_transitive
      <1>f conclude
    ;

  (** specifications are compatible with bollean logic *)
  theorem first_case_substitution_rule: all x y : Self,
    !equal(x, y) -> !first_case(x) -> !first_case(y)
    proof =
      <1>1 assume x : Self, y : Self,
           hypothesis H: !equal(x, y),
           hypothesis H_x: !first_case(x),
           prove !first_case(y)
           <2>1 prove ~(!second_case(x) /\ !second_case(y))
                by hypothesis H_x property !case_exclusive
           <2>2 prove (!first_case(x) /\ !first_case(y) )
                by step <2>1 hypothesis H property !equal_spec
           <2>f qed by step <2>2
      <1>f conclude;

(*   (\** specifications are compatible with bollean logic *\) *)
(*   theorem first_case_full_subtitution_rule: all x y : self, *)
(*     !equal(x, y) -> (!first_case(x) <-> !first_case(y)) *)
(*     proof = by !first_case_substitution_rule, !equal_symmetric; *)


  (** specifications are compatible with logic *)
  theorem second_case_subtitution_rule: all x y : Self,
    !equal(x, y) -> (!second_case(x) -> !second_case(y))
    proof =
      <1>1 assume x : Self, y : Self,
           hypothesis H: !equal(x, y),
           hypothesis H_x: !second_case(x),
           prove !second_case(y)
           <2>1 prove ~(!first_case(x) /\ !first_case(y))
                by  hypothesis H_x property !case_exclusive
           <2>2 prove (!second_case(x) /\ !second_case(y) )
                by step <2>1 hypothesis H property !equal_spec
           <2>f qed by step <2>2
      <1>f conclude;

(*   (\** specifications are compatible with boolean logic *\) *)
(*   theorem second_case_full_subtitution_rule: all x y : self, *)
(*     !equal(x, y) -> (!second_case(x) <-> !second_case(y)) *)
(*     proof = by !second_case_subtitution_rule, !equal_symmetric; *)


  (**
     Non effective statement to very logical completeness.
     A non test case ?
   *)
   theorem first_reverses: all x : Self,
     !first_case(x) -> (ex x_a : A, !equal(!first(x_a), x))
      proof =
       <1>1 assume x : Self,
            hypothesis H: !first_case(x),
            prove !equal(!first(!first_term(x)), x)
            <2>1 prove A!equal(!first_term(!first(!first_term(x))),
                               !first_term(x))
                 by property !first_reverses_term
            <2>2 prove !first_case(!first(!first_term(x)))
                 by property !first_has_case
            <2>f qed
                 by step <2>1, <2>2 hypothesis H property !equal_spec
       <1>2 conclude;

   (**
      Non effective statement to very logical completeness.
      A non test case ?
    *)
   theorem second_reverses: all x : Self,
     !second_case(x) -> (ex x_b : B, !equal(!second(x_b), x))
     proof =
     <1>1 assume x : Self,
          hypothesis H: !second_case(x),
          prove !equal(!second(!second_term(x)), x)
          <2>1 prove B!equal(!second_term(!second(!second_term(x))),
                             !second_term(x))
               by property !second_reverses_term
          <2>2 prove !second_case(!second(!second_term(x)))
               by property !second_has_case
          <2>f qed
               by step <2>1, <2>2 hypothesis H property !equal_spec
     <1>2 conclude;

end;;

(**
   This is a constructive version of the property that a pair of functions
   from A to E and from B to E factorize into a function of A+B to E
 *)
species Categorical_sum_property
  (AX is Setoid,
   BX is Setoid,
   E is Setoid,
   M_a is Setoid_morphism(AX, E),
   M_b is Setoid_morphism(BX, E),
   S is Sum_set(AX, BX)) =

  inherit Setoid_morphism(S, E);

  (** An effective way to factor functions *)
  let morph(x) =
    if S!first_case(x)
    then M_a!morph(S!first_term(x))
    else M_b!morph(S!second_term(x));

  theorem morph_first_substitution_rule: all x y : S,
    S!equal(x, y) -> S!first_case(x) -> E!equal(!morph(x), !morph(y))
  proof =
    <1>1 assume x : S, y : S,
         hypothesis H : S!equal(x, y),
         hypothesis H_x : S!first_case(x),
         prove E!equal(!morph(x), !morph(y))
         <2>1 prove S!first_case(y)
              by hypothesis H_x, H
                 property S!equal_spec, S!case_exclusive
         <2>2 prove E!equal(M_a!morph(S!first_term(x)),
                            M_a!morph(S!first_term(y)))
              <3>1 prove AX!equal(S!first_term(x), S!first_term(y))
                   by hypothesis H_x, H
                      property S!first_term_substitution_rule
              <3>f qed by step <3>1 property M_a!morph_substitution_rule
         <2>f qed by step <2>1, <2>2 hypothesis H_x
                     definition of morph
     <1>f qed by step <1>1 property morph;

  theorem morph_second_substitution_rule: all x y : S,
    S!equal(x, y) -> S!second_case(x) -> E!equal(!morph(x), !morph(y))
  proof =
    <1>1 assume x : S, y : S,
         hypothesis H : S!equal(x, y),
         hypothesis H_x : S!second_case(x),
         prove E!equal(!morph(x), !morph(y))
         <2>1 prove S!second_case(y)
              by hypothesis H_x, H
                 property S!equal_spec, S!case_exclusive
         <2>2 prove E!equal(M_b!morph(S!second_term(x)),
                            M_b!morph(S!second_term(y)))
              <3>1 prove BX!equal(S!second_term(x), S!second_term(y))
                   by hypothesis H_x, H
                      property S!second_term_substitution_rule
              <3>f qed
                   by step <3>1 property M_b!morph_substitution_rule
         <2>f qed
              by step <2>1, <2>2 hypothesis H_x
                     property S!case_exclusive, S!case_complete
                     definition of morph
     <1>f qed by step <1>1 property morph;



end;;

(**
   Our specifications of sums implicitely build a new bigger set,
   whereas it is common that we have A + A = A in set theory.
   May be we could rethink the model but
   this is the usual model for variant types.
   We thus recommend to inherit from this species when abstracting variants.
 *)
species Disjoint_sum(A is Setoid, B is Setoid) =

  inherit Sum_set(A, B);

  (** Each part is strictly included by its components *)
  theorem sum_is_non_trivial: all x : A, all y : B,
    ~(!equal(!first(x), !second(y)))
  proof = by property !first_has_case, !second_has_case,
                     !case_exclusive, !equal_spec;

  (** A sum has at least two distinct elements *)
  theorem sum_has_distinct: ex x : Self, ex y : Self, !different(x, y)
  proof =
    <1>1 prove ~(!equal(!first(A!element), !second(B!element)))
         <2>1 prove ~(!second_case(!first(A!element)))
              by property !first_has_case, !case_exclusive
         <2>2 prove ~(!first_case(!second(B!element)))
              by property  !second_has_case, !case_exclusive
         <2>f qed by step <2>1, <2>2 property !equal_spec
    <1>f qed by step <1>1 property !same_is_not_different;

end;;



(** a concrete container for our objects *)
type simple_variant('a, 'b) =
  | First('a)
  | Second('b)
;;

(**
   Abstract sums implemented though variant types,
   we build concrete injections, testers and extractors
   needed by our framework.
 *)
species Variant_sum(A is Setoid, B is Setoid) =

  inherit Sum_set(A, B);

  representation = simple_variant(A, B);

  let first(x) = First(x);
  let first_case(x) = match x with
    | First(_x) -> true
    | Second(_x) -> false
  ;

  (**
     Compatibilty betwwen first tester and extractor is implicit
     in type theory
   *)
  proof of first_has_case =
    coq proof
    definition of first, first_case
    {* intros; unfold abst_first_case, abst_first; exact I. Qed. *}
    ;

  (**
     Ill behavior is unspecified, in this case
     we return the sample of A but could have raised error.
   *)
  let first_term(x) = match x with
    | First(x) -> x
    | Second(_x) -> A!element
  ;

  (** First injection correctness *)
  proof of first_reverses_term =
    coq proof
    definition of first, first_term
    property A!equal_reflexive
    {* intros; unfold abst_first, abst_first_term;
       apply _p_A_equal_reflexive. Qed. *};

  let second(x) = Second(x);
  let second_case(x) = match x with
    | Second(_x) -> true
    | First(_x) -> false
  ;

  (**
     Compatibilty betwwen second tester and extractor is implicit
     in type theory
   *)
  proof of second_has_case=
    coq proof
    definition of second, second_case
    {* intros; unfold abst_second_case, abst_second; exact I. Qed. *};

  (**
     Ill behavior is unspecified, in this case
     we return the sample of B but could have raised error.
   *)
  let second_term(x) = match x with
    | Second(x) -> x
    | First(_x) -> B!element
  ;


  (** Second injection correctness *)
  proof of second_reverses_term =
    coq proof
    definition of second, second_term
    property B!equal_reflexive
    {* intros; unfold abst_second, abst_second_term;
       apply _p_B_equal_reflexive. Qed. *};

  (** Cases cannot mix cases of variant types *)
  proof of case_exclusive =
    coq proof
    definition of first_case, second_case
    {* intros; unfold first_case, second_case;
       destruct x; simpl; tauto. Qed. *};

  (**
     This is a completeness property,
     every element in a variant is of known kind
   *)
  proof of case_complete =
    coq proof
    definition of first_case, second_case
    {* intros; unfold first_case, second_case; destruct x;
       simpl; [left | right]; auto. Qed. *};

end;;

(* (\** A concrete species to specify strict disjoint unions *\) *)
(* species disjoint_variant_sum(a is setoid) = *)
(* *)
(*   inherit disjoint_sum(a, a), variant_sum(a, a); *)
(* end *)
(* ;; *)

(* (\**  *)
(*    A final model for disjoint sums, when are they the same ? *)
(*  *\) *)
(* collection disjoint_variant_sum_test = *)
(*   implement variant_sum(singleton_1, singleton_2)  *)
(*   (\* [rr] Hack to include representation types *\) *)
(*   let _rep_a(a, b) = singleton_1!equal(a, b); *)
(*   let _rep_b(a, b) = singleton_2!equal(a, b); *)
(* end *)
(* ;; *)



