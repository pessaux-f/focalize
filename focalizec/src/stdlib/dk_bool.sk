#NAME dk_bool.

(; Bool ;)
(; Declaration ;)
bool : cc.uT.
def Bool : Type := cc.eT bool.

(; Constructors ;)
true : Bool.
false : Bool.

(; Values of type Bool are true and false ;)
def call_by_value_bool : R : cc.uT -> (Bool -> cc.eT R) -> Bool -> cc.eT R.
[f]
    call_by_value_bool _ f true --> f true
[f]
    call_by_value_bool _ f false --> f false.

(; Pattern-matching ;)
def match :
  P : (Bool -> cc.uT) ->
  cc.eT (P true) ->
  cc.eT (P false) ->
  b : Bool ->
  cc.eT (P b).
[H] match _ H _ true  --> H
[H] match _ _ H false --> H.

(; Operations ;)
(; polymorphic if .. then .. else .. ;)
def ite :
  A : cc.uT ->
  Bool ->
  cc.eT A ->
  cc.eT A ->
  cc.eT A.
[A,x,y,b]
    ite A b x y
      -->
    match (b : Bool => A) x y b.

def match__true :
  Bool ->
  A : cc.uT ->
  cc.eT A ->
  cc.eT A ->
  cc.eT A.
[A,b,t,e]
    match__true b A t e --> ite A b t e.

def match__false :
  Bool ->
  A : cc.uT ->
  cc.eT A ->
  cc.eT A ->
  cc.eT A.
[A,b,t,e]
    match__false b A t e --> ite A b e t.

(; boolean if .. then .. else .. ;)
def iteb : Bool -> Bool -> Bool -> Bool
     := ite bool.

(; negation ;)
def not : Bool -> Bool.
[] not true --> false
[] not false --> true
[b] not (not b) --> b.

(; binary operators ;)
def and : Bool -> Bool -> Bool.
[b] and b true --> b
[b] and true b --> b
[]  and _ false --> false
[]  and false _ --> false.

def or : Bool -> Bool -> Bool.
[]  or _ true --> true
[]  or true _ --> true
[b] or b false --> b
[b] or false b --> b.

def xor : Bool -> Bool -> Bool.
[b] xor b true --> not b
[b] xor true b --> not b
[b] xor b false --> b
[b] xor false b --> b.

def imp : Bool -> Bool -> Bool.
[] imp _ true --> true
[b] imp true b --> b
[b] imp b false --> not b
[] imp false _ --> true.

def eqv : Bool -> Bool -> Bool.
[b] eqv b true --> b
[b] eqv true b --> b
[b] eqv b false --> not b
[b] eqv false b --> not b.

(; Associativity ;)
[b1,b2,b3] and b1 (and b2 b3) --> and (and b1 b2) b3.
[b1,b2,b3] or b1 (or b2 b3) --> or (or b1 b2) b3.
[b1,b2,b3] xor b1 (xor b2 b3) --> xor (xor b1 b2) b3.

(; Distributivity ;)
[b1,b2,b3] and b1 (or b2 b3) --> or (and b1 b2) (and b1 b3).
[b1,b2,b3] and (or b1 b2) b3 --> or (and b1 b3) (and b2 b3).

[b1,b2] not (and b1 b2) --> or (not b1) (not b2).
[b1,b2] not (or b1 b2) --> and (not b1) (not b2).
[b1,b2] not (xor b1 b2) --> eqv (not b1) (not b2).
[b1,b2] not (eqv b1 b2) --> xor (not b1) (not b2).
