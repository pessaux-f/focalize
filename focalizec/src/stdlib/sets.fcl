(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: sets.fcl,v 1.15 2011-05-25 14:43:16 maarek Exp $ *)

(**
   @title Basic sets operations.
   @author The FoCaLize devolopers Team
   Basic Set operations
 *)

open "basics";;
coq_require "sets_externals";;

(** In a setoid, we can test the equality (note for logicians: this is
    a congruence). The setoid must be be non empty. *)
species Setoid =

  inherit Basic_object;

  (** @mathml <eq/> *)
  (* sig ( = ) : Self -> Self -> bool; *)
  signature equal : Self -> Self -> bool;

  (*
  property ``equal is reflexive'' : all x y : Self,
    Self!( = ) (x, x) and x = x;
   *)
  property equal_reflexive : all x : Self, !equal (x, x);

  property equal_symmetric : all x y : Self,
    Self!equal (x, y) -> !equal (y, x);

  property equal_transitive : all x y z : Self,
    !equal (x, y) -> !equal (y, z) -> !equal (x, z);

  (** element returns some element of our non empty setoid *)
  signature element : Self;

  (** @mathml <neq/> *)
  let different (x, y) = ~~ (!equal (x, y));

  theorem same_is_not_different : all x y : Self,
     !different (x, y) <-> ~ (!equal (x, y))
  proof =
    by definition of different;

  theorem different_is_irreflexive: all x : Self,
    ~ (!different (x, x))
  proof =
    (* by property ``equal is reflexive'', same_is_not_different *)
    by property equal_reflexive, same_is_not_different;

  theorem different_is_symmetric: all x y : Self,
    !different (x, y) -> !different (y, x)
  proof = by property equal_symmetric, same_is_not_different;

  (**
     Take two distinct elements then any third element is distinct from
     one of the first two
  *)
  theorem different_is_complete: all x y z : Self,
    !different (x, y) -> (!different (x, z) \/ !different (y, z))
    proof =
      by property !equal_reflexive, !equal_symmetric,
                  !equal_transitive, !same_is_not_different
  ;
end
;;

(** By an Anti_setoid we mean a setoid where appartness (difference) is
   considered as a primitive operation. We provide the same (though
   incompatible) functionalities as Setoid!  *)

species Anti_setoid =

  inherit Basic_object;

  (** An appartness decidable relation *)
  signature different: Self -> Self -> bool;

  property different_is_symmetric: all x y : Self,
    !different (x, y) -> !different (y, x);

  property different_is_irreflexive: all x : Self,
    ~ (!different (x, x));

  (**
     Take two distinct elements then any third element is distinct from
     one of the first two
  *)
  property different_is_complete: all x y z : Self,
    !different (x, y) -> (!different (x, z) \/ !different (y, z));

  (** element returns some element of our non empty setoid *)
  signature element : Self;

  (** Equality is a derived operation, it is sometimes called an indifference *)
  let equal (x, y) = ~~ (!different (x, y));

  theorem different_is_not_same : all x y : Self,
    !equal (x, y) <-> ~ (!different (x, y))
  proof = by definition of equal;

  theorem equal_reflexive: all x : Self, !equal (x, x)
    proof = by property !different_is_not_same, !different_is_irreflexive;

  theorem equal_symmetric: all x y : Self,
    Self!equal (x, y) -> !equal (y, x)
    proof = by property !different_is_symmetric, !different_is_not_same;

  theorem equal_transitive : all x y z : Self,
    !equal (x, y) -> !equal (y, z) -> !equal (x, z)
    proof =
     by property !different_is_complete, !different_is_symmetric,
                       !different_is_irreflexive, !different_is_not_same;
end
;;


let ifailed  =
  internal (string -> 'a ->'a)
  external
  | caml -> {* Sets_externals.i_failed *}
  | coq -> {* sets_externals.i_failed _ *}
  | dedukti -> {* sets_externals.i_failed __var_a *}
;;

(**
   Here we state that in some cases we may view partial operations
   as total operations.
   This requires to include some form of predicate for failing operations.

 *)
species Partial_set =

  inherit Setoid;

  (** this is intended to model failure *)
  let failed (reason) : Self =
    ifailed (reason, !element);
end
;;

(** Equivalence relations over a set *)
species Equivalence_relation (S is Setoid) =

  inherit Basic_object;

  (**
     @mathml <equivalent/>
     will be denoted as infix congruence
   *)
  signature equiv: S -> S -> prop;
  property equiv_symmetric: all x y : S,
    !equiv (x, y) -> !equiv (y, x);
  property equiv_transitive: all x y z : S,
    !equiv (x, y) -> !equiv (y, z) -> !equiv (x, z);
  (** compatibility with equality *)
  property equal_refines_equiv: all x y : S,
     S!equal (x, y) -> !equiv (x, y);
  theorem equiv_reflexive: all x : S, !equiv (x, x)
    proof = by property!equal_refines_equiv, S!equal_reflexive;
end;;

(**
   The FoCaLize way to use functions, abstract into a species!
 *)
species Setoid_morphism (A is Setoid, B is Setoid) =

  (** strictly speaking we don't need representation here *)
  inherit Basic_object;

  (** an explicit signature *)
  signature morph: A -> B;
  (**
    A function taking setoids as arguments should be compatible with equality
   *)
  property morph_substitution_rule: all x y : A,
    A!equal (x, y) -> B!equal (!morph (x), !morph (y));
end
;;

(**
   An automorphism is a function from a set to itself
 *)
species Setoid_automorphism (A is Setoid) =
  (** All properties from Setoid_morphism *)

  inherit Setoid_morphism (A, A);

end;;
