(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Renaud Rioboo                                            *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007, 2008 LIP6 and INRIA                                *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: orders.fcl,v 1.15 2011-05-25 14:43:16 maarek Exp $ *)

open "basics";;
open "sets";;

(** pre orderings are sometimes called quasi orderings *)
species Pre_order =

  inherit Setoid;

  (** leq (x,y) is x <= y
      @mathml <leq/> *)
  signature leq : Self -> Self -> bool;

  property leq_extends_equal: all x y : Self,
    !equal (x, y) -> !leq (x, y);

  theorem leq_reflexive : all x : Self, !leq (x, x)
    proof = by property !leq_extends_equal, !equal_reflexive;

  property leq_transitive : all x y z : Self,
    !leq (x, y) -> !leq (y, z) -> !leq (x, z);

  (** we may reverse inequalities by simply changing notations, sometimes
       called a preference @mathml <geq/> *)

  let geq (x, y)= !leq (y, x);

  (** A characteristic property *)
  theorem geq_is_leq : all x y : Self,
    !geq (x, y) <-> !leq (y, x)
    proof = by definition of geq
  ;

  theorem geq_reflexive : all x : Self, !geq (x, x)
    proof = by property leq_reflexive, geq_is_leq
  ;

  theorem geq_extends_equal : all x y : Self, !equal (x, y) -> !geq (x, y)
    proof = by property !leq_extends_equal, !equal_symmetric, !geq_is_leq
  ;

  theorem geq_transitive : all x y z : Self,
    !geq (x, y) -> !geq (y, z) -> !geq (x, z)
    proof = by property !leq_transitive, !geq_is_leq
  ;

(*   (\** *)
(*      Strict ordering. *)
(*      Depending on authors the definition for a strict preorder varies... *)
(*      Here we define < from <= *)
(*    *\) *)

(*   let lt (x, y) = and_b (!leq (x, y), not_b (!leq (y, x))); *)

(*   theorem lt_spec: all x y : Self, *)
(*     !lt (x, y) <-> (!leq (x, y) /\ ~ (leq (y, x))) *)
(*       proof: by definition of lt; *)

(*   theorem lt_is_irreflexive: all x : Self, ~ (!lt (x, x)) *)
(*     proof: by property !lt_spec, !leq_reflexive, !leq_transitive; *)

(*   theorem lt_is_transitive: all x y z : Self, *)
(*     !lt (x, y) -> !lt (y, z) -> !lt (x, z) *)
(*     proof: by property !lt_spec, !leq_transitive; *)

(*   theorem lt_is_asymetric: all x y : Self, *)
(*     !lt (x, y) -> ~ (!lt (y, x)) *)
(*     proof: by property !lt_spec; *)


  (** strict inequality
     @mathml <lt/> *)
  let lt (x, y) = !leq (x, y) && !different (x, y);

  (** some results about strict and large inequalities *)
  theorem lt_is_leq_and_different : all x y : Self,
    !lt (x, y) <-> (!leq (x, y) /\ !different (x, y))
    proof =
      by definition of lt
    ;

  theorem lt_is_irreflexive: all x : Self, ~ (!lt (x, x))
    proof = by property !lt_is_leq_and_different, !different_is_irreflexive;

  theorem lt_refines_leq: all x y : Self,
    !lt (x, y) -> !leq (x, y)
    proof = by property lt_is_leq_and_different;

  theorem lt_refines_different: all x y : Self,
    !lt (x, y) -> !different (x, y)
    proof = by property lt_is_leq_and_different;

  let gt (x, y) = !lt (y, x);

  theorem gt_is_lt: all x y : Self,
    !gt (x, y) <-> !lt (y, x)
    proof = by definition of gt;

  theorem gt_is_irreflexive: all x : Self, ~ (gt (x, x))
    proof = by property gt_is_lt, !lt_is_irreflexive;

  theorem gt_refines_different: all x y : Self,
    !gt (x, y) -> !different (x, y)
    proof =
      by property gt_is_lt, !lt_refines_different, !different_is_symmetric;

end
;;

(**
   An ordering is total whenever two elements are always comparable
   these are sometimes called linear orders or chains
 *)
species Total_pre_order =

  inherit Pre_order;

  (** a total order is a complete relation *)
  property total_order : all x y : Self, Self!leq (x, y) \/ Self!leq (y, x);


end
;;

(** In a set an ordering is often called a partial order *)
species Partial_order =

  inherit Pre_order;

  property leq_antisymmetric :  all x y : Self,
    !leq (x, y) -> !leq (y, x) -> !equal (x, y)
  ;

  theorem lt_is_asymetric: all x y : Self,
    !lt (x, y) -> ~ (!lt (y, x))
    proof =
      by property !lt_is_leq_and_different,
                  !leq_antisymmetric,
                  !same_is_not_different;

  theorem lt_is_transitive: all x y z : Self,
    !lt (x, y) -> !lt (y, z) -> !lt (x, z)
    proof =
    <1>1 assume x : Self, y : Self, z : Self,
         hypothesis H_xy : !lt (x, y), hypothesis H_yz: !lt (y, z),
         prove !lt (x, z)
         <2>1 prove !leq (x, z)
              by hypothesis H_xy, H_yz
                 property !lt_is_leq_and_different, !leq_transitive
         <2>2 prove !different (x, z)
              <3>1 hypothesis F : !equal (z, x),
                   prove false
                   <4>1 prove !leq (z, x)
                        by hypothesis F
                           property !leq_extends_equal
                   <4>2 prove !leq (y, x)
                        by step <4>1
                           hypothesis H_yz
                           property !lt_refines_leq, !leq_transitive
                   <4>3 prove leq (x, y)
                        by hypothesis H_xy
                           property lt_refines_leq, leq_transitive
                   <4>4 prove !equal (x, y)
                        by step <4>2, <4>3
                           property !leq_antisymmetric
                   <4>5 prove !different (x, y)
                        by hypothesis H_xy
                           property !lt_refines_different
                   <4>f qed by step <4>4, <4>5
                               property same_is_not_different
              <3>f qed by step <3>1
                          property !same_is_not_different, !equal_symmetric
         <2>f qed by step <2>1, <2>2 property !lt_is_leq_and_different
    <1>f conclude
  ;

  theorem geq_antisymmetric : all x y : Self,
    !geq (x, y) -> !geq (y, x) -> !equal (x, y)
    proof = by property leq_antisymmetric, geq_is_leq
  ;

  theorem gt_is_asymetric: all x y : Self,
    !gt (x, y) -> ~ (!gt (y, x))
    proof = by property !gt_is_lt, !lt_is_asymetric;


  theorem gt_is_transitive: all x y z : Self,
    !gt (x, y) -> !gt (y, z) -> !gt (x, z)
    proof = by property !gt_is_lt, !lt_is_transitive;


end
;;

(**
   An ordering is total whenever two elements are always comparable,
 *)
species Ordered_set =

  inherit Partial_order, Total_pre_order;

  let equal (x, y) = Self!leq (x, y) && Self!leq (y, x);

  theorem equal_from_leq: all x y : Self,
    !equal (x, y) <-> (!leq (x, y) /\ !leq (y, x))
    proof = by definition of equal;

  proof of equal_reflexive =
    by property !total_order, !equal_from_leq
  ;

  proof of equal_symmetric =
    by property !equal_from_leq
  ;

  proof of leq_extends_equal = by property equal_from_leq;

  proof of equal_transitive =
    by property leq_transitive, !equal_from_leq
  ;

end
;;
