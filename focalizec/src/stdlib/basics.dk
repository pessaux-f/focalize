#NAME basics
(; Generated by focalizec ;)
#IMPORT dk_builtins

int : cc.uT.
[  ] int -->  dk_int.int .
unit : cc.uT.
float : cc.uT.
char : cc.uT.
string : cc.uT.
[  ] string -->  dk_builtins.string .
bool : cc.uT.
[  ] bool -->  dk_bool.bool .
list : cc.uT -> cc.uT.
[  ] list -->  dk_list.list .
_amper__amper_ :
  cc.eT (cc.Arrow basics.bool (cc.Arrow basics.bool basics.bool)).
_bar__bar_ : cc.eT (cc.Arrow basics.bool (cc.Arrow basics.bool basics.bool)).
_tilda__tilda_ : cc.eT (cc.Arrow basics.bool basics.bool).
_bar__lt__gt__bar_ :
  cc.eT (cc.Arrow basics.bool (cc.Arrow basics.bool basics.bool)).
pair :
  type_var__b : cc.uT ->
  type_var__a : cc.uT ->
  (cc.eT
      (cc.Arrow
          type_var__a
          (cc.Arrow type_var__b (dk_tuple.Tuple type_var__a type_var__b)))).
fst :
  type_var__b : cc.uT ->
  type_var__a : cc.uT ->
  (cc.eT (cc.Arrow (dk_tuple.Tuple type_var__a type_var__b) type_var__a)).
snd :
  type_var__a : cc.uT ->
  type_var__b : cc.uT ->
  (cc.eT (cc.Arrow (dk_tuple.Tuple type_var__b type_var__a) type_var__a)).
_hat_ :
  cc.eT (cc.Arrow basics.string (cc.Arrow basics.string basics.string)).
_lt__hat_ :
  cc.eT (cc.Arrow basics.string (cc.Arrow basics.string basics.bool)).
_equal_0x : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.bool)).
_lt_0x : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.bool)).
_lt__equal_0x :
  cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.bool)).
_gt__equal_0x :
  cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.bool)).
_gt_0x : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.bool)).
_plus_ : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.int)).
_dash_ : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.int)).
_tilda_0x : cc.eT (cc.Arrow basics.int basics.int).
_star_ : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.int)).
_slash_ : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.int)).
_percent_ : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.int)).
succ0x : cc.eT (cc.Arrow basics.int basics.int).
pred0x : cc.eT (cc.Arrow basics.int basics.int).
max0x : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.int)).
min0x : cc.eT (cc.Arrow basics.int (cc.Arrow basics.int basics.int)).
abs0x : cc.eT (cc.Arrow basics.int basics.int).
string_of_int : cc.eT (cc.Arrow basics.int basics.string).
int_of_string : cc.eT (cc.Arrow basics.string basics.int).
_equal_ :
  type_var__a : cc.uT ->
  (cc.eT (cc.Arrow type_var__a (cc.Arrow type_var__a basics.bool))).
syntactic_equal :
  type_var__a : cc.uT ->
  (cc.eT (cc.Arrow type_var__a (cc.Arrow type_var__a basics.bool))).
print_int : cc.eT (cc.Arrow basics.int basics.unit).
print_newline : cc.eT (cc.Arrow basics.unit basics.unit).
print_string : cc.eT (cc.Arrow basics.string basics.unit).
focalize_error :
  type_var__a : cc.uT -> (cc.eT (cc.Arrow basics.string type_var__a)).
(; Species Basic_object ;)
  (; Definition of the species' instance type ;)
  species_instance__Basic_object : cc.uT.
  [  ] species_instance__Basic_object --> dk_builtins.collection.
  (; Declaration of Parameters ;)
  
  (; Declaration of methods ;)
  methtype__Basic_object__parse : cc.uT.
  [  ] methtype__Basic_object__parse -->
      cc.Pi_TTT cc.uuT (rep : (cc.eT cc.uuT) => (cc.Arrow basics.string rep)).
  (; method parse ;)
  meth__Basic_object__parse : cc.eT (methtype__Basic_object__parse).
  methtype__Basic_object__print : cc.uT.
  [  ] methtype__Basic_object__print -->
      cc.Pi_TTT cc.uuT (rep : (cc.eT cc.uuT) => (cc.Arrow rep basics.string)).
  (; method print ;)
  meth__Basic_object__print : cc.eT (methtype__Basic_object__print).
  
  collmeth__rep : c : dk_builtins.Collection -> cc.uT.
  collmeth__parse :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow basics.string (dk_builtins.collmeth__rep c))).
  collmeth__print :
    c : dk_builtins.Collection ->
    (cc.eT (cc.Arrow (dk_builtins.collmeth__rep c) basics.string)).
  
  (; Definitions of methods ;)
  
  
  
  
partiel : cc.uT -> cc.uT.
constr__Failed : type_var__a : cc.uT -> (cc.eT (basics.partiel type_var__a)).
constr__Unfailed :
  type_var__a : cc.uT ->
  (cc.eT (cc.Arrow type_var__a (basics.partiel type_var__a))).
is_failed :
  type_var__a : cc.uT ->
  (cc.eT (cc.Arrow (basics.partiel type_var__a) basics.bool)).
non_failed :
  type_var__a : cc.uT ->
  (cc.eT (cc.Arrow (basics.partiel type_var__a) type_var__a)).
