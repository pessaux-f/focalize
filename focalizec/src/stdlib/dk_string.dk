#NAME dk_string.
(; lists of ascii characters ;)

string : cc.uT.
String := cc.eT string.
nil : String.
cons : dk_char.Char -> String -> String.


equal : String -> String -> dk_bool.Bool.

[ s : String ] equal s s --> dk_bool.true
[ c : dk_char.Char, s : String ]
    equal nil (cons c s) --> dk_bool.false
[ c : dk_char.Char, s : String ]
    equal (cons c s) nil --> dk_bool.false
[ c1 : dk_char.Char, s1 : String,
  c2 : dk_char.Char, s2 : String ]
    equal (cons c1 s1)
          (cons c2 s2)
      -->
    dk_bool.and (dk_char.equal c1 c2) (equal s1 s2).

append : String -> String -> String.
[ s : String ]
    append nil s --> s
[ c : dk_char.Char, s1 : String, s2 : String ]
    append (cons c s1) s2 --> cons c (append s1 s2).

lt : String -> String -> dk_bool.Bool.
[ ]
    lt nil nil --> dk_bool.false
[ c : dk_char.Char, s : String ]
    lt nil (cons c s) --> dk_bool.true
[ c : dk_char.Char, s : String ]
    lt (cons c s) nil --> dk_bool.false
[ c1 : dk_char.Char, c2 : dk_char.Char,
  s1 : String, s2 : String ]
    lt (cons c1 s1) (cons c2 s2)
      -->
    dk_bool.or (dk_char.lt c1 c2)
               (dk_bool.and
                 (dk_char.equal c1 c2)
                 (lt s1 s2)).

of_diglist : dk_nat.Diglist -> String.
[] of_diglist (dk_list.nil dk_nat.Digit) --> nil
[ d : cc.eT dk_nat.Digit, l : dk_nat.Diglist ]
    of_diglist (dk_list.cons dk_nat.Digit d l)
      -->
    cons (dk_char.digit_to_char d)
         (of_diglist l).

of_nat : cc.eT dk_nat.nat -> String.
[ n : cc.eT dk_nat.nat ] of_nat n --> of_diglist (dk_nat.nat_to_list n).

of_int : cc.eT dk_int.int -> String.
[n : dk_nat.Nat]
    of_int (dk_int.make n dk_nat.O)
      -->
    of_nat n
[m : dk_nat.Nat]
    of_int (dk_int.make dk_nat.O (dk_nat.S m))
      -->
    cons dk_char.hyphen (of_nat (dk_nat.S m)).

to_diglist : String -> dk_nat.Diglist.
[]
    to_diglist nil
      -->
      dk_list.nil dk_nat.Digit
[ c : dk_char.Char, s : String]
    to_diglist (cons c s)
      -->
    dk_list.cons dk_nat.Digit
      (dk_char.char_to_digit c)
      (to_diglist s).

to_nat : String -> dk_nat.Nat.
[ s : String ] to_nat s --> dk_nat.list_to_nat (to_diglist s).

to_int : String -> cc.eT dk_int.int.
[ c : dk_char.Char, s : String ]
    to_int (cons c s)
      -->
    dk_bool.ite dk_int.int
      (dk_char.equal c dk_char.hyphen)
      (dk_int.opp (dk_int.from_nat (to_nat s)))
      (dk_int.from_nat (to_nat (cons c s))).
