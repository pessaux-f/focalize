#NAME dk_opt.

(; options ;)
option : cc.uT -> cc.uT.
Option : cc.uT -> Type.
[ A : cc.uT ] cc.eT (option A) --> Option A.

None : A : cc.uT -> Option A.
Some : A : cc.uT -> cc.eT A -> Option A.

def call_by_value_option : A : cc.uT ->
                       R : cc.uT ->
                       (Option A -> cc.eT R) ->
                       Option A ->
                       cc.eT R.
[ A : cc.uT, R : cc.uT, f : Option A -> cc.eT R ]
    call_by_value_option _ R f (None A)
      --> f (None A)
[ A : cc.uT, R : cc.uT, f : Option A -> cc.eT R, a : cc.eT A ]
    call_by_value_option _ R f (Some A a)
      --> f (Some A a).


def match_option : A : cc.uT ->
               P : (Option A -> cc.uT) ->
               cc.eT (P (None A)) ->
               (a : cc.eT A -> cc.eT (P (Some A a))) ->
               o : Option A ->
               cc.eT (P o).
[A : cc.uT,
 P : Option A -> cc.uT,
 Hnone : cc.eT (P (None A)),
 Hsome : a : cc.eT A -> cc.eT (P (Some A a))]
    match_option _ P Hnone Hsome (None A) --> Hnone
[A : cc.uT,
 P : Option A -> cc.uT,
 Hnone : cc.eT (P (None A)),
 Hsome : a : cc.eT A -> cc.eT (P (Some A a)),
 a : cc.eT A]
    match_option _ P Hnone Hsome (Some A a) --> Hsome a.

def simple_match_option : A : cc.uT ->
                          return : cc.uT ->
                          cc.eT return ->
                          (a : cc.eT A -> cc.eT return) ->
                          o : Option A ->
                          cc.eT return
                        :=
                          A : cc.uT =>
                          return : cc.uT =>
                          match_option A (_x : cc.eT (option A) => return).
