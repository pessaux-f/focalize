#NAME zen.

(; Logic for Zenon Modulo ;)

def prop  : Type := dk_logic.Prop.
def proof : prop -> Type := dk_logic.eP.
def type  : Type := cc.uT.
def term  : type -> Type := cc.eT.
def arrow : type -> type -> type := cc.Arrow.
iota  : type.

(; Symbols ;)

def True  : prop := dk_logic.True.
def False : prop := dk_logic.False.

def not : prop -> prop := dk_logic.not.
def and : prop -> prop -> prop := dk_logic.and.
def or  : prop -> prop -> prop := dk_logic.or.
def imp : prop -> prop -> prop := dk_logic.imp.
def eqv : prop -> prop -> prop := dk_logic.eqv.

def forall : a : type -> (term a -> prop) -> prop := dk_logic.forall.
def exists : a : type -> (term a -> prop) -> prop := dk_logic.exists.

def foralltype : (type -> prop) -> prop := dk_logic.forall_type.
def existstype : (type -> prop) -> prop := dk_logic.exists_type.

def equal      : a : type -> term a -> term a -> prop := dk_logic.equal.
def triangle (x : prop) := x.

(; Definition of Proofs of Symbols ;)

(; The Sequent Type ;)

def seq : Type := proof False.

(; Law of eXcluded Middle ;)

xmid       : p : prop ->
	     z : prop ->
	     (proof p -> proof z) ->
	     (proof (not p) -> proof z) ->
	     proof z.

def nnpp (p : prop) (H1 : proof (not (not p))) : proof p
:= xmid p p
     (H2 : proof p => H2)
     (H3 : proof (not p) => H1 H3 p).

(; usefull lemmas to prove rules ;)

def true_intro : proof True
:= p : prop => x : proof p => x.

def lemme_contraposition (p : prop) (q : prop) (H1 : proof (imp p q)) :
    proof (imp (not q) (not p))
:= H2 : proof (not q) => H3 : proof p => H2 (H1 H3).

def lemme_equiv_1 (p : prop)
    	          (q : prop)
	          (H5 : proof q -> proof p)
	          (H2 : proof p -> proof (not q))
	          (HQ : proof q) :
    proof (not q)
:= H2 (H5 HQ).

def lemme_equiv_2 (p : prop)
	          (q : prop)
	          (H5 : proof q -> proof p)
	          (H2 : proof p -> proof (not q)) :
    proof (not q)
:= HQ : proof q => lemme_equiv_1 p q H5 H2 HQ HQ.

def lemme_equiv_3 (p : prop)
	          (q : prop)
	          (H5 : proof q -> proof p)
	          (H2 : proof p -> proof (not q))
	          (H4 : proof p -> proof q) :
    proof (not p)
:= lemme_contraposition p q H4 (lemme_equiv_2 p q H5 H2).

def lemme_equiv_4 (p : prop)
	          (q : prop)
	          (H5 : proof q -> proof p)
	          (H2 : proof p -> proof (not q))
	          (H4 : proof p -> proof q)
	          (H1 : proof (not p) -> proof (not (not q))) :
    proof (not (not q))
:= H1 (lemme_equiv_3 p q H5 H2 H4).

def lemme_notor_1 (p : prop) (q : prop) :
    proof p -> proof (or p q)
:= dk_logic.or_intro1 p q.

def lemme_notor_2 (p : prop) (q : prop) :
  proof q -> proof (or p q)
:= dk_logic.or_intro2 p q.

def lemme_notor_3 (p : prop)
	          (q : prop)
	          (H2 : proof (not (or p q))) :
    proof (not p)
:= lemme_contraposition p (or p q) (lemme_notor_1 p q) H2.

def lemme_notor_4 (p : prop)
	          (q : prop)
	          (H2 : proof (not (or p q))) :
    proof (not q)
:= lemme_contraposition q (or p q) (lemme_notor_2 p q) H2.

def lemme_notimply_1 (p : prop)
	             (q : prop)
	             (H2 : proof (not (imp p q))) :
    proof (not q)
:= H3 : proof q => H2 (H4 : proof p => H3).

def lemme_notimply_2 (p : prop)
	             (q : prop)
	             (H1 : proof p -> proof (not (not q)))
	             (H2 : proof (not (imp p q))) :
    proof (not p)
:= H3 : proof p => (H1 H3) (lemme_notimply_1 p q H2).

def lemme_notimply_3 (p : prop)
	             (q : prop)
	             (H3 : proof (not p)) :
    proof (imp p q)
:= H4 : proof p => H3 H4 q.

def lemme_notequiv_1 (p : prop)
                     (q : prop)
                     (H2 : proof p -> proof (not (not q)))
                     (H3 : proof (not (eqv p q))) :
    proof (not p)
:=
  HP : proof p
  => H2 HP (HQ : proof q
            => H3 (dk_logic.and_intro
                    (imp p q)
                    (imp q p)
                    (__ : proof p => HQ)
                    (__ : proof q => HP))).


(; LLproof Deduction Rules ;)

(; Rfalse ;)

def Rfalse (x : proof False) : seq := x.

(; Rnottrue ;)

def Rnottrue (H : proof (not True)) : seq
:= H true_intro.

(; Raxiom ;)

def Raxiom (p : prop) (H : proof p) (CH : proof (not p)) : seq
:= CH H.

(; Rnoteq ;)

def Rnoteq (a : type) (t : term a) (H1 : proof (not (equal a t t))) : seq
:= H1 (z : (term a -> prop) => (H2 : proof (z t) => H2)).

(; Reqsym ;)

def Reqsym (a : type)
           (t : term a)
           (u : term a)
           (H1 : proof (equal a t u))
           (H2 : proof (not (equal a u t))) :
    seq
:=
   H2 (z : (term a -> prop)
	    => H3 : proof (z u)
	       => H1 (x : term a
		      => (imp (z x) (z t)))
		     (H4 : proof (z t)
		      => H4)
		     H3).

(; Rcut ;)

def Rcut (p : prop) (H1 : proof p -> seq) (H2 : proof (not p) -> seq) :
    seq
:= H2 H1.

(; Rnotnot ;)

def Rnotnot (p : prop)
            (H1 : proof p -> seq)
            (H2 : proof (not (not p))) :
    seq
:= H2 H1.

(; Rand ;)

def Rand (p : prop)
         (q : prop)
         (H1 : proof p -> proof q -> seq)
         (H2 : proof (and p q)) :
    seq
:= H1 (dk_logic.and_elim1 p q H2) (dk_logic.and_elim2 p q H2).

(; Ror ;)

def Ror (p : prop)
        (q : prop)
        (H1 : proof p -> seq)
        (H2 : proof q -> seq)
        (H3 : proof (or p q)) :
    seq
:= dk_logic.or_elim p q False H3 H1 H2.

(; Rimply ;)

def Rimply (p : prop)
           (q : prop)
           (H1 : proof (not p) -> seq)
           (H2 : proof q -> seq)
           (H3 : proof (imp p q)) :
    seq
:= H1 (lemme_contraposition p q H3 H2).

(; Requiv ;)

def Requiv (p : prop)
           (q : prop)
           (H1 : proof (not p) -> proof (not q) -> seq)
           (H2 : proof p -> proof q -> seq)
           (H3 : proof (eqv p q)) :
    seq
:=
   lemme_equiv_4 p q
                         (dk_logic.and_elim2 (imp p q) (imp q p) H3)
                         H2
                           (dk_logic.and_elim1 (imp p q) (imp q p) H3)
                           H1
                             (lemme_equiv_2 p q
                                            (dk_logic.and_elim2 (imp p q) (imp q p) H3)
                                            H2).

(; Rnotand ;)

def Rnotand (p : prop)
            (q : prop)
            (H1 : proof (not p) -> seq)
            (H2 : proof (not q) -> seq)
            (H3 : proof (not (and p q))) :
    seq
:=
   H1 (H5 : proof p =>
               H2 (H6 : proof q =>
                   H3 (dk_logic.and_intro p q H5 H6))).

(; Rnotor ;)

def Rnotor (p : prop)
           (q : prop)
           (H1 : proof (not p) -> proof (not q) -> seq)
           (H2 : proof (not (or p q))) :
    seq
:= H1 (lemme_notor_3 p q H2) (lemme_notor_4 p q H2).

(; Rnotimply;)

def Rnotimply (p : prop)
              (q : prop)
              (H1 : proof p -> proof (not q) -> seq)
              (H2 : proof (not (imp p q))) :
    seq
:= H2 (lemme_notimply_3 p q (lemme_notimply_2 p q H1 H2)).

(; Rnotequiv ;)

def Rnotequiv (p : prop)
              (q : prop)
              (H1 : proof (not p) -> proof q -> seq)
              (H2 : proof p -> proof (not q) -> seq)
              (H3 : proof (not (eqv p q))) :
    seq
:=
   (HNP := lemme_notequiv_1 p q H2 H3
       => H3 (dk_logic.and_intro (imp p q) (imp q p)
                                          (HP : proof p => HNP HP q)
                                          (HQ : proof q => H1 HNP HQ p))).

(; Rex ;)

def Rex (a : type)
        (p : term a -> prop)
        (H1 : t : term a -> proof (p t) -> seq)
        (H2 : proof (exists a p)) :
    seq
:= H2 False H1.

(; Rall ;)

def Rall (a : type)
         (p : term a -> prop)
         (t : term a)
         (H1 : proof (p t) -> seq)
         (H2 : proof (forall a p)) :
    seq
:= H1 (H2 t).

(; Rnotex ;)

def Rnotex (a : type)
           (p : term a -> prop)
           (t : term a)
           (H1 : proof (not (p t)) -> seq)
           (H2 : proof (not (exists a p))) :
    seq
:=
   H1 (H4 : proof (p t)
            => H2 (z : prop
		   => H3 : (x : term a -> proof (p x) -> proof z)
		      => H3 t H4)).

(; Rnotall ;)

def Rnotall (a : type)
            (p : term a -> prop)
            (H1 : t : term a -> proof (not (p t)) -> seq)
            (H2 : proof (not (forall a p))) :
    seq
:= H2 (t : term a => nnpp (p t) (H1 t)).

(; Rextype ;)

def Rextype (p : type -> prop)
            (H1 : a : type -> proof (p a) -> seq)
            (H2 : proof (existstype p)) :
    seq
:= H2 False H1.

(; Ralltype ;)

def Ralltype (p : type -> prop)
             (a : type)
             (H1 : proof (p a) -> seq)
             (H2 : proof (foralltype p)) :
    seq
:= H1 (H2 a).

(; Rnotextype ;)

def Rnotextype (p : type -> prop)
               (a : type)
               (H1 : proof (not (p a)) -> seq)
               (H2 : proof (not (existstype p))) :
    seq
:=
   H1 (H4 : proof (p a)
            => (H2 (z : prop
		    => H3 : (b : type -> proof (p b) -> proof z)
		       => H3 a H4))).

(; Rnotalltype ;)

def Rnotalltype (p : type -> prop)
                (H1 : a : type -> proof (not (p a)) -> seq)
                (H2 : proof (not (foralltype p))) :
    seq
:= H2 (a : type => nnpp (p a) (H1 a)).

(; Rsubst ;)

def Rsubst (a : type)
           (p : term a -> prop)
           (t1 : term a)
           (t2 : term a)
           (H1 : proof (not (equal a t1 t2)) -> seq)
           (H2 : proof (p t2) -> seq)
           (H3 : proof (p t1)) :
    seq
:= H1 (H4 : proof (equal a t1 t2) => H2 (H4 p H3)).

def Rconglr (a : type)
            (p : term a -> prop)
            (t1 : term a)
            (t2 : term a)
            (H1 : proof (p t2) -> seq)
            (H2 : proof (p t1))
            (H3 : proof (equal a t1 t2)) :
    seq
:= H1 (H3 p H2).

def Rcongrl (a : type)
            (p : term a -> prop)
            (t1 : term a)
            (t2 : term a)
            (H1 : proof (p t2) -> seq)
            (H2 : proof (p t1))
            (H3 : proof (equal a t2 t1)) :
    seq
:=
   Rconglr a p t1 t2 H1 H2
      (H3
         (x : term a => equal a x t2)
         (q : (term a -> prop) =>
          H : proof (q t2) => H)).
