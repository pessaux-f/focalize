# 1 "directive_lexer.mll"
 
open Lexing ;;



(** {Rem} Not exported outside this module. *)
exception Directive_not_terminated ;;



type directive =
  | D_end
  | D_found of Parsetree.module_name
;;


let initial_string_buffer = String.create 256 ;;
let string_buff = ref initial_string_buffer
and string_index = ref 0
;;



let reset_string_buffer () =
  string_buff := initial_string_buffer ;
  string_index := 0
;;



let store_string_char c =
  if !string_index >= String.length !string_buff then begin
    let new_buff = String.create (String.length !string_buff * 2) in
      String.blit !string_buff 0
                  new_buff 0 (String.length !string_buff);
      string_buff := new_buff
  end;
  String.unsafe_set !string_buff !string_index c;
  incr string_index
;;



let get_stored_string () =
  let s = String.sub !string_buff 0 !string_index in
  string_buff := initial_string_buffer;
  s
;;


# 53 "directive_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\252\255\253\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\001\000\003\000\254\255\002\000\006\000\000\000\008\000\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\003\000\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\002\000\255\255\255\255\255\255\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\007\000\000\000\010\000\010\000\000\000\015\000\
    \015\000\015\000\015\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \007\000\000\000\008\000\010\000\013\000\011\000\015\000\000\000\
    \015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
    \000\000\014\000\000\000\014\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\006\000\010\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\007\000\004\000\
    \005\000\000\000\000\000\009\000\000\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\007\000\007\000\255\255\010\000\010\000\255\255\013\000\
    \013\000\015\000\015\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \007\000\255\255\007\000\010\000\012\000\010\000\013\000\255\255\
    \015\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\014\000\255\255\255\255\255\255\255\255\
    \255\255\013\000\255\255\015\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\009\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\006\000\000\000\
    \004\000\255\255\255\255\003\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\012\000\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec start lexbuf =
    __ocaml_lex_start_rec lexbuf 0
and __ocaml_lex_start_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 56 "directive_lexer.mll"
                        (
    reset_string_buffer () ;
    try
      lex_directive lexbuf ;
      let comp_unit = get_stored_string () in
      D_found comp_unit
    with Directive_not_terminated -> D_end )
# 164 "directive_lexer.ml"

  | 1 ->
# 63 "directive_lexer.mll"
                        (
    reset_string_buffer () ;
    try
      lex_directive lexbuf ;
      let comp_unit = get_stored_string () in
      D_found comp_unit
    with Directive_not_terminated -> D_end )
# 175 "directive_lexer.ml"

  | 2 ->
# 70 "directive_lexer.mll"
              ( D_end )
# 180 "directive_lexer.ml"

  | 3 ->
# 71 "directive_lexer.mll"
              ( start lexbuf )
# 185 "directive_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_start_rec lexbuf __ocaml_lex_state

and lex_directive lexbuf =
    __ocaml_lex_lex_directive_rec lexbuf 12
and __ocaml_lex_lex_directive_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 75 "directive_lexer.mll"
        (
    (* The directive is not terminated. *)
    raise Directive_not_terminated )
# 198 "directive_lexer.ml"

  | 1 ->
# 78 "directive_lexer.mll"
                     ( () )
# 203 "directive_lexer.ml"

  | 2 ->
# 79 "directive_lexer.mll"
      ( store_string_char (Lexing.lexeme_char lexbuf 0) ; 
	lex_directive lexbuf )
# 209 "directive_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_lex_directive_rec lexbuf __ocaml_lex_state

;;

