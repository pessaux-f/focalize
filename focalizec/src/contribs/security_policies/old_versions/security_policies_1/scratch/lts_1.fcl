use "basics";;
use "sets";;
use "ensembles_finis";;
open "basics";;
open "sets";;
open "ensembles_finis";;

type states_t = alias (Ensembles_Finis);;

species States =

    inherit Ensembles_Finis (Setoid);

end;;

type system ('state, 'label) =
    { states = Ensembles_finis ;
      initial_states = list ('state) ;
      labels = list ('label) ;
      transition_relation = 'state -> 'label -> 'state } ;;


species System (State is Setoid,
                States is Ensembles_finis (State),
                Initial_States is Ensembles_finis (State),
                Label is Setoid,
                Labels is Ensembles_finis (Label),
                Transition_Relation is
                  Ensembles_finis (State * Label * State)) =

    inherit Basic_object;

    representation = system (State, Label);

    property fsdcx : all x : Self, Self.states ;

    property determinist :
      all x y z : States, all l : Labels,
      ( est_element ((x, l, y), Self.state) /\ est_element ((x, l, z), 
      ( State!( = ) (Self.transition_relation (x, l), y) /\
        State!( = ) (Self.transition_relation (x, l), z) ) ->
      State!( = ) (y, z);

    property left_total :
      all x : State.states, all l : State.labels,
      ex y : State.states, States!( = ) (Self.transition_relation (x, l), y);

end;;
