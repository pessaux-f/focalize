open "basics";;
open "accesses";;
open "p_policies";;


(** Property-based access security policies *)


species Target_ac (S is Subject, O is Object, A is Access_mode,
                   Ac is Accesses (S, O, A)) =

  inherit Target, Accesses (S, O, A);

  signature accesses : Self -> Ac;

  property accesses_preserves_alpha :
    all t : Self, all s : S, all o : O, all a : A,
    alpha (t, s, o, a) = Ac!alpha (accesses (t), s, o, a);

  signature from_accesses : Ac -> Self;

  property from_accesses_preserves_alpha :
    all ac : Ac, all s : S, all o : O, all a : A,
    alpha (from_accesses (ac), s, o, a) = Ac!alpha (ac, s, o, a);

end;;


species Target_ac_by_list (S is Subject, O is Object, A is Access_mode,
                           Ac is Accesses (S, O, A)) =

  inherit Finite_target, Target_ac (S, O, A, Ac), Accesses_by_list (S, O, A);

  let accesses =
    let rec aux (t) =
      match t with
        | Empty -> Ac!empty
        | Cons (s, o, a, l) -> Ac!add (aux (l), s, o, a) in
    function t -> aux (t);

  proof of accesses_preserves_alpha = assumed; (* TODO *)

  local let rec aux_from_accesses (ac : Ac, acc : Self) =
    if Ac!equal (ac, Ac!empty) then acc
    else
      let h = Ac!get_one (ac) in
      match h with | (s, o, a) ->
      let t = Ac!release (ac, s, o, a) in
      aux_from_accesses (t, add (acc, s, o, a));

  let from_accesses (ac) = aux_from_accesses (ac, empty);

  proof of from_accesses_preserves_alpha = assumed; (* TODO *)

end;;


species P_policy_ac (S is Subject, O is Object, A is Access_mode,
                     Ac is Accesses (S, O, A),
                     T is Target_ac (S, O, A, Ac),
                     C is Configuration) =

  inherit P_policy (T, C);

end;;



(** Property-based access security policies with read and write accesses *)


species Access_mode_rw =

  inherit Access_mode;

  signature read : Self;
  signature write : Self;

end;;


species P_policy_ac_rw (S is Subject, O is Object, A is Access_mode_rw,
                        Ac is Accesses (S, O, A),
                        T is Target_ac (S, O, A, Ac),
                        C is Configuration) =

  inherit P_policy_ac (S, O, A, Ac, T, C);

end;;
