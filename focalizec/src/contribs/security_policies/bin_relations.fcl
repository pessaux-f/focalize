open "basics";;
open "sets";;
open "finite_sets_f";;
open "listes";;

(** entities of Binary_relations are binary relations *)

species Binary_relations(A is Setoid, B is Setoid) =

  inherit Setoid ;

  signature relation: Self -> A -> B -> bool;

  property relation_compatible_left : all r: Self, all a1 a2: A, all b: B,
    A!equal(a1, a2) -> (relation(r, a1, b) -> relation(r, a2, b));

  property relation_compatible_right : all r: Self, all a: A, all b1 b2: B,
    B!equal(b1, b2) -> (relation(r, a, b1) -> relation(r, a, b2));

  signature is_contained: Self -> Self -> bool ;

  property is_contained_spec: all r_1 r_2: Self, 
        is_contained(r_1, r_2) 
   <->  all a: A, all b: B, 
         relation(r_1, a, b) -> relation(r_2, a, b);

  let equal(x, y) = is_contained(x, y) && is_contained(y, x) ;

  theorem equal_spec :
    all r1 r2 : Self,
    equal (r1, r2) <-> (all a : A, all b : B,
                       relation (r1, a, b) <-> relation (r2, a, b))
  proof = by definition of equal property is_contained_spec ;

  proof of equal_reflexive = by property equal_spec;
  proof of equal_symmetric = by property equal_spec;
  proof of equal_transitive = by property equal_spec;

  signature empty: Self;

  let element = empty;

  (* TODO : aller chercher autres les proprietes dans temp/relations_mutable.fcl *)
  (* + union et intersection... *)

  logical let is_left_unique (r: Self) =
    all a1 a2 : A, all b : B,
    ( relation (r, a1, b) /\ relation (r, a2, b) ) -> A!equal (a1, a2);

  theorem is_left_unique_spec : all r: Self, 
   (all a1 a2 : A, all b : B,
     ( relation (r, a1, b) /\ relation (r, a2, b) ) -> A!equal (a1, a2))
   <-> is_left_unique (r)
  proof = by definition of is_left_unique;

(*** TODO : add spec to all def. *)


  logical let is_right_unique (r: Self) =
    all a : A, all b1 b2 : B,
    ( relation (r, a, b1) /\ relation (r, a, b2) ) -> B!equal (b1, b2);

  logical let is_left_total (r: Self) =
    all a : A, ex b : B, relation (r, a, b);

  logical let is_right_total (r: Self) =
    all b : B, ex a : A, relation (r, a, b);

(* TODO : a finir *)

end;;

species Composition_relations(A is Setoid, B is Setoid, C is Setoid, 
                              R_AB is Binary_relations(A, B),
                              R_BC is Binary_relations(B, C)) =
  inherit Binary_relations(A, C);

  signature compose_rel : R_AB -> R_BC -> Self;
  
  (* There is an incredible (ununderstandable) typing bug ! 
  property compose_rel_spec : 
  all r1: R_AB, all r2: R_BC, all a: A, all c: C, 
     relation(compose_rel(r1, r2), a, c)
     <-> (ex b: B, (R_AB!relation(r1, a, b) /\ R_BC!relation(r2, b, c))) 
  ;
  *)

end;;

species Internal_binary_relations(A is Setoid, L is Utils(A))=
  
  inherit Binary_relations(A, A);

  (* TODO : les autres proprietes *)


  logical let is_reflexive(r: Self) = 
     all x: A, relation(r, x, x);

  logical let is_transitive(r: Self) = 
     all x y z : A, (relation(r, x, y) /\ relation(r, y, z))
       -> relation(r, x, z) ;  


  
  signature rt_closure : Self -> Self;

  property rt_closure_spec : all r: Self, all a1 a2: A,
       relation(rt_closure(r), a1, a2) 
   <-> ( A!equal(a1, a2) \/
         (ex a3: A, (relation(r, a1, a3) /\ relation(rt_closure(r), a3, a2))));

  let rec rt_closure_aux(r: Self, a1: A, a2: A, l: list(A)) : bool =
   match l with
    | [] -> A!equal(a1, a2)
    | h::t -> relation(r, a1, h) && rt_closure_aux(r, h, a2, t)
   termination proof = structural l;

  theorem rt_closure_compatible_left: 
   all r: Self, all a1 a2 a3: A, all l: list(A),
   A!equal(a1, a2) -> rt_closure_aux(r, a1, a3, l) 
   -> rt_closure_aux(r, a2 , a3, l)
  proof = assumed;

  theorem rt_closure_aux_trans: all r: Self, all a1 a2 a3: A, all l1 l2: list(A),
     (rt_closure_aux(r, a1, a2, l1) && rt_closure_aux(r, a2, a3, l2))
     -> rt_closure_aux(r, a1, a3, L!append(l1, l2))
  proof = 
  <1>1 assume r: Self,
       assume a1 a2 a3: A,
       prove all l1 l2: list(A),
             (rt_closure_aux(r, a1, a2, l1) && rt_closure_aux(r, a2, a3, l2))
             -> rt_closure_aux(r, a1, a3, L!append(l1, l2))
       <2>1 prove all l2: list(A),
            (rt_closure_aux(r, a1, a2, []) && rt_closure_aux(r, a2, a3, l2))
            -> rt_closure_aux(r, a1, a3, L!append([], l2))
            <3>1 assume l2: list(A),
                 hypothesis H1: rt_closure_aux(r, a1, a2, []),
                 hypothesis H2: rt_closure_aux(r, a2, a3, l2),
                 prove rt_closure_aux(r, a1, a3, L!append([], l2))
                 <4>1 prove A!equal(a1, a2)
                      by hypothesis H1
                         definition of rt_closure_aux
                 <4>2 prove rt_closure_aux(r, a1, a3, l2)
                      by property rt_closure_compatible_left,
                                  A!equal_symmetric
                         hypothesis H2
                         step <4>1
                 <4>3 prove L!append([], l2) = l2
                      by property L!append_def
                 <4>f qed by step <4>2, <4>3
            <3>f conclude
       <2>2 prove 
                all h: A,
                all t: list(A),
                (all l2: list(A),
                 (rt_closure_aux(r, a1, a2, t) && rt_closure_aux(r, a2, a3, l2))
                 -> rt_closure_aux(r, a1, a3, L!append(t, l2)))
                ->
                (all l2: list(A),
                 (rt_closure_aux(r, a1, a2, h::t) 
                   && rt_closure_aux(r, a2, a3, l2))
                 -> rt_closure_aux(r, a1, a3, L!append(h::t, l2)))
            <3>1 assume h: A,
                 assume t: list(A),
                 hypothesis HI: (all l2: list(A),
                                (rt_closure_aux(r, a1, a2, t) 
                                 && rt_closure_aux(r, a2, a3, l2))
                                -> rt_closure_aux(r, a1, a3, L!append(t, l2))),
                 assume l2: list(A),
                 hypothesis H1: rt_closure_aux(r, a1, a2, h::t) ,
                 hypothesis H2: rt_closure_aux(r, a2, a3, l2),
                 prove rt_closure_aux(r, a1, a3, L!append(h::t, l2))
                 assumed
            <3>f conclude
       <2>f conclude
  <1>f conclude 
 ;




  theorem rt_closure_aux_exist: all r: Self, all a1 a2: A,
       relation(rt_closure(r), a1, a2) 
    <-> (ex l: list(A), rt_closure_aux(r, a1, a2, l))
   proof = assumed
;

  theorem rt_closure_is_reflexive : all r: Self,
    is_reflexive(rt_closure(r))
  proof = by definition of is_reflexive 
          property rt_closure_spec, relation_compatible_left,
                   A!equal_reflexive
  ;

  theorem rt_closure_is_transitive : all r: Self,
    is_transitive(rt_closure(r))
  proof = assumed;
(*
   <1>1 assume r: Self, 
        assume a1 a2 a3 :A,
        hypothesis H1: relation(rt_closure(r), a1, a2),
        hypothesis H2: relation(rt_closure(r), a2, a3),
        prove relation(rt_closure(r), a1, a3)
        <2>1 hypothesis He: A!equal(a1, a2),
             prove relation(rt_closure(r), a1, a3)
             by property A!equal_symmetric, relation_compatible_left
                hypothesis He, H2
        <2>2 hypothesis He: 
             (ex a4: A, (relation(r, a1, a4) 
                        /\ relation(rt_closure(r), a4, a2))),
             prove relation(rt_closure(r), a1, a3)
             <3>1 hypothesis Hhe: A!equal(a2, a3),
                  prove relation(rt_closure(r), a1, a3)
                  by property A!equal_symmetric, relation_compatible_right
                     hypothesis Hhe, H1
             <3>2 hypothesis Hhe: 
                  (ex a5: A, (relation(r, a2, a5) 
                          /\ relation(rt_closure(r), a5, a3))),
                  prove relation(rt_closure(r), a1, a3)
                  <4>1 assume a4: A, 
                       assume a5: A,
                       hypothesis Hhh1: relation(r, a1, a4) ,
                       hypothesis Hhh2: relation(rt_closure(r), a4, a2),
                       hypothesis Hhh3: relation(r, a2, a5) ,
                       hypothesis Hhh4: relation(rt_closure(r), a5, a3),
                       prove relation(rt_closure(r), a1, a3)
                       <5>1 
                  <4>f qed by step <4>1 
                              hypothesis He, Hhe
             <3>f qed by step <3>1, <3>2
                         property rt_closure_spec
                         hypothesis H2
        <2>f qed by step <2>1, <2>2
                    property rt_closure_spec
                    hypothesis H1
   <1>f qed by step <1>1
               definition of is_transitive
;
*)
 

(* pb de congruence de A!equal *)

(*  property rt_closure_is_reflexive : all r: Self,
    is_reflexive(rt_closure(r)) ;

  property rt_closure_is_transitive : all r: Self,
    is_transitive(rt_closure(r)) ;
*)
end;;

(*
species Relations_by_sets_of_pairs(A is Setoid, B is Setoid,
                                     T is Abstract_pairs(A, B),
                                     P is Finite_parts(T)) =

  inherit Binary_relations(A, B);

  representation = P;

  let set_as_relation(s: P): Self = s;

  let relation(r, a, b) = P!belongs(T!make(a, b), r);

  let is_contained(r_1, r_2) = P!is_contained(r_1, r_2);

  proof of is_contained_spec = 
    <1>1 assume r_1 r_2: Self, 
         prove is_contained(r_1, r_2) <-> 
           (all a: A, all b: B, 
              P!belongs(T!make(a, b), r_1) -> 
                   P!belongs(T!make(a, b), r_2))
         <2>1 hypothesis C: is_contained(r_1, r_2),
              prove all a: A, all b: B,
                P!belongs(T!make(a, b), r_1) ->
                  P!belongs(T!make(a, b), r_2)
              <3>1 assume a: A, assume b: B, 
                   hypothesis H: P!belongs(T!make(a, b), r_1),
                   prove P!belongs(T!make(a, b), r_2)
                   by hypothesis H, C 
                      definition of is_contained, relation
                      property P!is_contained_spec
              <3>f conclude
         <2>2 hypothesis I: all a: A, all b: B, 
                  (P!belongs(T!make(a, b), r_1) -> 
                           P!belongs(T!make(a, b), r_2)),
              prove is_contained(r_1, r_2)
              <3>1 prove all a: A, all b: B, 
                    P!belongs(T!make(a, b), r_1) -> 
                       P!belongs(T!make(a, b), r_2)
                   by hypothesis I
              <3>2 prove all t: T, P!belongs(t, r_1) -> P!belongs(t, r_2)
                   <4>1 assume t: T,
                        hypothesis H: P!belongs(t, r_1),
                        prove P!belongs(t, r_2)
                        <5>0 prove T!equal(t, T!make(T!first(t),
                                                     T!second(t)))
                             by property T!is_first, T!is_second, 
                                         T!equal_spec, 
                                         A!equal_reflexive,
                                         A!equal_symmetric,
                                         A!equal_transitive,
                                         B!equal_reflexive,
                                         B!equal_symmetric,
                                         B!equal_transitive
                        <5>1 prove P!belongs(T!make(T!first(t),
                                                    T!second(t)),
                                             r_1)
                             by hypothesis H 
                                step <5>0 
                                property P!belongs_left_substitution_rule
                        <5>2 prove P!belongs(T!make(T!first(t),
                                                    T!second(t)),
                                             r_2)
                             by step <5>1 hypothesis I
                        <5>f qed by step <5>0, <5>2
                                    property P!belongs_left_substitution_rule,
                                             T!equal_symmetric,
                                             T!equal_transitive

                   <4>f conclude
              <3>f qed by step <3>2 
                          property P!is_contained_spec
                          definition of relation, is_contained 
                   
         <2>f conclude
    <1>f qed by step <1>1 definition of relation, is_contained
    ;

end;;

(* (y a un truc qui compile pas) *)
(*
species Composition_relations_sets_of_pair(A is Setoid, 
                                           B is Setoid,
                                           T_AB is Abstract_pairs(A, B),
                                           P_AB is Finite_parts(T_AB), 
                                           C is Setoid,
                                           T_BC is Abstract_pairs(B, C),
                                           P_BC is Finite_parts(T_BC),
                                           R_AB is Relations_by_sets_of_pairs(A, B, T_AB, P_AB),
                                           R_BC is Relations_by_sets_of_pairs(B, C, T_BC, P_BC),
                                           T_AC is Abstract_pairs(A, C),
                                           P_AC is Finite_parts(T_AC)) =
inherit Relations_by_sets_of_pairs(A, C, T_AC, P_AC), Composition_relations(A, B, C, R_AB, R_BC);

(* Theo ... c est comme le code caml de li214 *)

end;;

*)


species Rel_over_by_sets(A is Setoid, P is Abstract_pairs(A, A),
                                          FP is Finite_parts(P)) =
  inherit Binary_rel_over(A),  Relations_by_sets_of_pairs(A, A, P, FP) ;

(*  let rt_closure = *)
end;;








*)