(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 - 2009 LIP6 and INRIA                               *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: num_capteur.fcl,v 1.10 2011-05-26 15:54:26 maarek Exp $ *)

open "basics";;
open "sets";;
open "orders";;
open "peano";;

(** Type somme : Numero du capteur de la sortie voteur *)
species Sp_capteur =

  inherit Setoid;

  (** Définition du type somme *)
  (** Capteur associé de l'entrée 1 *)
  signature capt_1 : Self;
  (** Capteur associé de l'entrée 2 *)
  signature capt_2 : Self;
  (** Capteur associé de l'entrée 3 *)
  signature capt_3 : Self;

  (** Each value of the species is inside the sum type *)
  property all_value:
    all e : Self,
      !equal (e, !capt_1) \/
      !equal (e, !capt_2) \/
      !equal (e, !capt_3);

  (** Each field of the sum type are different from the other one *)
  property all_field_different_0_1:
    ~ (!equal (!capt_1, !capt_2));
  property all_field_different_0_2:
    ~ (!equal (!capt_1, !capt_3));
  property all_field_different_1_2:
    ~ (!equal (!capt_2, !capt_3));

end
;;


species Imp_capteur (P is Peano) =

  inherit Sp_capteur;

  representation = P;

  let capt_1 : Self = P!zero;
  let capt_2 : Self = P!s (!capt_1);
  let capt_3 : Self = P!s (!capt_2);

  let equal (x : Self, y : Self) : bool = P!equal (x, y);
  let element = capt_1;

  proof of equal_transitive =
    by property P!equal_transitive definition of equal;
  proof of equal_symmetric =
    by property P!equal_symmetric definition of equal;
  proof of equal_reflexive =
    by property P!equal_reflexive definition of equal;

  proof of all_field_different_0_1 =
    by definition of capt_1, capt_2, equal
    property P!zero_is_not_successor
  ;

  proof of all_field_different_0_2 =
    by definition of capt_1, capt_3, equal
    property P!zero_is_not_successor
  ;

  proof of all_field_different_1_2 =
    by definition of capt_1, capt_2, capt_3, equal
    property P!zero_is_not_successor, P!succ_is_an_injection
  ;

  proof of all_value = assumed (* By construction *);

  let print (x : Self) : string =
    if !equal (x, !capt_1) then "capt_1" else
    if !equal (x, !capt_2) then "capt_2" else
    if !equal (x, !capt_3) then "capt_3" else "Erreur capteur";

end
;;

collection Coll_capteur =

  implement Imp_capteur (Coll_peano);

end
;;
