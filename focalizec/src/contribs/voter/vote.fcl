(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 - 2009 LIP6 and INRIA                               *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: vote.fcl,v 1.12 2011-05-26 15:54:26 maarek Exp $ *)

open "basics";;
open "sets";;
open "orders";;
open "gen_value";;
open "etat_vote";;
open "num_capteur";;
open "diag";;
open "pair";;
open "gen_vote";;

(** the 2oo3 voter *)
species
  Voteur
    (E is Sp_etat_vote, C is Sp_capteur, V is Gen_value, P is Diag_2oo3 (E, C)) =

  inherit Gen_voter (V, P);

  (* Shortcut to extract sensor from diagnosis *)
  let sensor (diag : P) : C =
    P!prj_a (diag)
  ;

  (* Shortcut to extract state from diagnosis *)
  let state (diag : P) : E =
    P!prj_b (diag)
  ;

  (* Functional definition of the majority vote                *)
  (* Vote with 3 equivalent values returns a perfect_match and *)
  (* the value of the first sensor.                            *)
  property vote_perfect :
    all v1 v2 v3 : V,
      (V!consistency_rule (v1, v2) /\
       V!consistency_rule (v2, v3) /\
       V!consistency_rule (v1, v3))
      ->
      ((value (voter (v1, v2, v3)) = v1) /\
       (diag (voter (v1, v2, v3)) = P!constr (C!capt_1, E!perfect_match)))
  ;

  (* Vote with One input is consistent with the two others which are mutually *)
  (* inconsistent.Returns a range_match with the faulty sensor and one of the *)
  (* 2 consistent values.                                                     *)
  property vote_match_c1 :
    all v1 v2 v3 : V,
      (~ V!consistency_rule (v1, v2) /\
       ~ V!consistency_rule (v1, v3) /\
       V!consistency_rule (v2, v3))
      ->
      ((value (voter (v1, v2, v3)) = v2) /\
       (diag (voter (v1, v2, v3)) = P!constr (C!capt_1, E!range_match)))
  ;

  property vote_match_c2 :
    all v1 v2 v3 : V,
      (~ V!consistency_rule (v1, v2) /\
       V!consistency_rule (v1, v3) /\
       ~ V!consistency_rule (v2, v3))
      ->
      ((value (voter (v1, v2, v3)) = v3) /\
       (diag (voter (v1, v2, v3)) = P!constr (C!capt_2, E!range_match)))
  ;

  property vote_match_c3 :
    all v1 v2 v3 : V,
      (V!consistency_rule (v1, v2) /\
       ~ V!consistency_rule (v1, v3) /\
       ~ V!consistency_rule (v2, v3))
      ->
      ((value (voter (v1, v2, v3)) = v1) /\
       (diag (voter (v1, v2, v3)) = P!constr (C!capt_3, E!range_match)))
  ;

  (* Vote with 2 values different from the 2 other but one is consistent *)
  (* returns a partial_match with the healthy sensor and its the value   *)
  property vote_partial_c1 :
    all v1 v2 v3 : V,
      (V!consistency_rule (v1, v2) /\
       V!consistency_rule (v1, v3) /\
       ~ V!consistency_rule (v2, v3)) ->
      ((value (voter (v1, v2, v3)) = v1) /\
       (diag (voter (v1, v2, v3)) = P!constr (C!capt_1, E!partial_match)))
  ;

  property vote_partial_c2 :
    all v1 v2 v3 : V,
      (V!consistency_rule (v1, v2) /\
       ~ V!consistency_rule (v1, v3) /\
       V!consistency_rule (v2, v3)) ->
      ((value (voter (v1, v2, v3)) = v2) /\
       (diag (voter (v1, v2, v3)) = P!constr (C!capt_2, E!partial_match)))
  ;

  property vote_partial_c3 :
    all v1 v2 v3 : V,
      (~ V!consistency_rule (v1, v2) /\
       V!consistency_rule (v1, v3) /\
       V!consistency_rule (v2, v3)) ->
      ((value (voter (v1, v2, v3)) = v3) /\
       (diag (voter (v1, v2, v3)) = P!constr (C!capt_3, E!partial_match)))
  ;

  (* Vote with 3 inconstent values returns a no_match. sensor has *)
  (* no sense here                                                *)
  property vote_no_match :
    all v1 v2 v3 : V,
      (~ V!consistency_rule (v1, v2) /\
       ~ V!consistency_rule (v1, v3) /\
       ~ V!consistency_rule (v2, v3)) ->
      (diag (voter (v1, v2, v3)) = P!constr (C!capt_1, E!no_match))
  ;

  (* Propriétés du voteur *)
  (* Le voteur ne doit retourner qu'un des quatre Ã©tats *)
  theorem t1 :
  all v1 v2 v3 : V,
    E!equal (state (diag (voter (v1, v2, v3))), E!no_match) \/
    E!equal (state (diag (voter (v1, v2, v3))), E!range_match) \/
    E!equal (state (diag (voter (v1, v2, v3))), E!partial_match) \/
    E!equal (state (diag (voter (v1, v2, v3))), E!perfect_match)
  proof = by  property E!all_value;

  (* le voteur ne doit retourner qu'un des trois numÃ©ros de capteur *)
  theorem t2 : all v1 v2 v3 : V,
    C!equal (sensor (diag (voter (v1, v2, v3))), C!capt_1) \/
    C!equal (sensor (diag (voter (v1, v2, v3))), C!capt_2) \/
    C!equal (sensor (diag (voter (v1, v2, v3))), C!capt_3)
  proof = by property C!all_value;

  proof of voter_returns_an_input_value =
  <1>1
    assume
      va vb vc : V,
    prove
       ((value (voter (va, vb, vc)) = va)
     \/ (value (voter (va, vb, vc)) = vb)
     \/ (value (voter (va, vb, vc)) = vc)
     \/ (~ (P!valid (diag (voter (va, vb, vc))))))

    <2>1
      hypothesis
        H1: V!consistency_rule (va, vb),
      prove
       ((value (voter (va, vb, vc)) = va)
     \/ (value (voter (va, vb, vc)) = vb)
     \/ (value (voter (va, vb, vc)) = vc)
     \/ (~ (P!valid (diag (voter (va, vb, vc))))))

       <3>1
       hypothesis
         H11: V!consistency_rule (vb, vc),
       prove
         ((value (voter (va, vb, vc)) = va)
       \/ (value (voter (va, vb, vc)) = vb)
       \/ (value (voter (va, vb, vc)) = vc))

         <4>1
         hypothesis
           H111: V!consistency_rule (va, vc),
         prove (value (voter (va, vb, vc)) = va)
         by hypothesis H1, H11, H111 property vote_perfect
         <4>2
         hypothesis H112: ~ (V!consistency_rule (va, vc)),
         prove (value (voter (va, vb, vc)) = vb)
         by hypothesis H1, H11, H112 property vote_partial_c2
         <4>f conclude

       <3>2
       hypothesis
         H12: ~ (V!consistency_rule (vb, vc)),
       prove
         ((value (voter (va, vb, vc)) = va)
       \/ (value (voter (va, vb, vc)) = vb)
       \/ (value (voter (va, vb, vc)) = vc))

         <4>1
         hypothesis
           H121: V!consistency_rule (va, vc),
         prove (value (voter (va, vb, vc)) = va)
         by hypothesis H1, H12, H121 property vote_partial_c1
         <4>2
         hypothesis
           H122: ~ (V!consistency_rule (va, vc)),
         prove (value (voter (va, vb, vc)) = va)
         by hypothesis H1, H12, H122 property vote_match_c3
         <4>f conclude

     <3>f conclude

     <2>2
      hypothesis
        H2: ~ (V!consistency_rule (va, vb)),
      prove
        ((value (voter (va, vb, vc)) = va)
      \/ (value (voter (va, vb, vc)) = vb)
      \/ (value (voter (va, vb, vc)) = vc)
      \/ (~ (P!valid (diag (voter (va, vb, vc))))))

       <3>1
       hypothesis
         H21: V!consistency_rule (vb, vc),
       prove
         ((value (voter (va, vb, vc)) = va)
       \/ (value (voter (va, vb, vc)) = vb)
       \/ (value (voter (va, vb, vc)) = vc))

         <4>1
         hypothesis
           H211: V!consistency_rule (va, vc),
         prove (value (voter (va, vb, vc)) = vc)
         by hypothesis H2, H21, H211 property vote_partial_c3
         <4>2
         hypothesis
           H212: ~ (V!consistency_rule (va, vc)),
         prove (value (voter (va, vb, vc)) = vb)
         by hypothesis H2, H21, H212 property vote_match_c1
         <4>f conclude

       <3>2
       hypothesis
         H22: ~ (V!consistency_rule (vb, vc)),
       prove
         ((value (voter (va, vb, vc)) = va)
       \/ (value (voter (va, vb, vc)) = vb)
       \/ (value (voter (va, vb, vc)) = vc)
       \/ (~ (P!valid (diag (voter (va, vb, vc))))))
         <4>1
         hypothesis
           H221: V!consistency_rule (va, vc),
         prove (value (voter (va, vb, vc)) = vc)
         by hypothesis H2, H22, H221 property vote_match_c2
         <4>2
         hypothesis
           H222: ~ (V!consistency_rule (va, vc)),
         prove (~ (P!valid (diag (voter (va, vb, vc)))))
           <5>1 prove (diag (voter (va, vb, vc)) = P!constr (C!capt_1, E!no_match))
           by hypothesis H2, H22, H222 property vote_no_match
           <5>2 prove (E!equal (state (diag (voter (va, vb, vc))), E!no_match))
           by step <5>1 definition of state property P!prj_b_is_snd_of_pair
           <5>f qed by step <5>2 definition of state
                    property P!no_match_is_invalid
         <4>f conclude

       <3>f conclude

     <2>f conclude

  <1>f conclude;



  (* Proof by case on the consistency between inputs *)
  proof of voter_independant_from_order_v1_v2 =
  <1>1
    assume
      va vb vc : V,
    prove
      (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
       compatible (voter (va, vb, vc), voter (vc, va, vb)))

    <2>1
      hypothesis
         H1: V!consistency_rule (va, vb),
      prove
         (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
          compatible (voter (va, vb, vc), voter (vc, va, vb)))

      <3>1
        hypothesis H11: V!consistency_rule (va, vc),
        prove
          (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
           compatible (voter (va, vb, vc), voter (vc, va, vb)))

        <4>1
          hypothesis H111: V!consistency_rule (vb, vc),
          prove
            (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
             compatible (voter (va, vb, vc), voter (vc, va, vb)))

          <5>1 prove (value (voter (va, vb, vc)) = va)
          by hypothesis H1, H11, H111
             property vote_perfect
          <5>2 prove (value (voter (vb, va, vc)) = vb)
          by hypothesis H1, H11, H111
             property vote_perfect, consistency_rule_is_symmetric
          <5>3 prove (value (voter (vc, va, vb)) = vc)
          by hypothesis H1, H11, H111
             property vote_perfect, consistency_rule_is_symmetric

          <5>4 prove
            (diag (voter (va, vb, vc)) = P!constr (C!capt_1, E!perfect_match))
          by hypothesis H1, H11, H111 property vote_perfect
          <5>5 prove (P!valid (diag (voter (va, vb, vc))))
          by step <5>4 property P!perfect_match_is_valid, P!prj_b_is_snd_of_pair

          <5>6 prove
            (diag (voter (vb, va, vc)) = P!constr (C!capt_1, E!perfect_match))
          by hypothesis H1, H11, H111
          property vote_perfect, consistency_rule_is_symmetric
          <5>7 prove (P!valid (diag (voter (vb, va, vc))))
          by step <5>6 property P!perfect_match_is_valid, P!prj_b_is_snd_of_pair

          <5>8 prove
            (diag (voter (vc, va, vb)) = P!constr (C!capt_1, E!perfect_match))
          by hypothesis H1, H11, H111
          property vote_perfect, consistency_rule_is_symmetric
          <5>9 prove (P!valid (diag (voter (vc, va, vb))))
          by step <5>8 property P!perfect_match_is_valid, P!prj_b_is_snd_of_pair

          <5>f
          qed by step <5>1, <5>2, <5>3, <5>5, <5>7, <5>9
                 definition of compatible
                 hypothesis H1, H11

        <4>2
          hypothesis
            H112: ~ (V!consistency_rule (vb, vc)),
          prove
            (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
             compatible (voter (va, vb, vc), voter (vc, va, vb)))

            <5>1 prove (value (voter (va, vb, vc)) = va)
            by hypothesis H1, H11, H112  property vote_partial_c1
            <5>2 prove (value (voter (vb, va, vc)) = va)
            by hypothesis H1, H11, H112
               property vote_partial_c2, consistency_rule_is_symmetric
            <5>3 prove (value (voter (vc, va, vb)) = va)
            by hypothesis H1, H11, H112
               property vote_partial_c2, consistency_rule_is_symmetric

            <5>4 prove
             (diag (voter (va, vb, vc)) = P!constr (C!capt_1, E!partial_match))
            by hypothesis H1, H11, H112 property vote_partial_c1
            <5>5 prove (P!valid (diag (voter (va, vb, vc))))
            by step <5>4 property P!partial_match_is_valid, P!prj_b_is_snd_of_pair

            <5>6 prove
            (diag (voter (vb, va, vc)) = P!constr (C!capt_2, E!partial_match))
            by hypothesis H1, H11, H112
            property vote_partial_c2, consistency_rule_is_symmetric
            <5>7 prove (P!valid (diag (voter (vb, va, vc))))
            by step <5>6 property P!partial_match_is_valid, P!prj_b_is_snd_of_pair

            <5>8 prove
            (diag (voter (vc, va, vb)) = P!constr (C!capt_2, E!partial_match))
            by hypothesis H1, H11, H112
            property vote_partial_c2, consistency_rule_is_symmetric
            <5>9 prove (P!valid (diag (voter (vc, va, vb))))
            by step <5>8 property P!partial_match_is_valid, P!prj_b_is_snd_of_pair

           <5>f qed by step <5>1, <5>2, <5>3, <5>5, <5>7, <5>9
               property  V!consistency_rule_reflexive
               definition of compatible

        <4>f qed by step <4>1, <4>2 property compatible

      <3>2
        hypothesis
          H12: ~ (V!consistency_rule (va, vc)),
        prove
          (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
           compatible (voter (va, vb, vc), voter (vc, va, vb)))

        <4>1
          hypothesis
            H121: V!consistency_rule (vb, vc),
          prove
            (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
             compatible (voter (va, vb, vc), voter (vc, va, vb)))
          <5>1 prove (value (voter (va, vb, vc)) = vb)
          by hypothesis H1, H12, H121  property vote_partial_c2
          <5>2 prove (value (voter (vb, va, vc)) = vb)
          by hypothesis H1, H12, H121
             property vote_partial_c1, consistency_rule_is_symmetric
          <5>3 prove (value (voter (vc, va, vb)) = vb)
          by hypothesis H1, H12, H121
             property vote_partial_c3, consistency_rule_is_symmetric

          <5>4 prove
          (diag (voter (va, vb, vc)) = P!constr (C!capt_2, E!partial_match))
          by hypothesis H1, H12, H121 property vote_partial_c2
          <5>5 prove (P!valid (diag (voter (va, vb, vc))))
            by step <5>4 property P!partial_match_is_valid, P!prj_b_is_snd_of_pair

          <5>6 prove
          (diag (voter (vb, va, vc)) = P!constr (C!capt_1, E!partial_match))
           by hypothesis H1, H12, H121
           property vote_partial_c1, consistency_rule_is_symmetric
           <5>7 prove (P!valid (diag (voter (vb, va, vc))))
           by step <5>6 property P!partial_match_is_valid, P!prj_b_is_snd_of_pair

          <5>8 prove
          (diag (voter (vc, va, vb)) = P!constr (C!capt_3, E!partial_match))
           by hypothesis H1, H12, H121
           property vote_partial_c3, consistency_rule_is_symmetric
          <5>9 prove (P!valid (diag (voter (vc, va, vb))))
           by step <5>8 property P!partial_match_is_valid, P!prj_b_is_snd_of_pair
          <5>f qed by step <5>1, <5>2, <5>3, <5>5, <5>7, <5>9
             property V!consistency_rule_reflexive
             definition of compatible

        <4>2
          hypothesis
            H122: ~ (V!consistency_rule (vb, vc)),
          prove
            (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
             compatible (voter (va, vb, vc), voter (vc, va, vb)))
          <5>1 prove (value (voter (va, vb, vc)) = va)
          by hypothesis H1, H12, H122
             property vote_match_c3, consistency_rule_is_symmetric
          <5>2 prove (value (voter (vb, va, vc)) = vb)
          by hypothesis H1, H12, H122
             property vote_match_c3, consistency_rule_is_symmetric
          <5>3 prove (value (voter (vc, va, vb)) = va)
          by hypothesis H1, H12, H122
             property vote_match_c1, consistency_rule_is_symmetric

          <5>4 prove
          (diag (voter (va, vb, vc)) = P!constr (C!capt_3, E!range_match))
          by hypothesis H1, H12, H122
          property vote_match_c3, consistency_rule_is_symmetric
          <5>5 prove (P!valid (diag (voter (va, vb, vc))))
            by step <5>4 property P!range_match_is_valid, P!prj_b_is_snd_of_pair

          <5>6 prove
          (diag (voter (vb, va, vc)) = P!constr (C!capt_3, E!range_match))
           by hypothesis H1, H12, H122
           property vote_match_c3, consistency_rule_is_symmetric
           <5>7 prove (P!valid (diag (voter (vb, va, vc))))
           by step <5>6 property P!range_match_is_valid, P!prj_b_is_snd_of_pair

          <5>8 prove
          (diag (voter (vc, va, vb)) = P!constr (C!capt_1, E!range_match))
           by hypothesis H1, H12, H122
           property vote_match_c1, consistency_rule_is_symmetric
          <5>9 prove (P!valid (diag (voter (vc, va, vb))))
           by step <5>8 property P!range_match_is_valid, P!prj_b_is_snd_of_pair

          <5>f qed by step <5>1, <5>2, <5>3, <5>5, <5>7, <5>9
               hypothesis H1
               property V!consistency_rule_reflexive
               definition of compatible

        <4>f qed by step <4>1, <4>2 property compatible

      <3>f qed by step <3>1, <3>2 property compatible

    <2>2
      hypothesis
        H2: ~ (V!consistency_rule (va, vb)),
      prove
        (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
         compatible (voter (va, vb, vc), voter (vc, va, vb)))

      <3>1 hypothesis H21: (V!consistency_rule (va, vc)),
        prove (compatible (voter (va, vb, vc), voter (vb, va, vc))
            /\ compatible (voter (va, vb, vc), voter (vc, va, vb)))

        <4>1
        hypothesis
          H211: (V!consistency_rule (vb, vc)),
        prove
          (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
           compatible (voter (va, vb, vc), voter (vc, va, vb)))

         <5>1 prove ~ (V!consistency_rule (vb, va))
           <6>1 prove V!consistency_rule (vb, va) -> V!consistency_rule (va, vb)
            by property V!consistency_rule_symmetric
           <6>f qed by step <6>1 hypothesis H2

         <5>2 prove (value (voter (va, vb, vc)) = vc)
           by hypothesis H2, H21, H211 property vote_partial_c3
         <5>3 prove (value (voter (vb, va, vc)) = vc)
           by hypothesis H21, H211 step <5>1 property vote_partial_c3
         <5>4 prove (value (voter (vc, va, vb)) = vc)
           by hypothesis H2, H21, H211
              property vote_partial_c1, consistency_rule_is_symmetric
         <5>5 prove
          (diag (voter (va, vb, vc)) = P!constr (C!capt_3, E!partial_match))
          by hypothesis H2, H21, H211 property vote_partial_c3
         <5>6 prove (P!valid (diag (voter (va, vb, vc))))
           by step <5>5 property P!partial_match_is_valid, P!prj_b_is_snd_of_pair

         <5>7 prove
         (diag (voter (vb, va, vc)) = P!constr (C!capt_3, E!partial_match))
          by hypothesis H21, H211 step <5>1 property vote_partial_c3
         <5>8 prove (P!valid (diag (voter (vb, va, vc))))
          by step <5>7 property P!partial_match_is_valid, P!prj_b_is_snd_of_pair

         <5>9 prove
         (diag (voter (vc, va, vb)) = P!constr (C!capt_1, E!partial_match))
          by hypothesis H2, H21, H211
          property vote_partial_c1, consistency_rule_is_symmetric
         <5>10 prove (P!valid (diag (voter (vc, va, vb))))
          by step <5>9 property P!partial_match_is_valid, P!prj_b_is_snd_of_pair

         <5>f qed by step  <5>2, <5>3, <5>4, <5>6, <5>8, <5>10
           property V!consistency_rule_reflexive
           definition of compatible

        <4>2
        hypothesis
          H212: ~ (V!consistency_rule (vb, vc)),
        prove
          (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
           compatible (voter (va, vb, vc), voter (vc, va, vb)))
         <5>1 prove ~ (V!consistency_rule (vb, va))
           <6>1 prove V!consistency_rule (vb, va) -> V!consistency_rule (va, vb)
            by property V!consistency_rule_symmetric
           <6>f qed by step <6>1 hypothesis H2
         <5>2 prove (value (voter (va, vb, vc)) = vc)
           by hypothesis H2, H21, H212 property vote_match_c2
         <5>3 prove (value (voter (vb, va, vc)) = va)
           by hypothesis H21, H212 step <5>1 property vote_match_c1
         <5>4 prove ~ (V!consistency_rule (vc, vb))
           <6>1 prove V!consistency_rule (vc, vb) -> V!consistency_rule (vb, vc)
            by property V!consistency_rule_symmetric
           <6>f qed by step <6>1 hypothesis H212
         <5>5 prove (value (voter (vc, va, vb)) = vc)
           by hypothesis H2, H21 step <5>4
              property vote_match_c3, consistency_rule_is_symmetric

         <5>6 prove
          (diag (voter (va, vb, vc)) = P!constr (C!capt_2, E!range_match))
           by hypothesis H2, H21, H212 property vote_match_c2
         <5>7 prove (P!valid (diag (voter (va, vb, vc))))
           by step <5>6 property P!range_match_is_valid, P!prj_b_is_snd_of_pair

         <5>8 prove
         (diag (voter (vb, va, vc)) = P!constr (C!capt_1, E!range_match))
          by hypothesis H21, H212 step <5>1 property vote_match_c1
         <5>9 prove (P!valid (diag (voter (vb, va, vc))))
          by step <5>8 property P!range_match_is_valid, P!prj_b_is_snd_of_pair

         <5>10 prove
         (diag (voter (vc, va, vb)) = P!constr (C!capt_3, E!range_match))
          by hypothesis H2, H21 step <5>4
          property vote_match_c3, consistency_rule_is_symmetric
         <5>11 prove (P!valid (diag (voter (vc, va, vb))))
          by step <5>10 property P!range_match_is_valid, P!prj_b_is_snd_of_pair


         <5>f qed by step <5>2, <5>3, <5>5, <5>7, <5>9, <5>11
         hypothesis H21
         property consistency_rule_is_symmetric, V!consistency_rule_reflexive
         definition of compatible

        <4>f qed by step <4>1, <4>2 property compatible

      <3>2
        hypothesis
          H22: ~ (V!consistency_rule (va, vc)),
        prove
          (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
           compatible (voter (va, vb, vc), voter (vc, va, vb)))

        <4>1
        hypothesis
          H221: (V!consistency_rule (vb, vc)),
        prove
          (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
           compatible (voter (va, vb, vc), voter (vc, va, vb)))

         <5>1 prove ~ (V!consistency_rule (vb, va))
           <6>1 prove V!consistency_rule (vb, va) -> V!consistency_rule (va, vb)
            by property V!consistency_rule_symmetric
           <6>f qed by step <6>1 hypothesis H2
         <5>2 prove (value (voter (va, vb, vc)) = vb)
           by hypothesis H2, H22, H221 property vote_match_c1
         <5>3 prove (value (voter (vb, va, vc)) = vc)
           by hypothesis H22, H221 step <5>1 property vote_match_c2
         <5>4 prove ~ (V!consistency_rule (vc, va))
           <6>1 prove V!consistency_rule (vc, va) -> V!consistency_rule (va, vc)
            by property V!consistency_rule_symmetric
           <6>f qed by step <6>1 hypothesis H22
         <5>5 prove (value (voter (vc, va, vb)) = vb)
           by hypothesis H2, H221 step <5>4
              property vote_match_c2, consistency_rule_is_symmetric

         <5>6 prove
          (diag (voter (va, vb, vc)) = P!constr (C!capt_1, E!range_match))
           by hypothesis H2, H22, H221 property vote_match_c1
         <5>7 prove (P!valid (diag (voter (va, vb, vc))))
           by step <5>6 property P!range_match_is_valid, P!prj_b_is_snd_of_pair

         <5>8 prove
         (diag (voter (vb, va, vc)) = P!constr (C!capt_2, E!range_match))
          by hypothesis H22, H221 step <5>1 property vote_match_c2
         <5>9 prove (P!valid (diag (voter (vb, va, vc))))
          by step <5>8 property P!range_match_is_valid, P!prj_b_is_snd_of_pair

         <5>10 prove
         (diag (voter (vc, va, vb)) = P!constr (C!capt_2, E!range_match))
          by hypothesis H2, H221 step <5>4
          property vote_match_c2, consistency_rule_is_symmetric
         <5>11 prove (P!valid (diag (voter (vc, va, vb))))
          by step <5>10 property P!range_match_is_valid, P!prj_b_is_snd_of_pair


         <5>f qed by step <5>2, <5>3, <5>5, <5>7, <5>9, <5>11 hypothesis H221
              property V!consistency_rule_reflexive
              definition of compatible

        <4>2
        hypothesis
          H222: ~ (V!consistency_rule (vb, vc)),
        prove
          (compatible (voter (va, vb, vc), voter (vb, va, vc)) /\
           compatible (voter (va, vb, vc), voter (vc, va, vb)))

          <5>1 prove ~ (V!consistency_rule (vb, va))
           <6>1 prove V!consistency_rule (vb, va) -> V!consistency_rule (va, vb)
            by property V!consistency_rule_symmetric
           <6>f qed by step <6>1 hypothesis H2
          <5>2 prove ~ (V!consistency_rule (vc, va))
           <6>1 prove V!consistency_rule (vc, va) -> V!consistency_rule (va, vc)
            by property V!consistency_rule_symmetric
           <6>f qed by step <6>1 hypothesis H22
          <5>3 prove ~ (V!consistency_rule (vc, vb))
           <6>1 prove V!consistency_rule (vc, vb) -> V!consistency_rule (vb, vc)
            by property V!consistency_rule_symmetric
           <6>f qed by step <6>1 hypothesis H222

          <5>4 prove (diag (voter (va, vb, vc)) = P!constr (C!capt_1, E!no_match))
          by hypothesis H2, H22, H222 property vote_no_match
          <5>5 prove (E!equal (P!prj_b (diag (voter (va, vb, vc))), E!no_match))
          by step <5>4 property P!prj_b_is_snd_of_pair
          <5>51 prove ~ (P!valid (diag (voter (va, vb, vc))))
          by step <5>5 property P!no_match_is_invalid

          <5>6 prove (diag (voter (vb, va, vc)) = P!constr (C!capt_1, E!no_match))
          by hypothesis H22, H222 step <5>1 property vote_no_match
          <5>7 prove (E!equal (P!prj_b (diag (voter (vb, va, vc))), E!no_match))
          by step <5>6 property P!prj_b_is_snd_of_pair
          <5>71 prove ~ (P!valid (diag (voter (vb, va, vc))))
          by step <5>7 property P!no_match_is_invalid

          <5>8 prove (diag (voter (vc, va, vb)) = P!constr (C!capt_1, E!no_match))
          by hypothesis H2 step <5>2, <5>3 property vote_no_match
          <5>9 prove (E!equal (P!prj_b (diag (voter (vc, va, vb))), E!no_match))
          by step <5>8 property P!prj_b_is_snd_of_pair
          <5>91 prove ~ (P!valid (diag (voter (vc, va, vb))))
          by step <5>9 property P!no_match_is_invalid

          <5>f qed by step <5>51, <5>71, <5>91
              definition of compatible

        <4>f qed by step <4>1, <4>2 property compatible

      <3>f qed by step <3>1, <3>2 property compatible

    <2>f qed by step <2>1, <2>2 property compatible

  <1>f qed by step <1>1 property compatible
  ;

end
;;

species
  Imp_vote
    (E is Sp_etat_vote, C is Sp_capteur, V is Gen_value, P is Diag_2oo3 (E, C)) =

  inherit Voteur (E, C, V, P);

  (* il faut bien mettre quelque chose !!!*)
  representation = unit;

  let voter (v1 : V, v2 : V, v3 : V) : V * P =
    let c1 = V!consistency_rule (v1, v2) in
    let c2 = V!consistency_rule (v1, v3) in
    let c3 = V!consistency_rule (v2, v3) in
    if c1 then
      if c2 then
        if c3 then
          (v1, P!constr (C!capt_1, E!perfect_match))
        else
          (v1, P!constr (C!capt_1, E!partial_match))
      else
        if c3 then
          (v2, P!constr (C!capt_2, E!partial_match))
        else
          (v1, P!constr (C!capt_3, E!range_match))
    else
      if c2 then
        if c3 then
          (v3, P!constr (C!capt_3, E!partial_match))
        else
          (v3, P!constr (C!capt_2, E!range_match))
     else
       if c3 then
         (v2, P!constr (C!capt_1, E!range_match))
       else
         (v1, P!constr (C!capt_1, E!no_match))
  ;

  proof of vote_perfect = assumed (* exhausted search space *)
    (*ASSUMED by property V!equal_reflexive, P!equal_reflexive *)
    (*ASSUMED    definition of voter, diag, value *)
  ;


  proof of vote_match_c1 = assumed (* exhausted search space *)
    (*ASSUMED by property V!equal_reflexive, P!equal_reflexive *)
    (*ASSUMED    definition of voter, diag, value *)
  ;

  proof of vote_match_c2 = assumed (* exhausted search space *)
    (*ASSUMED by property V!equal_reflexive, P!equal_reflexive *)
    (*ASSUMED    definition of voter, diag, value *)
  ;

  proof of vote_match_c3 = assumed (* exhausted search space *)
    (*ASSUMED by property V!equal_reflexive, P!equal_reflexive *)
    (*ASSUMED    definition of voter, diag, value *)
  ;

  proof of vote_partial_c1 = assumed (* exhausted search space *)
    (*ASSUMED by property V!equal_reflexive, P!equal_reflexive *)
    (*ASSUMED    definition of voter, diag, value *)
  ;

  proof of vote_partial_c2 = assumed (* exhausted search space *)
    (*ASSUMED by property V!equal_reflexive, P!equal_reflexive *)
    (*ASSUMED    definition of voter, diag, value *)
  ;

  proof of vote_partial_c3 = assumed (* exhausted search space *)
    (*ASSUMED by property V!equal_reflexive, P!equal_reflexive *)
    (*ASSUMED    definition of voter, diag, value *)
  ;

  proof of vote_no_match = assumed (* exhausted search space *)
    (*ASSUMED by property V!equal_reflexive, P!equal_reflexive *)
    (*ASSUMED    definition of voter, diag, value *)
  ;

  proof of voter_returns_an_input_value = assumed (* exhausted search space *)
    (*ASSUMED by property V!equal_reflexive *)
    (*ASSUMED    definition of voter, value *)
  ;

end
;;
