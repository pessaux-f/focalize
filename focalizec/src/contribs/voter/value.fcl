(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 - 2009 LIP6 and INRIA                               *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: value.fcl,v 1.13 2011-05-26 15:54:26 maarek Exp $ *)

open "basics";;
open "sets";;
open "orders";;
open "gen_value";;
open "basic_type";;


(** General type of values to vote. tol parameter represents the
tolerance under which two value of the species are considerate as
equal *)
species Sp_value_tol (T is Gen_basic_type_tol, tol in T) =

  inherit Gen_value;
  representation = T;

  (** Définition de l'égalité entre valeurs *)
  (* Connaissant, abs (a): *)
  (*   a > 0 ->  abs (a) = a *)
  (*   not (a > 0) -> abs (a) = -a   *)
  (* Definition abstraite de l'égalité *)
  (* !consistency_rule (a,b) -> abs (a-b) <= tol *)
  (* Définition plus concrÃ¨te de l'égalité *)
  (*  a > b ->  !consistency_rule (a,b) -> a - b <= tol *)
  (*  not (a > b) -> !consistency_rule (a,b) -> b - a <= tol *)
  (* Définition implementatoire de l'égalité *)
  (*  a > b -> !consistency_rule (a,b) -> b + tol >= a *)
  (*  not (a > b) -> !consistency_rule (a,b) -> a + tol >= b *)

  property tol_is_positive:
  T!pos (tol);

end
;;

species Imp_value_tol (T is Gen_basic_type_tol, tol in T) =

  inherit Sp_value_tol (T, tol);

  let consistency_rule (x : Self, y : Self) : bool =
    if T!geq (x, y) then
      T!geq (T!plus (y, tol), x)
    else
      T!geq (T!plus (x, tol), y)
  ;

  let equal (x : Self, y : Self) : bool = T!equal (x, y);

  let element = T!element;

  proof of equal_transitive =
    by property T!equal_transitive definition of equal;

  proof of equal_symmetric =
    by property T!equal_symmetric definition of equal;

  proof of equal_reflexive =
    by property T!equal_reflexive definition of equal;

  proof of consistency_rule_reflexive =
  <1>1 assume x : Self,
    prove
    T!geq (T!plus (x, tol), x)
    assumed (* Todo *)
  <1>0 qed by step <1>1 definition of consistency_rule
  ;

  proof of consistency_rule_symmetric = assumed (* Error Coq !! *);
(*
<1>1
    assume
      x y : Self,
    hypothesis
      H1: consistency_rule (x, y),
    prove
     !consistency_rule (y, x)
     <2>1
        hypothesis H3: T!geq (x, y),
        prove
        consistency_rule (y, x)
        assumed {* Todo *}
     <2>2
        hypothesis H4: ~~ (T!geq (x, y)),
        prove
        consistency_rule (y, x)
        assumed {* Todo *}
     <2>0 conclude
  <1>0 conclude
  ;
*)

  let parse (x) = T!parse (x);
  let print (x) = T!print (x);

end
;;


species Sp_value (T is Gen_basic_type) =
  inherit Gen_value;
end;;

species Imp_value (T is Gen_basic_type) =

  inherit Sp_value(T);

  representation = T;

  let consistency_rule (x : Self, y : Self) : bool = T!equal (x, y);
  let equal (x : Self, y : Self) : bool = T!equal (x, y);
  let element = T!element;

  proof of equal_transitive =
    by property T!equal_transitive definition of equal;

  proof of equal_symmetric =
    by property T!equal_symmetric definition of equal;

  proof of equal_reflexive =
    by property T!equal_reflexive definition of equal;

  let parse (x) = T!parse (x);
  let print (x) = T!print (x);

  proof of consistency_rule_symmetric =
    by property T!equal_symmetric definition of consistency_rule;
  proof of consistency_rule_reflexive =
    by property T!equal_reflexive definition of consistency_rule;

end
;;


species Spe_int_imp_value_tol2 =

  inherit Imp_value_tol (Coll_int_value, Coll_int_value!of_int (2));

  proof of tol_is_positive =
  <1>1
  prove
  Coll_int_value!pos (Coll_int_value!of_int (2))
  assumed (* By definition *)

  <1>f qed by step <1>1 property Coll_int_value!pos, Coll_int_value!of_int
;

end ;;

collection Coll_int_imp_value_tol =

  implement Spe_int_imp_value_tol2;

end
;;

collection Coll_int_imp_value =

  implement Imp_value (Coll_int_value);

end
;;


collection Coll_bool_imp_value =

  implement Imp_value (Coll_bool_value);

end
;;
