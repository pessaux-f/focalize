
(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 - 2009 LIP6 and INRIA                               *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: basic_type.fcl,v 1.3 2011-05-26 15:54:26 maarek Exp $ *)

open "basics";;
open "sets";;
open "orders";;


(** Common species for basic type *)
species Gen_basic_type =

  inherit Setoid;

end
;;

(** Common species for basic type with tolerance *)
species Gen_basic_type_tol =

  inherit Gen_basic_type;

  signature plus : Self -> Self -> Self;
  signature geq : Self -> Self -> bool;
  signature pos : Self -> bool;

end
;;

species Int_value =

  inherit Gen_basic_type_tol;

  representation = int;

  let equal (x : Self, y : Self) : bool =
    basics#syntactic_equal (x, y);
  let element = 1;

  proof of equal_transitive =
  by property basics#beq_trans definition of equal;

  proof of equal_symmetric =
  by property basics#beq_symm definition of equal;

  proof of equal_reflexive =
  by property basics#beq_refl definition of equal;

  let parse (x) = basics#int_of_string (x);
  let print (x) =  basics#string_of_int (x);

  let of_int (n : int) : Self = n;

  let plus (n1 : Self, n2 : Self) : Self = n1 + n2;

  let geq (n1 : Self, n2 : Self) : bool = n1 >= n2;

  let pos (n : Self) : bool = n > 0;

end
;;

collection Coll_int_value =

  implement Int_value;

end
;;

species Bool_value =

  inherit Gen_basic_type;

  representation = bool;

  let equal (x : Self, y : Self) : bool =
     basics#syntactic_equal (x, y);
  let element = true;

  proof of equal_transitive =
  by property basics#beq_trans definition of equal;

  proof of equal_symmetric =
  by property basics#beq_symm definition of equal;

  proof of equal_reflexive =
  by property basics#beq_refl definition of equal;

  let parse (x) =
    if basics#syntactic_equal (x,  "True") then true else false;

  let print (x) = if !equal (x, true) then "True" else "False";

  let of_bool (b : bool) : Self = b;

end
;;


collection Coll_bool_value =

  implement Bool_value;

end
;;
