(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 - 2009 LIP6 and INRIA                               *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: diag.fcl,v 1.6 2011-05-26 15:54:26 maarek Exp $ *)

open "basics";;
open "sets";;
open "orders";;
open "gen_diag";;
open "etat_vote";;
open "num_capteur";;
open "pair";;

species Diag_2oo3( E is Sp_etat_vote, C is Sp_capteur) =

  inherit Gen_diag, Sp_pair (C, E);

  (* no_match implies returned value is invalid *)
  property no_match_is_invalid:
  all x : Self,
    E!equal (prj_b (x), E!no_match) -> ~(valid (x))
  ;

  (* range_match implies returned value is valid *)
  property range_match_is_valid:
  all x : Self,
    E!equal (prj_b (x), E!range_match) -> valid (x)
  ;

  (* partial_match implies returned value is valid *)
  property partial_match_is_valid:
  all x : Self,
    E!equal (prj_b (x), E!partial_match) -> valid (x)
  ;

  (* perfect_match implies returned value is valid *)
  property perfect_match_is_valid:
  all x : Self,
    E!equal (prj_b (x), E!perfect_match) -> valid (x)
  ;

 end
;;

species Imp_diag_2oo3( E is Sp_etat_vote, C is Sp_capteur) =

  inherit Diag_2oo3(E, C), Imp_pair (C, E);


  (* all other diag returned valid value *)
  let valid (x : Self) : bool =
     E!equal (prj_b (x), E!range_match) ||
     E!equal (prj_b (x), E!partial_match) ||
     E!equal (prj_b (x), E!perfect_match)
  ;

  proof of no_match_is_invalid =
  <1>1
  assume
    x : Self,
  hypothesis
    H1 : E!equal (prj_b (x), E!no_match),
  prove ~(valid (x))
    by hypothesis H1
       property E!equal_transitive, E!equal_symmetric,
       E!all_field_different_0_1, E!all_field_different_0_2,
       E!all_field_different_0_3
       definition of valid
  <1>f qed by step <1>1 property valid ;

  proof of range_match_is_valid =
  by definition of valid;

  proof of partial_match_is_valid =
  by definition of valid;

  proof of perfect_match_is_valid =
  by definition of valid;

end
;;
