(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 - 2009 LIP6 and INRIA                               *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: etat_vote.fcl,v 1.11 2011-05-26 15:54:26 maarek Exp $ *)

open "basics";;
open "sets";;
open "orders";;
open "integers";;
open "peano";;


(** Type somme : Etats possibles de la sortie voteur *)
species Sp_etat_vote =

  inherit Setoid;

  (** The 3 values are inconsistant *)
  signature no_match : Self;
  (** Tells that 1 value is consistant with the two other which are mutually
      inconsistant. *)
  signature range_match : Self;
  (** Tells that 2 values are consistant but the third is inconsistant. *)
  signature partial_match : Self;
  (** Tells that 3 values are consistant. *)
  signature perfect_match : Self;

  (** Each value of the species is inside the sum type *)
  theorem all_value:
    all e : Self,
      (  !equal (e, !no_match)
      \/ !equal (e, !range_match)
      \/ !equal (e, !partial_match)
      \/ !equal (e, !perfect_match))
  proof =
  assumed (* By construction *);


  (** Each field of the sum type are different from the other one *)
  property all_field_different_0_1:
    ~ (equal (no_match, range_match));
  property all_field_different_0_2:
    ~ (!equal (!no_match, !partial_match));
  property all_field_different_0_3:
    ~ (!equal (!no_match, !perfect_match));
  property all_field_different_1_2:
    ~ (!equal (!range_match, !partial_match));
  property all_field_different_1_3:
    ~ (!equal (!range_match, !perfect_match));
  property all_field_different_2_3:
    ~ (!equal (!partial_match, !perfect_match));

end
;;

species Imp_etat_vote (P is Peano) =

  inherit Sp_etat_vote;

  representation = P;

  let no_match = P!zero;
  let range_match = P!s (no_match);
  let partial_match = P!s (range_match);
  let perfect_match = P!s (partial_match);

  let equal (x : Self, y : Self) : bool =
     P!equal (x, y);
  let element = no_match;

  proof of equal_transitive =
    by property P!equal_transitive definition of equal;
  proof of equal_symmetric =
    by property P!equal_symmetric definition of equal;
  proof of equal_reflexive =
    by property P!equal_reflexive definition of equal;

  proof of all_field_different_0_1 =
    by definition of no_match, range_match, equal
    property P!zero_is_not_successor
  ;

  proof of all_field_different_0_2 =
   by definition of no_match, partial_match, equal
   property P!zero_is_not_successor
  ;

  proof of all_field_different_0_3 =
    by definition of no_match, perfect_match, equal
    property P!zero_is_not_successor
  ;

  proof of all_field_different_1_2 =
    by definition of range_match, partial_match, equal, no_match
    property P!zero_is_not_successor, P!succ_is_an_injection
  ;

  proof of all_field_different_1_3 =
    by definition of range_match, partial_match, perfect_match, equal, no_match
    property P!zero_is_not_successor, P!succ_is_an_injection
  ;

  proof of all_field_different_2_3 =
    by definition of range_match, partial_match, perfect_match, equal, no_match
    property P!zero_is_not_successor, P!succ_is_an_injection
  ;

  let print (x : Self) : string =
    if !equal (x, !no_match) then "no_match" else
    if !equal (x, !range_match) then "range_match" else
    if !equal (x, !partial_match) then "partial_match" else
    if !equal (x, !perfect_match) then "perfect_match" else
    "Erreur etat_vote";

end
;;


collection Coll_etat_vote =

  implement Imp_etat_vote (Coll_peano);

end
;;
