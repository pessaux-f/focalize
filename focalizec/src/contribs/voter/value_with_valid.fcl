(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 - 2009 LIP6 and INRIA                               *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: value_with_valid.fcl,v 1.4 2011-05-26 15:54:26 maarek Exp $ *)

open "basics";;
open "sets";;
open "orders";;
open "valid_meas";;
open "gen_value";;
open "basic_type";;
open "pair";;

species Sp_value_with_valid( T is Gen_basic_type, V is Sp_valid_meas) =

  inherit Gen_value, Sp_pair(T, V);

end ;;


species Imp_value_with_valid (T is Gen_basic_type, V is Sp_valid_meas) =

  inherit Sp_value_with_valid (T, V), Imp_pair (T, V);

  let consistency_rule (x : Self, y : Self) : bool =
     if V!equal (prj_b (x), V!valid) then
      if V!equal (prj_b (y), V!valid) then
        T!equal (prj_a (x), prj_a (y))
      else
        false
    else
      if V!equal (prj_b (y), V!valid) then
        false
      else
        true
;

  let parse2 (x, y) = constr (T!parse (x), V!parse (y));

  let print (x) =
    let a = "( " in
    let b = T!print (prj_a (x)) in
    let c = ", " in
    let d = V!print (prj_b (x)) in
    let e = ")" in
    (a ^ b ^ c ^ d ^ e);

  proof of consistency_rule_symmetric =
    by property T!equal_symmetric definition of consistency_rule;

  proof of consistency_rule_reflexive =
    by property T!equal_reflexive definition of consistency_rule;

end;;

collection Coll_int_value_with_valid =

  implement Imp_value_with_valid (Coll_int_value, Coll_valid_meas);

end;;

