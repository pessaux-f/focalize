(***********************************************************************)
(*                                                                     *)
(*                        FoCaLize compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: switch_recovery_automata.fcl,v 1.6 2009-06-06 14:51:08 weis Exp $ *)

use "basics";;
use "sets_orders";;
use "gen_def";;
use "request";;
use "switch_recovery_reverse_automata";;
use "switch_recovery_normal_automata";;

open "basics";;
open "sets_orders";;
open "gen_def";;
open "request";;
open "switch_recovery_reverse_automata";;
open "switch_recovery_normal_automata";;

(* Definition of the automata's states using a sum type *)
species State_aut2 =

  inherit Gen_state;

  signature unknown : Self;
  signature recovery_reverse : Self;
  signature recovery_normal : Self;

  (* Property all states are different *)

end
;;

species Imp_state_aut2 =

  inherit State_aut2;
  (* Definition of the automata's states using a sum type *)

  representation = int;

  let empty = 0;

  let unknown = 20;
  let recovery_reverse = 30;
  let recovery_normal = 40;

  let equal(x in Self, y in Self) in bool = x =0x y;
  let element = 1;

  proof of equal_transitive = assumed {* type polymorphe *};
  (* by property basics#beq_trans definition of equal; *)
  proof of equal_symmetric = assumed {* type polymorphe *};
  (* by property basics#beq_symm definition of equal; *)
  proof of equal_reflexive = assumed {* type polymorphe *};
  (* by property basics#beq_refl definition of equal; *)

  let get(s in Self) in int = s
  ;

  let parse(x) = basics#int_of_string(x);

  let print(s) =
    if !equal(s, !empty) then "empty" else
    if !equal(s, !unknown) then "unknown" else
    if !equal(s, !recovery_reverse) then "recovery_reverse" else
    if !equal(s, !recovery_normal) then "recovery_normal" else
    focalize_error("State_aut2 : Unknown state")
  ;

end
;;

collection Coll_state_aut2 =

  implement Imp_state_aut2;

end
;;


(********************************************************************)
(*                Automate de recovery d'aiguille                   *)
(********************************************************************)

species
  Switch_recovery_automata
    (St is State_aut2,
     Req is Requests,
     Po is Ports,
     St3 is State_aut3,
     Aut3 is
       Switch_recovery_reverse_automata (St3, Req, Po),
     St4 is State_aut4,
     Aut4 is
       Switch_recovery_normal_automata (St4, Req, Po)) =

  inherit Automata(St, Req, Po);

  representation = St * (Aut3 * Aut4);

end
;;

species
  Imp_switch_recovery_automata
    (St is State_aut2,
     Req is Requests,
     Po is Ports,
     St3 is State_aut3,
     Aut3 is
       Switch_recovery_reverse_automata (St3, Req, Po),
     St4 is State_aut4,
     Aut4 is
       Switch_recovery_normal_automata(St4, Req, Po)) =

  inherit Switch_recovery_automata(St, Req, Po, St3, Aut3, St4, Aut4);

  let st_aut_p1( i in Self) in St = basics#fst(i);
  let st_aut_p2( i in Self) in Aut3 = basics#fst(basics#snd(i));
  let st_aut_p3( i in Self) in Aut4 = basics#snd(basics#snd(i));
  let constr_self( s1 in St, a3 in Aut3, a4 in Aut4) in Self =
     basics#pair(s1, basics#pair(a3, a4));

  theorem st_is_fst_self:
    all st1 in St, all a3 in Aut3, all a4 in Aut4,
      st_aut_p1( constr_self( st1, a3, a4)) = st1
  proof =
    by definition of st_aut_p1, constr_self
  ;

  theorem aut3_is_snd_self:
    all st1 in St, all a3 in Aut3, all a4 in Aut4,
      st_aut_p2( constr_self( st1, a3, a4)) = a3
  proof =
  (*
  coq proof
    definition of st_aut_p2, constr_self
  {*
  qed.
  *}
  *)
   assumed {* Voir Damien *}
  (*
    by definition of st_aut_p2, constr_self
  *)
  ;

  theorem aut4_is_trd_self:
    all st1 in St, all a3 in Aut3, all a4 in Aut4,
      st_aut_p3( constr_self( st1, a3, a4)) = a4
  proof =
  assumed {* Voir Damien *}
  (*
    by definition of st_aut_p3, constr_self
  *)
  ;

  let init_state = !constr_self(St!empty, Aut3!init_state, Aut4!init_state);

  let entry(p in Po) =
    if Po!equal(p, Po!port_in1)then
      !constr_self(St!recovery_reverse, Aut3!entry(p), Aut4!init_state)
    else if Po!equal(p, Po!port_in2) then
      !constr_self(St!unknown, Aut3!init_state, Aut4!init_state)
    else if Po!equal(p, Po!port_in3) then
      !constr_self(St!recovery_normal, Aut3!init_state, Aut4!entry(p))
    else
      !constr_self(St!empty, Aut3!init_state, Aut4!init_state)
  ;

  let tau( s in Self, r in  Req) in (Self * Po) =
  if St!equal(!st_aut_p1(s), St!unknown) then
     if Req!equal(r, Req!reverse_switched) then
      !constr_tau(!constr_self(St!recovery_reverse,
                               Aut3!entry(Po!port_in1),
                               Aut4!init_state),
                  Po!empty)
     else if Req!equal(r, Req!normal_switched) then
      !constr_tau(!constr_self(St!recovery_normal,
                               Aut3!init_state,
                               Aut4!entry(Po!port_in1)),
                  Po!empty)
     else
      !constr_tau(!constr_self(St!unknown,
                               Aut3!init_state,
                               Aut4!init_state),
                  Po!empty)

  else if St!equal(!st_aut_p1(s), St!recovery_reverse) then
    let a = Aut3!tau(!st_aut_p2(s), r) in
    if Po!equal(Aut3!tau_p2(a), Po!port_out1) then
     !constr_tau(!constr_self(St!empty,
                              Aut3!init_state,
                              Aut4!init_state),
                 Po!port_out1)
    else if Po!equal(Aut3!tau_p2(a), Po!port_out2) then
     !constr_tau(!constr_self(St!unknown,
                              Aut3!init_state,
                              Aut4!init_state),
                 Po!empty)
    else !constr_tau(!constr_self(St!recovery_reverse,
                                  Aut3!tau_p1(a),
                                  Aut4!init_state),
                     Po!empty)

  else if St!equal(!st_aut_p1(s), St!recovery_normal) then
    let a = Aut4!tau(!st_aut_p3(s), r) in
    if Po!equal(Aut4!tau_p2(a), Po!port_out1) then
     !constr_tau(!constr_self(St!empty,
                              Aut3!init_state,
                              Aut4!init_state),
                 Po!port_out2)
    else if Po!equal(Aut4!tau_p2(a), Po!port_out2) then
     !constr_tau(!constr_self(St!unknown,
                              Aut3!init_state,
                              Aut4!init_state),
                 Po!empty)
    else !constr_tau(!constr_self(St!recovery_normal,
                                  Aut3!init_state,
                                  Aut4!tau_p1(a)),
                     Po!empty)

  else
   !constr_tau(!constr_self(St!empty,
                               Aut3!init_state,
                               Aut4!init_state),
                Po!empty)
  ;


  let get_state(x in Self) = !st_aut_p1(x);

  let equal(x in Self, y in Self) in bool =
     St!equal(!st_aut_p1(x), !st_aut_p1(y))
  ;

  proof of equal_reflexive =
    by property St!equal_reflexive
    definition of equal
  ;
  proof of equal_symmetric =
    by property St!equal_symmetric
    definition of equal
  ;
  proof of equal_transitive =
    by property St!equal_transitive
    definition of equal
  ;

  theorem equal_only_on_p1:
    all s1 in St, all a31 a32 in Aut3, all a41 a42 in Aut4,
    !equal(!constr_self(s1, a31, a41), !constr_self(s1, a32, a42))
  proof =
  assumed {* Voir Damien *}
  (*
    <1>1
    assume s1 in St,
    assume a31 in Aut3,
    assume a32 in Aut3,
    assume a41 in Aut4,
    assume a42 in Aut4,
    prove !equal(!constr_self(s1, a31, a41), !constr_self(s1, a32, a42))
      <2>1 prove st_aut_p1(!constr_self(s1, a31, a41)) = s1
      by property st_is_fst_self
      <2>2 prove st_aut_p1(!constr_self(s1, a32, a42)) = s1
      by property st_is_fst_self
      <2>0 qed by step <2>1, <2>2
           property St!equal_transitive
           definition of equal
    <1>0 qed.
  *)
  ;

end
;;


species Imp2_switch_recovery_automata =

  inherit
    Imp_switch_recovery_automata
      (Coll_state_aut2, Coll_requests, Coll_ports,
       Coll_state_aut3,
       Coll_switch_recovery_reverse_automata,
       Coll_state_aut4,
       Coll_switch_recovery_normal_automata);

  theorem port_out1_is_when_reverse_switch:
  all s in Self, all r in Coll_requests,
  Coll_ports!equal(tau_p2(tau(s, r)), Coll_ports!port_out1) ->
    Coll_requests!equal(r, Coll_requests!reverse_switched)
  proof =
  <1>1
    assume s in Self,
    assume r in Coll_requests,
    assume H1:Coll_ports!equal(tau_p2(tau(s, r)), Coll_ports!port_out1),
    prove Coll_requests!equal(r, Coll_requests!reverse_switched)
     <2>1 prove  ~ Coll_ports!equal(Coll_ports!port_out2, Coll_ports!port_out1)
     by property Coll_ports!diff_port_out1_port_out2, Coll_ports!equal_symmetric
     <2>0
     qed
      by definition of tau, constr_tau, tau_p2
      hypothesis H1
      step <2>1
      property
        Coll_requests!diff_normal_switched_reverse_switched,
        Coll_requests!diff_normal_switched_moving,
        Coll_requests!diff_normal_switched_moving_time_out,
        Coll_requests!diff_reverse_switched_moving,
        Coll_requests!diff_reverse_switched_moving_time_out,
        Coll_requests!diff_moving_moving_time_out,
        Coll_requests!diff_inconsistent_moving_time_out,
        Coll_ports!diff_empty_port_out1,
        Coll_switch_recovery_reverse_automata!port_out1_is_when_reverse_switch
  <1>0 conclude
  ;

end
;;


collection Coll_switch_recovery_automata =

  implement Imp2_switch_recovery_automata;

end
;;
