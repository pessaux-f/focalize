(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: switch_recovery_automata.fcl,v 1.8 2012-02-24 16:22:35 pessaux Exp $ *)

use "basics";;
use "sets";;
use "gen_def";;
use "request";;
use "switch_recovery_reverse_automata";;
use "switch_recovery_normal_automata";;

open "basics";;
open "sets";;
open "gen_def";;
open "request";;
open "switch_recovery_reverse_automata";;
open "switch_recovery_normal_automata";;

(* Definition of the automata's states using a sum type *)
species State_aut2 =

  inherit Gen_state;

  signature unknown : Self;
  signature recovery_reverse : Self;
  signature recovery_normal : Self;

  (* Property all states are different *)

end
;;

species Imp_state_aut2 =

  inherit State_aut2;
  (* Definition of the automata's states using a sum type *)

  representation = int;

  let empty = 0;

  let unknown = 20;
  let recovery_reverse = 30;
  let recovery_normal = 40;

  let equal(x : Self, y : Self) : bool = x =0x y;
  let element = 1;

  proof of equal_transitive = assumed (* type polymorphe *);
  (* by property basics#beq_trans definition of equal; *)
  proof of equal_symmetric = assumed (* type polymorphe *);
  (* by property basics#beq_symm definition of equal; *)
  proof of equal_reflexive = assumed (* type polymorphe *);
  (* by property basics#beq_refl definition of equal; *)

  let get(s : Self) : int = s
  ;

  let parse(x) = basics#int_of_string(x);

  let print(s) =
    if !equal(s, !empty) then "empty" else
    if !equal(s, !unknown) then "unknown" else
    if !equal(s, !recovery_reverse) then "recovery_reverse" else
    if !equal(s, !recovery_normal) then "recovery_normal" else
    focalize_error("State_aut2 : Unknown state")
  ;

end
;;

collection Coll_state_aut2 =

  implement Imp_state_aut2;

end
;;


(********************************************************************)
(*                Automate de recovery d'aiguille                   *)
(********************************************************************)

species
  Switch_recovery_automata
    (St is State_aut2,
     Req is Requests,
     Po is Ports,
     St3 is State_aut3,
     Aut3 is
       Switch_recovery_reverse_automata (St3, Req, Po),
     St4 is State_aut4,
     Aut4 is
       Switch_recovery_normal_automata (St4, Req, Po)) =

  inherit Automata(St, Req, Po);

  representation = St * (Aut3 * Aut4);

end
;;

species
  Imp_switch_recovery_automata
    (St is State_aut2,
     Req is Requests,
     Po is Ports,
     St3 is State_aut3,
     Aut3 is
       Switch_recovery_reverse_automata (St3, Req, Po),
     St4 is State_aut4,
     Aut4 is
       Switch_recovery_normal_automata(St4, Req, Po)) =

  inherit Switch_recovery_automata(St, Req, Po, St3, Aut3, St4, Aut4);

  let st_aut_p1( i : Self) : St = basics#fst(i);
  let st_aut_p2( i : Self) : Aut3 = basics#fst(basics#snd(i));
  let st_aut_p3( i : Self) : Aut4 = basics#snd(basics#snd(i));
  let constr_self( s1 : St, a3 : Aut3, a4 : Aut4) : Self =
     basics#pair(s1, basics#pair(a3, a4));

  theorem st_is_fst_self:
    all st1 : St, all a3 : Aut3, all a4 : Aut4,
      st_aut_p1( constr_self( st1, a3, a4)) = st1
  proof = assumed (* exhausted search space *)
    (* by definition of st_aut_p1, constr_self *)
  ;

  theorem aut3_is_snd_self:
    all st1 : St, all a3 : Aut3, all a4 : Aut4,
      st_aut_p2( constr_self( st1, a3, a4)) = a3
  proof =
  (*
  coq proof
    definition of st_aut_p2, constr_self
  {*
  qed.
  *}
  *)
   assumed (* Voir Damien *)
  (*
    by definition of st_aut_p2, constr_self
  *)
  ;

  theorem aut4_is_trd_self:
    all st1 : St, all a3 : Aut3, all a4 : Aut4,
      st_aut_p3( constr_self( st1, a3, a4)) = a4
  proof =
  assumed (* Voir Damien *)
  (*
    <1>1
    assume s1 : St,
    assume a31 a32 : Aut3,
    assume a41 a42 : Aut4,
    prove !equal(!constr_self(s1, a31, a41), !constr_self(s1, a32, a42))
      <2>1 prove st_aut_p1(!constr_self(s1, a31, a41)) = s1
      by property st_is_fst_self
      <2>2 prove st_aut_p1(!constr_self(s1, a32, a42)) = s1
      by property st_is_fst_self
      <2>0 qed by step <2>1, <2>2
           property St!equal_transitive
           definition of equal
    <1>0 qed.
  *)
  ;

end
;;


species Imp2_switch_recovery_automata =

  inherit
    Imp_switch_recovery_automata
      (Coll_state_aut2, Coll_requests, Coll_ports,
       Coll_state_aut3,
       Coll_switch_recovery_reverse_automata,
       Coll_state_aut4,
       Coll_switch_recovery_normal_automata);

  theorem port_out1_is_when_reverse_switch:
  all s : Self, all r : Coll_requests,
  Coll_ports!equal(tau_p2(tau(s, r)), Coll_ports!port_out1) ->
    Coll_requests!equal(r, Coll_requests!reverse_switched)
  proof =
  <1>1
    assume s : Self, r : Coll_requests,
    hypothesis H1:Coll_ports!equal(tau_p2(tau(s, r)), Coll_ports!port_out1),
    prove Coll_requests!equal(r, Coll_requests!reverse_switched)
     <2>1 prove  ~ Coll_ports!equal(Coll_ports!port_out2, Coll_ports!port_out1)
          by property Coll_ports!diff_port_out1_port_out2, Coll_ports!equal_symmetric,
             Coll_ports!equal,
             Coll_ports!port_out2,
             Coll_ports!port_out1
     <2>0
     qed assumed (* exhausted search space *)
      (* by definition of tau, constr_tau, tau_p2 *)
      (* hypothesis H1 *)
      (* step <2>1 *)
      (* property *)
      (*   Coll_requests!diff_normal_switched_reverse_switched, *)
      (*   Coll_requests!diff_normal_switched_moving, *)
      (*   Coll_requests!diff_normal_switched_moving_time_out, *)
      (*   Coll_requests!diff_reverse_switched_moving, *)
      (*   Coll_requests!diff_reverse_switched_moving_time_out, *)
      (*   Coll_requests!diff_moving_moving_time_out, *)
      (*   Coll_requests!diff_inconsistent_moving_time_out, *)
      (*   Coll_ports!diff_empty_port_out1, *)
      (*   Coll_switch_recovery_reverse_automata!port_out1_is_when_reverse_switch *)
  <1>0 qed by step <1>1 property Coll_requests!equal
  ;



  (* Real definitions: TODO *)
  let equal (x, y) = true;
  proof of equal_reflexive = assumed;
  proof of equal_symmetric = assumed;
  proof of equal_transitive = assumed;
  let tau (s, p) = (s, Coll_ports!element);
  let init_state = (Coll_state_aut2!element, (Coll_switch_recovery_reverse_automata!init_state, Coll_switch_recovery_normal_automata!init_state));
  let get_state(x) = Coll_state_aut2!element;
  let entry (x) = init_state;

end
;;


collection Coll_switch_recovery_automata =

  implement Imp2_switch_recovery_automata;

end
;;
