(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: switch_recovery_normal_automata.fcl,v 1.8 2012-02-24 16:22:35 pessaux Exp $ *)

use "basics";;
use "sets";;
use "gen_def";;
use "request";;

open "basics";;
open "sets";;
open "gen_def";;
open "request";;

species State_aut4 =

  inherit Gen_state;

  (* Definition of the automata's states using a sum type *)
  signature rec_normal : Self;
  signature rec_nor_moving : Self;
  signature rec_nor_reverse : Self;
  signature rec_nor_rev_moving : Self;

end
;;

species Imp_state_aut4 =

  inherit State_aut4;

  (* Definition of the automata's states using a sum type *)
  representation = int;

  let empty = 0;

  let rec_normal = 41;
  let rec_nor_moving = 42;
  let rec_nor_reverse = 43;
  let rec_nor_rev_moving = 44;

  let equal (x : Self, y : Self) : bool = x =0x y;
  let element = 1;

  proof of equal_transitive = assumed (* Type polymorphe *);
  (* by property basics#beq_trans definition of equal; *)
  proof of equal_symmetric = assumed (* Type polymorphe *);
  (* by property basics#beq_symm definition of equal; *)
  proof of equal_reflexive = assumed (* Type polymorphe *);
  (* by property basics#beq_refl definition of equal; *)

  let get(s : Self) : int = s
  ;

  let parse(x) = basics#int_of_string(x);

  let print(s) =
     if !equal(s, !empty) then "empty" else
     if !equal(s, !rec_normal) then "rec_normal" else
     if !equal(s, !rec_nor_moving) then "rec_nor_moving" else
     if !equal(s, !rec_nor_reverse) then "rec_nor_reverse" else
     if !equal(s, !rec_nor_rev_moving) then "rec_nor_rev_moving" else
     focalize_error("State_aut4 : Unknown state")
  ;

end
;;

collection Coll_state_aut4 =

  implement Imp_state_aut4;

end
;;


(********************************************************************)
(*             Automate de recovery d'aiguille normal               *)
(********************************************************************)
species
  Switch_recovery_normal_automata
    (St is State_aut4, Req is Requests, Po is Ports) =

  inherit Automata (St, Req, Po);

  representation = St;

  signature equal : Self -> Self -> bool;

end
;;

species
  Imp_switch_recovery_normal_automata
    (St is State_aut4, Req is Requests, Po is Ports) =

  inherit Switch_recovery_normal_automata (St, Req, Po);

  let init_state = St!empty;

  let entry(p : Po) =
    if Po!equal(p, Po!port_in1)then St!rec_normal else St!empty
  ;

  let tau( s : Self, r :  Req) : (Self * Po) =
  if !equal(s, St!rec_normal) then
    if Req!equal(r, Req!moving) then
      !constr_tau(St!rec_nor_moving, Po!empty)
    else if Req!equal(r, Req!reverse_switched) then
      !constr_tau(St!empty, Po!port_out2)
    else
      (St!rec_normal, Po!empty)
  else if !equal(s, St!rec_nor_moving) then
    if Req!equal(r, Req!reverse_switched) then
      !constr_tau(St!rec_nor_reverse, Po!empty)
    else if Req!equal(r, Req!moving_time_out) then
      !constr_tau(St!empty, Po!port_out2)
    else
      !constr_tau(St!rec_nor_moving, Po!empty)
  else if !equal(s, St!rec_nor_reverse) then
    if Req!equal(r, Req!moving) then
      !constr_tau(St!rec_nor_rev_moving, Po!empty)
    else if Req!equal(r, Req!normal_switched) then
      !constr_tau(St!empty, Po!port_out2)
    else
      !constr_tau(St!rec_nor_reverse, Po!empty)
  else if !equal(s, St!rec_nor_rev_moving) then
    if Req!equal(r, Req!normal_switched) then
      !constr_tau(St!empty, Po!port_out1)
    else if Req!equal(r, Req!moving_time_out) then
      !constr_tau(St!empty, Po!port_out2)
    else if Req!equal(r, Req!reverse_switched) then
      !constr_tau(St!empty, Po!port_out2)
    else
      !constr_tau(St!rec_nor_rev_moving, Po!empty)
  else
    !constr_tau(St!empty, Po!empty)
  ;
  let get_state( x : Self) = x;

  let equal(x : Self, y : Self) : bool =
     St!equal(x, y)
  ;

  proof of equal_reflexive =
    by property St!equal_reflexive
    definition of equal
  ;
  proof of equal_symmetric =
    by property St!equal_symmetric
    definition of equal
  ;
  proof of equal_transitive =
    by property St!equal_transitive
    definition of equal
  ;

  theorem port_out1_is_when_normal_switch:
  all s : Self, all r : Req,
  Po!equal(tau_p2(tau(s, r)), Po!port_out1) ->
    Req!equal(r, Req!normal_switched)
  proof =
  <1>1
    assume s : Self, r : Req,
    hypothesis H1:Po!equal(tau_p2(tau(s, r)), Po!port_out1),
    prove Req!equal(r, Req!normal_switched)
     <2>1 prove  ~ Po!equal(Po!port_out2, Po!port_out1)
     by property Po!diff_port_out1_port_out2, Po!equal_symmetric
     <2>0
     qed assumed (* exhausted search space *)
      (* by definition of tau, constr_tau, tau_p2 *)
      (* hypothesis H1 *)
      (* step <2>1 *)
      (* property *)
      (*   Req!diff_normal_switched_reverse_switched, *)
      (*   Req!diff_normal_switched_moving, *)
      (*   Req!diff_normal_switched_moving_time_out, *)
      (*   Req!diff_reverse_switched_moving, *)
      (*   Req!diff_reverse_switched_moving_time_out, *)
      (*   Req!diff_moving_moving_time_out, *)
      (*   Req!diff_inconsistent_moving_time_out, *)
      (*   Po!diff_empty_port_out1 *)
  <1>0 qed by step <1>1 property tau_p2, tau
  ;

end
;;

collection Coll_switch_recovery_normal_automata =

  implement
    Imp_switch_recovery_normal_automata
      (Coll_state_aut4, Coll_requests, Coll_ports);

end
;;
