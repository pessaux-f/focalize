(***********************************************************************)
(*                                                                     *)
(*                        FoCaLiZe compiler                            *)
(*                                                                     *)
(*            Philippe Ayrault                                         *)
(*            François Pessaux                                         *)
(*            Pierre Weis                                              *)
(*            Damien Doligez                                           *)
(*                                                                     *)
(*                               LIP6  -  INRIA Rocquencourt           *)
(*                                                                     *)
(*  Copyright 2007 LIP6 and INRIA                                      *)
(*  Distributed only by permission.                                    *)
(*                                                                     *)
(***********************************************************************)

(* $Id: request.fcl,v 1.5 2012-02-24 16:22:35 pessaux Exp $ *)

use "basics";;
use "sets";;
use "gen_def";;

open "basics";;
open "sets";;
open "gen_def";;


(* Definition of the automata's requests using a sum type *)
species Requests =

  inherit Gen_request;

  signature normal_switched : Self;
  signature reverse_switched : Self;
  signature moving : Self;
  signature inconsistent : Self;
  signature moving_time_out : Self;

  property diff_normal_switched_reverse_switched:
   ~ equal (normal_switched, reverse_switched)
  ;

  property diff_normal_switched_moving:
   ~ equal (normal_switched, moving)
  ;

  property diff_normal_switched_inconsistent:
   ~ equal (normal_switched, inconsistent)
  ;

  property diff_normal_switched_moving_time_out:
   ~ equal (normal_switched, moving_time_out)
  ;

  property diff_reverse_switched_moving:
   ~ equal (reverse_switched, moving)
  ;

  property diff_reverse_switched_inconsistent:
   ~ equal (reverse_switched, inconsistent)
  ;

  property diff_reverse_switched_moving_time_out:
   ~ equal (reverse_switched, moving_time_out)
  ;

  property diff_moving_inconsistent:
   ~ equal (moving, inconsistent)
  ;

  property diff_moving_moving_time_out:
   ~ equal (moving, moving_time_out)
  ;

  property diff_inconsistent_moving_time_out:
   ~ equal (inconsistent, moving_time_out)
  ;

end
;;

(* Definition of the automata's requests using a sum type *)
species Imp_requests =

  inherit Requests;

  representation = int;

  let normal_switched = 0;            (* sig_N = 1, sig_R = 0 *)
  let reverse_switched = 1;           (* sig_N = 0, sig_R = 1 *)
  let moving = 2;                     (* sig_N = 0, sig_R = 0 *)
  let inconsistent = 3;               (* sig_N = 1, sig_R = 1 *)
  let moving_time_out = 4;

  let equal (x : Self, y : Self) : bool = x =0x y;
  let element = 1;

  proof of equal_transitive = assumed (* type polymorphe *);
  (* by definition of equal; *)
  proof of equal_symmetric = assumed (* type polymorphe *);
  (* by property basics#beq_symm definition of equal; *)
  proof of equal_reflexive = assumed (* type polymorphe *);
  (* by property basics#beq_refl definition of equal; *)


  let set(i : int) : Self =
     if !equal (i, 0) then
       !normal_switched
     else if  !equal (i, 1) then
       !reverse_switched
     else if  !equal (i, 2) then
       !moving
     else if  !equal (i, 3) then
       !inconsistent
     else if  !equal (i, 4) then
       !moving_time_out
     else
       (* by default !!! *)
       !inconsistent
  ;


  let parse(x) = basics#int_of_string(x);
  let print(x) =  basics#string_of_int(x);

  proof of diff_normal_switched_reverse_switched =
  (*
  by definition of normal_switched, reverse_switched, equal,( =0x )
  *)
  coq proof
    definition of normal_switched, reverse_switched, equal
    {*
      intros; unfold equal, basics._equal_0x, normal_switched, reverse_switched.
      auto.
      Qed.
    *}
  ;

  proof of diff_normal_switched_moving =
    coq proof
    definition of normal_switched, moving, equal
    {*
      intros; unfold equal, basics._equal_0x, normal_switched, moving.
      auto.
      Qed.
    *}
  ;

  proof of diff_normal_switched_inconsistent =
    coq proof
    definition of normal_switched, inconsistent, equal
    {*
      intros; unfold equal, basics._equal_0x, normal_switched, inconsistent.
      auto.
      Qed.
    *}
  ;

  proof of diff_normal_switched_moving_time_out = assumed (* See below *);
  proof of diff_reverse_switched_moving = assumed (* See below *);
  proof of diff_reverse_switched_inconsistent = assumed (* See below *);
  proof of diff_reverse_switched_moving_time_out = assumed (* See below *);
  proof of diff_moving_inconsistent = assumed (* See below *);
  proof of diff_moving_moving_time_out = assumed (* See below *);
  proof of diff_inconsistent_moving_time_out = assumed (* See below *);

end
;;

collection Coll_requests =

  implement Imp_requests;

end
;;

(* Definition of the automata's ports using a sum type *)
species Ports =

  inherit Gen_port;

  signature empty : Self;

  signature port_in1 : Self;
  signature port_in2 : Self;
  signature port_in3 : Self;

  signature port_out1 : Self;
  signature port_out2 : Self;

  property diff_empty_port_in1:
   ~ equal (empty, port_in1)
  ;

  property diff_empty_port_in2:
   ~ equal (empty, port_in2)
  ;

  property diff_empty_port_in3:
   ~ equal (empty, port_in3)
  ;

  property diff_empty_port_out1:
   ~ equal (empty, port_out1)
  ;

  property diff_empty_port_out2:
   ~ equal (empty, port_out2)
  ;

  property diff_port_in1_port_in2:
   ~ equal (port_in1, port_in2)
  ;

  property diff_port_in1_port_in3:
   ~ equal (port_in1, port_in3)
  ;

  property diff_port_in1_port_out1:
   ~ equal (port_in1, port_out1)
  ;

  property diff_port_in1_port_out2:
   ~ equal (port_in1, port_out2)
  ;

  property diff_port_in2_port_in3:
   ~ equal (port_in2, port_in3)
  ;

  property diff_port_in2_port_out1:
   ~ equal (port_in2, port_out1)
  ;

  property diff_port_in2_port_out2:
   ~ equal (port_in2, port_out2)
  ;

  property diff_port_in3_port_out1:
   ~ equal (port_in3, port_out1)
  ;

  property diff_port_in3_port_out2:
   ~ equal (port_in3, port_out2)
  ;

  property diff_port_out1_port_out2:
   ~ equal (port_out1, port_out2)
  ;

  property disj:
  all p : Self,
   equal (p, empty) \/
   equal (p, port_in1) \/
   equal (p, port_in2) \/
   equal (p, port_in3) \/
   equal (p, port_out1) \/
   equal (p, port_out2)
  ;

end
;;

(* Definition of the automata's ports using a sum type *)
species Imp_ports =

  inherit Ports;

  representation = int;

  let empty = 0;

  let port_in1 = 1;
  let port_in2 = 2;
  let port_in3 = 3;

  let port_out1 = 11;
  let port_out2 = 12;

  let equal (x : Self, y : Self) : bool = x =0x y;
  let element = 1;


  proof of equal_transitive = assumed (* type polymorphe *);
  (* by property basics#beq_trans definition of equal; *)
  proof of equal_symmetric = assumed (* type polymorphe *);
  (* by property basics#beq_symm definition of equal; *)
  proof of equal_reflexive = assumed (* type polymorphe *);
  (* by property basics#beq_refl definition of equal; *)


  let parse(x) = basics#int_of_string(x);
  let print(x) =  basics#string_of_int(x);

  proof of diff_empty_port_in1 = assumed (* See below *);
  proof of diff_empty_port_in2 = assumed (* See below *);
  proof of diff_empty_port_in3 = assumed (* See below *);
  proof of diff_empty_port_out1 = assumed (* See below *);
  proof of diff_empty_port_out2 = assumed (* See below *);
  proof of diff_port_in1_port_in2 = assumed (* See below *);
  proof of diff_port_in1_port_in3 = assumed (* See below *);
  proof of diff_port_in1_port_out1 = assumed (* See below *);
  proof of diff_port_in1_port_out2 = assumed (* See below *);
  proof of diff_port_in2_port_in3 = assumed (* See below *);
  proof of diff_port_in2_port_out1 = assumed (* See below *);
  proof of diff_port_in2_port_out2 = assumed (* See below *);
  proof of diff_port_in3_port_out1 = assumed (* See below *);
  proof of diff_port_in3_port_out2 = assumed (* See below *);
  proof of diff_port_out1_port_out2 = assumed (* See below *);
  proof of disj = assumed (* See below *);

end
;;

collection Coll_ports =

  implement Imp_ports;

end
;;

