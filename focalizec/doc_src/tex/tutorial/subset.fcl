(*============================================================================*)
(* FoCaLize Tutorial : Implementing Sets - Subsets                            *)
(*============================================================================*)
(* File: subset.fcl / Created: May 2009 / Mod: June 2009                      *)
(* Lang: FoCaLize, version 0.2.0 (June 2009) / Dep: basics superset           *)
(* By Eric Jaeger - UPMC/LIP6 & SGDN/DCSSI                                    *)
(*============================================================================*)

(**
@title FoCaLize Tutorial : Implementing Sets - Subsets
@author The FoCaLize Team
@description Basic sets definitions (for educational purposes only)
*)

use "basics" ;;
open "superset" ;;

(* Subsets ===================================================================*)
(* Any subset of any superset                                                 *)

species Subset(Val is Superset) =

 signature ( << ) : Val -> Self -> basics#bool ;

 signature empty : Self ;
 property mem_empty : all v : Val, ~(v << empty) ;

 signature ( + ) : Self -> Val -> Self ;
 property mem_insert : all v1 v2 : Val, all s : Self,
                       v1 << s + v2 <-> (Val!( = )(v1, v2) \/ v1 << s) ;

 signature ( - ) : Self -> Val -> Self ;
 property mem_remove : all v1 v2 : Val, all s : Self,
                       v1 << s - v2 <-> (~(Val!( = )(v1, v2)) /\ v1 << s) ;

end ;;

(* Extensionsal Subsets ======================================================*)
(* Any subset of any superset that can be extensionally analysed              *)

species ExtSubset(Val is Superset) =

 inherit SupersetWitness, Subset(Val);

 property mem_congr : all v1 v2 : Val, Val!( = )(v1, v2) ->
                      (all s : Self, (v1 << s) <-> (v2 << s)) ;

 signature ( <: ) : Self -> Self -> basics#bool ;
 property mem_incl : all s1 s2 : Self,
                     s1 <: s2 <-> all v : Val, v << s1 -> v << s2 ;
 theorem incl_refl : all s : Self, s <: s
  proof = by property mem_incl ;

 theorem incl_tran : all s1 s2 s3 : Self, s1 <: s2 -> s2 <: s3 -> s1 <: s3
  proof = by property mem_incl ;

 property eq_incl : all s1 s2 : Self, (s1 = s2) <-> (s1 <: s2 /\ s2 <: s1) ;
 proof of eq_refl = by property eq_incl, incl_refl ;
 proof of eq_symm = by property eq_incl ;
 proof of eq_tran = by property eq_incl, incl_tran ;
 theorem mem_eq : all s1 s2 : Self, s1 = s2 <->
                  (all v : Val, v << s1 <-> v << s2)
  proof = by property eq_incl, mem_incl ;

 theorem incl_empty : all s : Self, empty <: s
  proof = by property mem_incl, mem_empty ;
 theorem incl_insert : all s : Self, all v : Val, s <: s + v
  proof = by property mem_insert, mem_incl ;
 theorem incl_remove : all s : Self, all v : Val, s - v <: s
  proof = by property mem_remove, mem_incl ;
 theorem incl_insert_mem : all s : Self, all v : Val,
                           v << s -> s + v <: s
  proof = by property mem_congr, mem_insert, mem_incl ;
 theorem incl_remove_mem : all s : Self, all v : Val,
                           ~(v << s) -> s <: s - v
  proof = <1>1 assume s : Self, v : Val, hypothesis Hv : ~(v << s),
               prove s <: s - v
           <2>1 assume w : Val, hypothesis Hw : w << s,
                prove w << s - v
            <3>1 prove ~(Val!( = )(w, v)) /\ w << s
             <4>1 prove ~(Val!( = )(w, v))
                  by property mem_congr hypothesis Hv, Hw
             <4>2 prove w << s
                  by hypothesis Hw
             <4>f conclude
            <3>f qed by property mem_remove step <3>1
           <2>f qed by property mem_incl step <2>1
          <1>f conclude ;
 theorem remove_insert : all s : Self, all v : Val,
                         v << s -> s = (s - v) + v
  proof = <1>1 assume s : Self, v : Val, hypothesis Hv : v << s,
               prove s = (s - v) + v
           <2>1 assume w : Val, hypothesis Hw : w << s,
                prove w << (s - v) + v
            <3>1 prove ~(Val!( = )(w, v)) -> w << s - v
                 by property mem_remove hypothesis Hw
            <3>f qed by property mem_insert step <3>1
           <2>2 assume w : Val, hypothesis Hw : w << (s - v) + v,
                prove w << s
            <3>1 prove Val!( = )(w, v) -> w << s
                 by property mem_congr hypothesis Hv
            <3>2 prove w << s - v -> w << s
                 by property mem_remove
            <3>f qed by property mem_insert hypothesis Hw step <3>1, <3>2
           <2>f qed by property eq_incl, mem_incl step <2>1, <2>2
          <1>f qed by step <1>1 ;

 let witness = empty;

end ;;

(* Subsets as Functions ======================================================*)
(* A simple (higher-order) implementation of possiby infinite subsets         *)

species SubsetFun(Val is Superset) =

 inherit Subset(Val) ;

 representation = Val -> basics#bool ;

 let ( << )(v : Val, s : Self) = s(v) ;

 let empty = let empty_in(v : Val) = false in empty_in ;
 proof of mem_empty = assumed
 (* Syntax error of Zenon when trying "by definition of ( << ), empty" *) ;

 let ( + )(s : Self, v : Val) =
  if v << s
  then s
  else let inner(w : Val) = if Val!( = )(w, v) then true else w << s
       in inner ;
 proof of mem_insert = assumed
 (* Syntax error of Zenon when trying "by definition of ( + )" *) ;

 let ( - )(s : Self, v : Val) =
  if v << s
  then let inner(w : Val) = if Val!( = )(w, v) then false else w << s
       in inner
  else s;
 proof of mem_remove = assumed
 (* Syntax error of Zenon when trying "by definition of ( - )" *) ;

 let comp(s : Self) = let inner(v : Val) = basics#( ~~ )(v << s) in inner ;

end ;;

(*============================================================================*)