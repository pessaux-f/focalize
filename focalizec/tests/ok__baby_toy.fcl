use "basics" ;;
open "basics" ;;


(* ******************************************************************* *)
(* Must pass.                                                          *)
(* Nothing very special. Just a bit of everything in any order to make *)
(* a first test ;)                                                     *)
(* ******************************************************************* *)
5 ;;
let x = 42 ;;
let y = "Areuh world" ;;
let id (a) = a ;;
let a2 = id (5) ;;
let a1 = id (true) ;;
id (x) ;;
id (y) ;;
let tuple (x, y) = (x, y) ;;
tuple ((id (x)), id (id (y))) ;;
let rec fact (n) = fact (n) ;;
let swap (x, y) = (y, x) ;;
true ;;
let switch (x, y, z) = if x then y else z ;;
switch (true, "foo") ;;
(* [1; 4] ;; *)

type gros_produit = alias (int * (char * bool * string) * float  * bool) ;;
type t = alias int ;;
type u = alias (t * int) ;;
let bib in u = (5, 6) ;;
type inv_prod ('a, 'b) = alias ('b * 'a) ;;
let doudou in inv_prod (int , string) = ("gee", 42) ;;
type t2 = | A | B ;;
#A ;;
#B ;;
A ;;
B;;

type rec_type =
| RT1 (int)
| RT2 (rec_type)
;;

type rec_type_poly ('a) =
| RT1 ('a)
| RT2 (rec_type_poly ('a))
;;

(* A "diagonal" type to test external manifest abbreviation definitions. *)
type foc_diag ('a) =
  internal alias ('a * 'a)
  external
  | caml -> "('a * 'a)"
  | coq -> "{ fst : 'a ; snd : 'a}"
;;

(* An external record type. *)
type foc_record ('a) =
  internal  { hcode = int ; contents = 'a; }
  external
  | caml -> "'a Focvasives.foc_record"
  | coq -> "Focq.foc_record ['a]"

  and hcode =
  | caml -> "Focvasives.fv_hashing_code"
  | coq -> "Focq.hc"

  and contents =
  | caml -> "Focvasives.fv_contents"
  | coq -> "Focq.conts"
;;
let junk = { hcode = 42 ; contents = "Same same..." } ;;
if true then junk else { hcode = 43 ; contents = "Not same..." } ;;

let a in foc_diag (int) = (1, 4) ;;

type option ('a) = | None | Some ('a) ;;
#None ;;
let u = #None ;;
let uu = None ;;
let uuu = Some (42) ;;
#Some (4) ;;
#Some ("jgjg") ;;
let v = #Some ("kikoo") ;;
let v = #Some (#Some (true)) ;;
type daube ('a, 'b) = | Glop ('a) | Pasglop ('b) ;;
let tsoin = #Glop (5) ;;
let tsointsoin = #Pasglop ("foo") ;;
let tsointsointsoin = Pasglop ("foo") ;;

type record0 = { x0 = int ; y0 = float } ;;
let r0 = { x0 = 5 ; y0 = 5.5 } ;;
type record1 ('a) = { x1 = 'a } ;;
let r1 = { x1 = 5 } ;;
let r2 = { x1 = 5.0 } ;;
let r3 = { x1 = #None } ;;
let r4 = { x1 = #Some ("foo") } ;;
let r5 = { r4 with x1 = None } ;;

let not_b (x) in bool =
   match x with
   | true -> false
   | false -> true
;;

(* Must be mapped onto OCaml's type list. *)
basics#Cons (1, basics#Nil) ;;

species Basic_object =
  let equal (x in Self, y in Self) = true ;
end ;;

type sum = | Couic | Couac ;;

(* Not allowed because methods are not polymorphic ! *)
(*
species TestAbstract =
  rep = sum ;
  sig element : Self ;

  let f (x) = if true then #Couic else element ;
  let g (y) = if true then element else #Couic ;
end ;;
*)

species Toy inherits Basic_object =
  sig ( = ) : Self -> Self -> bool
  ;
  property ``equal is reflexive'' : all x y in Self,
    Self!( = ) (x, x) and
    x = x
  ;
  property equal_symmetric : all x y in Self,
    Self!equal(x, y) -> !equal(y, x)
  ;
  property equal_transitive : all x y z in Self,
    !equal(x, y) -> !equal(y, z) -> !equal(x, z)
  ;
  sig element : Self
  ;
  let different (x, y) = #not_b(!equal(x, y))
  ;

  let faux_different (x) = equal (x, x)
  ;

  theorem same_is_not_different : all x y in Self,
     !different(x, y) <-> ( !equal(x, y))
  proof:
    by definition of different ;

end
;;
