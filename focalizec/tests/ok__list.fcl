use "basics" ;;
open "basics" ;;

(* ***************************************************************** *)
(* Must pass.                                                        *)
(* Example showing how to make lists as species in FoCaL. It also    *)
(* illustrate the need for the extra unit argument to the collection *)
(* generator "collection_create" in case it has no arguments, what   *)
(* would prevent OCaml to generalize the type og this generator. And *)
(* if the type of this generator was not generalized, then once the  *)
(* Int List are done, variables of the generator get instanciated    *)
(* by a somewhat of int, and it is now impossible to create the      *)
(* Bool List.                                                        *)

let print_bool =
   internal bool -> string
   external
   | caml -> {* string_of_bool *}
   | coq -> {* (* [Unsure] *) *}
;;
let ext_nil =
   internal list ('a)
   external
   | caml -> {* [] *}
   | coq -> {* (* [Unsure] *) *}
;;
let ext_cons =
   internal 'a -> list ('a) -> basics#list ('a)
   external
   | caml -> {* (fun e l -> e :: l) *}
   | coq -> {* (* [Unsure] *) *}
;;
let ext_head =
  internal list ('a) -> 'a
  external
  | caml -> {* List.hd *}
  | coq -> {* (* [Unsure] *) *}
;;
let ext_tail =
  internal list ('a) -> list ('a)
  external
  | caml -> {* List.tl *}
  | coq -> {* (* [Unsure] *) *}
;;


species Equalified_object =
  inherit Basic_object ;
  let equal (x : Self, y : Self) : bool = syntactic_equal (x, y) ;
end ;;

species List (E is Basic_object) =
  inherit Equalified_object ;
  signature nil : Self ;
  signature cons : E -> Self -> Self ;
  signature head : Self -> E ;
  signature tail : Self -> Self ;
  let rec map (f, l) =
    if equal (l, nil) then nil
    else
      let h = head (l) in
      let q = tail (l) in
      let h2 = f (h) in
      let q2 = map (f, q) in
      cons (h2, q2) ;
end ;;

species Concrete_list (E is Basic_object) =
  inherit List (E) ;
  representation = basics#list (E) ;
  let nil : Self = ext_nil ;
  let cons (e, l) : Self = ext_cons (e, l) ;
  let head (l : Self) : E = ext_head (l) ;
  let tail (l : Self) : Self = ext_tail (l) ;
end ;;

species Contrete_int =
  inherit Basic_object ;
  representation = basics#int ;
  let print = string_of_int ;
end ;;
collection Int = implement Contrete_int ; end ;;

species Contrete_bool =
  inherit Basic_object ;
  representation = basics#bool ;
  let print = print_bool ;
end ;;
collection Bool = implement Contrete_bool ; end ;;

collection Int_list = implement Concrete_list (Int) ; end ;;
collection Bool_list = implement Concrete_list (Bool) ; end ;;
