open "basics" ;;

(* ***************************************************************** *)
(* Must pass.                                                        *)
(* Example showing how to torture parametrised species. It exhibit   *)
(* various non-trivial cases that must pass and lead to effective    *)
(* OCaml/Coq code. These examples make heavy use of "in", "is"       *)
(* parameters and inheritance to shake the compiler's instanciation  *)
(* of parameters during inheritance.                                 *)


(* *********************************************************************** *)
(* No pass                                                                 *)
(* *********************************************************************** *)
species Base =
  representation = int ;
  let dummy = 1 ;
end ;;

species Imp_pair (S1 is Base) =
  representation = S1 ;
  let myfst (n : Self) : S1 = n ;
end ;;

species Imp_vote (C is Base, P is Imp_pair (C)) =
  representation = int ;
  (* WE EXPECT let local_capteur = capteur _p_P_myfst *)
  let capteur (p1 : P) : C = P!myfst (p1) ;
end ;;


collection Coll_capteur = implement Base ; end ;;

collection Coll_pair = implement Imp_pair (Coll_capteur) ; end ;;
species Sp_int_imp_vote =
  inherit Imp_vote (Coll_capteur, Coll_pair) ;
(* WE EXPECT
   let local_capteur =
     Imp_vote.capteur Coll_pair.effective_collection.Coll_pair.myfst
*)
end ;;
(* *********************************************************************** *)



(* *********************************************************************** *)
(* Pass                                                                    *)
(* *********************************************************************** *)
species Junk =
  signature foo : int ;
end ;;

species Imp_junk =
  inherit Junk ;
  let foo = 6 ;
end ;;

species Test1 (C is Base, A is Junk, B is Imp_pair (C)) =
  inherit Imp_vote (C, B) ;
  (* WE EXPECT let local_bar = bar _p_A_foo in *)
  (* WE EXPECT let local_capteur = Imp_vote.capteur _p_B_myfst in *)
  let bar = A!foo ;
end ;;

species Test2 =
  inherit Test1 (Coll_capteur, Imp_junk, Coll_pair) ;
  (* WE EXPECT let local_bar = Test1.bar Imp_junk.foo *)
  (* WE EXPECT
     let local_capteur =
       Imp_vote.Coll_pair.effective_collection.Coll_pair.myfst *)
end ;;

(* ***** *)
(** Pass *)
species Test3 =
  inherit Test2 ;
  let f = bar ;
  (* WE EXPECT let local_bar = Test1.bar Imp_junk.foo *)
  (* WE EXPECT
     let local_capteur = Imp_vote.capteur
       Coll_pair.effective_collection.Coll_pair.myfst *)
  (* WE EXPECT let local_f = f local_bar *)
end ;;
(* *********************************************************************** *)



species Test4 (P is Base) = representation = int ; let m = P!dummy ; end ;;
species Test5 (A is Base) = inherit Test4 (A) ; let c (x : int) = m ; end ;;




(* *********************************************************************** *)
(* Pass                                                                    *)
(* *********************************************************************** *)
species Sp0 = let m = 5 ; end ;;
species Sp1 = inherit Sp0 ; representation = int ; let n = 5 ; end ;;

species Foo0 (A0 is Sp0) = representation = int ; let v = A0!m ;
  (* WE EXPECT let local_v = v _p_A0_m *)
end ;;

species Foo1 (A1 is Sp1) =
  inherit Foo0 (A1) ;
  let _ignore1 = 5 ;
  (* WE EXPECT let local_v = Foo0.v _p_A1_m *)
end ;;

species Foo2 (A2 is Sp1) =
  inherit Foo1 (A2) ;
   let _ignore2 = 5 ;
  (* WE EXPECT let local_v = Foo0.v _p_A2_m *)
end ;;

species Foo3 (A3 is Sp1, A4 is A3) =
  inherit Foo2 (A4) ;
  let _ignore3 = 5 ;
end ;;
(* *********************************************************************** *)



(*
collection Coll_sp1 implements Sp1 ;;

species Foo1_1 inherits Foo0 (Coll_sp1) =
  let _ignore1 = 5 ;
  (* WE EXPECT let local_v = Foo0.v Coll_sp1.effective_collection.m *)
end ;;


species Foo1_1_1 inherits Foo0 (Sp1) =
  let _ignore1 = 5 ;
  (* WE EXPECT let local_v = Foo0.v Sp0.m. *)
  (* C'est le cas pourri qui montre qu'il faut parfois aller remonter 
     l'héritage de ce par quoi on instancie car la méthode peut avoir été
     elle même héritée ! Comme de Sp0 ici ! *)
end ;;
*)



(* *********************************************************************** *)
(* BROKEN                                                                  *)
(* *********************************************************************** *)
species Nat =
  representation = int ;
  let plus (x : Self, y : Self) : Self = x ;
end ;;

collection CNat = implement Nat ; end ;;

species Bar00 (a in CNat) = representation = basics#int ;
  let m = a ;
  (* WE EXPECT let local_m = m _p_a_a *)
end ;;

species Bar01 (b in CNat) =
  inherit Bar00 (CNat!plus (b, b)) ;
  let _ignore = 7 ;
  (* WE EXPECT
     let local_m = Bar00.m ((CNat.plus _p_b_b _p_b_b)) *)
end ;;

species Bar02 (c in CNat, d in CNat) =
  inherit Bar01 (CNat!plus (c, d)) ;
  let _ignore = 8 ;
  (* WE EXPECT
     local_m = Bar00.m
       ((CNat.effective_collection.CNat.plus
         (CNat.effective_collection.CNat.plus _p_c_c _p_d_d)
         (CNat.effective_collection.CNat.plus _p_c_c _p_d_d))) *)
end ;;

species Bar03 (e in CNat, f in CNat) =
  inherit Bar02 (CNat!plus (e, f), f) ;
  let _ignore = 8 ;
  (* WE EXPECT
     let local_m = Bar00.m
       ((CNat.effective_collection.CNat.plus
         (CNat.effective_collection.CNat.plus
           (CNat.effective_collection.CNat.plus _p_e_e _p_f_f) _p_f_f)
         (CNat.effective_collection.CNat.plus
           (CNat.effective_collection.CNat.plus _p_e_e _p_f_f) _p_f_f))) *)
end ;;
(* *********************************************************************** *)




species Gee0 (A0 is Sp0) = representation = int ; let v = A0!m ; end ;;
species Gee1 (A is Sp0, B is Sp0) = inherit Gee0 (Sp0) ; let _ignore = 7 ;
end ;;
species Gee2 = inherit Gee1 (Sp0, Sp0) ; let _ignore = 7 ; end ;;



(* *********************************************************************** *)
(* Pass                                                                    *)
(* *********************************************************************** *)
species Sp00 = let m = 5 ; end ;;
species Sp01 =
  inherit Sp0 ;
  representation = int ;
  let n = 5 ;
end ;;
species Sp02 =
  representation = int ;
  let p = 5 ;
end ;;

species Foo00 (A0 is Sp00, A00 is Sp02) =
   representation = int ;
   let v = (A0!m, A00!p) ;
  (* WE EXPECT let local_v = Foo00.v _p_A00_p _p_A0_m *)
end ;;

species Foo01 (A1 is Sp01) =
  inherit Foo00 (A1, Sp02) ;
  let _ignore1 = 5 ;
  (* WE EXPECT let local_v = Foo00.v _p_A1_m Sp02.p *)
end ;;
(* *********************************************************************** *)



collection Daube = implement Sp_int_imp_vote ; end  ;;
