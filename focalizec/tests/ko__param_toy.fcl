(* Must fail.
   Test showing non generalized variables escaping a species and their
   instanciations with different types, hence leading to an error. This
   especially show the consequence of the fact that methods are not
   polymorphic. *)

open "basics" ;;

species Basic_obj =
  let equal (x : Self, y) =
    let useless = if true then x else y in
    true ;
end ;;

let id (x) = x ;;

species ArgObject =
  signature element : Self ;

  let give_int (dummy : Self) = 1 ;
  let give_myself (dummy : Self) = !element ;

  let apply_on_whatever (f, x) = f (x) ;
  let apply_on_me (f) = f (!element) ;
end ;;


species ParamToy (P is ArgObject) =
  inherit Basic_obj ;
  let to_int (x : Self) = P!give_int (x) ;
  let get_param (x) = P!give_myself (x) ;
  let a (x : Self) = P!apply_on_whatever (id, P!give_int (x)) ;
  (* Below, fails because of non polymorphism. *)
  let b (x : Self) = P!apply_on_whatever (id, P!give_myself (x)) ;
  let c (x : Self) = P!apply_on_me (id) ;
  let d (x : Self) = P!apply_on_whatever (id, x) ;
end
;;
