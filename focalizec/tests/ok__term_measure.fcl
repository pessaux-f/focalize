use "basics" ;;
open "basics" ;;
use "wellfounded" ;;

theorem zero_inf_one : 0 <0x 1 proof = assumed ;;

theorem abs_basics : all x : int, ((x = 0) \/ (0 <0x x)) -> abs0x (x) = x
proof = assumed ;;


(* let abs (x) = if x = 0 || 0 < x then x else -x ;; *)


species Test_measure =
  let true_gt_false (x : basics#bool) : basics#int =
    match x with
     | true -> 1
     | false -> 0 ;

  let rec f (y : basics#int, z : basics#bool) =
       if z then f (y, false) else y
  termination proof =
    measure true_gt_false on z
    <1>1 assume z : bool,
         hypothesis H: z = true,
	 prove wellfounded#int_wf (true_gt_false (false), true_gt_false (z))
         by definition of true_gt_false, wellfounded#int_wf
            property zero_inf_one hypothesis H
    <1>2 conclude
  ;
end ;;


(*
species Test_measure =
  let true_gt_false (x : basics#bool) : basics#int =
    match x with
     | true -> 1
     | false -> 0 ;

  let rec f (y : basics#int, z : basics#bool) =
       if z then f (y, false) else y
  termination proof =
    measure true_gt_false on z
    <1>1 assume z : bool,
         assume H: z = true,
	 prove wellfounded#int_wf (true_gt_false (false), true_gt_false (z))
         by definition of true_gt_false, wellfounded#int_wf
            theorem zero_inf_one
            hypothesis H
    <1>2 conclude
  ;

  order f_order = TUPLE_ORDER ((_, x), MEASURE_ORDER (true_gt_false));

  sig f_order : int * bool -> int * bool -> bool ;
  property f_order_wf : all P in int * bool -> Prop,
     (all z in int * bool, (all t in int * bool, f_order (t, z) -> P (t)) -> P (z)) -> all z in int * bool, P (z)

  property decrease_f : all x in basics#int, all y in basics#bool,
      f_order ((x, false), (x, y))
  ;
end ;;
*)

(*
type order_t =
 | Onat
 | Oint
 | Ostring
 | Obool
 | Otuple (int * int * order_t)  (* tuple length, indice in the tuple, ... *)
 | Olexico (int * list (int, order_t))  (* tuple length, ... *)
 | Omeasure (Parsetree.Vlident)  (* Function name. *)
;;
*)
