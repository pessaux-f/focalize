(* Must pass.
 Example showing the need of the final re-organization of methods due to the
 collapsing-procedure of properties and "proof of"s. *)


open "basics" ;;

species Closed_A =
  representation = basics#int ;
  let ( = ) (x : Self, y : Self) = syntactic_equal (x, y) ;
  let element = 1 ;

  property refl : all x : Self, x = x ;
  proof of refl = assumed ;
end ;;


species A =
  signature ( = ) : Self -> Self -> bool ;
  signature element : Self ;

  property refl : all x : Self, x = x ;
end ;;

species B =
  inherit A ;
  theorem lemme_bidon : true
  proof = assumed ;
end ;;

species Closed_C =
  inherit B ;
  representation = basics#int ;
  let ( = ) (x : Self, y : Self) = basics#syntactic_equal (x, y) ;
  let element = 1 ;

  (* lemme_bidon must then appear BEFORE refl ! *)
  proof of refl =
  <1>1 assume x : Self,
       prove true
       by property lemme_bidon
  <1>2 qed assumed ;
end ;;

collection Daube = implement Closed_C ; end ;;
