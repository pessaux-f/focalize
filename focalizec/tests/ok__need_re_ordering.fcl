use "basics" ;;
open "basics" ;;


(* ******************************************************************** *)
(* Must pass.                                                           *)
(* Example showing the need of the final re-organization of methods due *)
(* to the collapsing-procedure of properties and "proof of"s.           *)
(* ******************************************************************** *)
species Closed_A =
  rep = basics#int ;
  let ( = ) (x in Self, y in Self) = basics#base_eq (x, y) ;
  let element = 1 ;

  property refl : all x in Self, x = x ;
  proof of refl = assumed {* For a test, I won't make proofs !!! *} ;
end ;;


species A =
  signature ( = ) : Self -> Self -> bool ;
  signature element : Self ;

  property refl : all x in Self, x = x ;
end ;;

species B inherits A =
  theorem lemme_bidon : all x in Self, true
  proof : assumed {* For a test, I won't make proofs !!! *} ;
end ;;

species Closed_C inherits B =
  rep = basics#int ;
  let ( = ) (x in Self, y in Self) = basics#base_eq (x, y) ;
  let element = 1 ;

  let rec a (x) = let foo = b (1) in 1
  and b (x) = let foo = a (1) in 1 ;

  (* lemme_bidon must then appear BEFORE refl ! *)
  proof of refl = by definition of lemme_bidon ;
end ;;

collection Daube implements Closed_C ;;
