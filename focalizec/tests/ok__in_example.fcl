use "basics" ;;
open "basics" ;;


species Bla =
  signature equal : Self -> Self -> bool ;
  property equal_reflexive : all x : Self, !equal (x, x) ;
  theorem equal_reflexive2 : all x : Self, !equal (x, x)
    proof = assumed ;
end ;;


(* ****************************************************************** *)
(* Must pass.                                                         *)
(* Example showing how now use the "in" parameter whithout allowing   *)
(* their type to be a "ml type". Now, "in" parameters are always of a *)
(* species (collection more accurately) type !                        *)
(* ****************************************************************** *)
species IntModel =
  inherit Basic_object ;
  representation = basics#int ;
  let un : Self = 1 ;
  let modulo (a, b) = if true then a else (if false then b else un) ;
end ;;


species Me (Naturals is IntModel, n in Naturals) =
  representation = Naturals ;

 theorem daube : all x : Self,
    basics#syntactic_equal (n, Naturals!un)
  proof = assumed ;

  let junk (x : Self) : int = 1 ;

  let reduce (x : Naturals) : Self =
    Naturals!modulo (x, n) ;
end ;;

collection ConcreteInt = implement IntModel ; end ;;
collection ConcreteMe = implement Me (ConcreteInt, ConcreteInt!un) ; end ;;

(* FAIT FAIRE assert failed dans types.ml !
   species ConcreteInt inherits IntModel = end ;; *)


let n = ConcreteInt!un ;;
