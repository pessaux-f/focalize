use "basics" ;;
(*
species A =
  let rec x1 (x) = let foo = y1 (1) in (1)
  and y1 (x) = let foo = x1 (1) in 1 ;
end ;;

species B inherits A =
  let y2 (x) = y1 (x) ;
end ;;

species C inherits B =
  let rec y3 (x) = let foo = y2 (1) in let bar = x2 (1) in 1
  and x2 (x) = let foo = y3 (x) in 1 ;
end ;;
*)
(*
species A =
  sig x : Self ;
  let y = Self!x ;
end ;;

species B =
  sig y : Self ;
  let x = Self!y ;

  let rec z1 (a) = if true then 42 else Self!z2 (if true then a else 1)
  and     z2 (a) = if true then 24 else Self!z1 (if true then a else 1) ;
end ;;

species C inherits A, B =
  rep = basics#int ;
end ;;
*)


species Foo =
  let rec a(x) = b(x)
  and b(x) = a(x) ;
end ;;

species Bar inherits Foo =
  let rec a(x) = c(x)
  and c(x) = a(x) ;
end ;;

species A =
 sig y2 : basics#unit -> basics#unit ;

 let y1 (v) = y2 (v) ;
 let x1 (v) = y1 (v) ;
end ;;

species B inherits A =
  sig y4 : basics#unit -> basics#unit ;

  let y3 (v) = y4 (v) ;
  let y2 (v) = y3 (v) ;
end ;;

species C inherits B =
  let rec x2 (v) = y4 (v)
  and y4 (v) = x2 (v) ;
end ;;

