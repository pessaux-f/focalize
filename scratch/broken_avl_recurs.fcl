open "basics";;

type arbre =
| Feuille(int)
| ANoeud(arbre, arbre, int)
;;

type intt =
| MInf
| PInf
| Entier(int)
;;

species Avl =
  representation = int;

  let rec tree_size(a) =
    match a with
    | #Feuille(_) -> 1
    | #ANoeud(a1, a2, _) ->
        1 + (!tree_size(a1) + !tree_size(a2));

  let intt_leq(i1, i2) =
    match i1 with
    | #MInf -> true
    | #PInf -> false
    | #Entier(iii) ->
        match i2 with
        | #MInf -> false
        | #PInf -> true
        | #Entier(iiii) ->
            iii <=0x iiii;

  let is_ok(a, i1, i2) =
    ( !intt_leq(i1, #Entier(a)) &&
            !intt_leq(#Entier(a), i2));

  let rec ordered_aux(a, i1, i2) =
    match a with
    | #Feuille(ee) -> 
        !is_ok(ee, i1, i2) 
    | #ANoeud(a1, a2, e) ->
        !is_ok(e, i1, i2) &&
        !ordered_aux(a1, i1, #Entier(e)) &&
        !ordered_aux(a2, #Entier(e), i2);

  let rec ordered(a) =
    match a with
    | #Feuille(azzzzz) -> true
    | #ANoeud(a1, a2, e) ->
        !ordered_aux(a1, #MInf, #Entier(e)) &&
        !ordered_aux(a2, #Entier(e), #PInf);

  let max(entier1, entier2) =
    if entier1 <=0x entier2 then
      entier2
    else
      entier1;

  let rec balanced_aux(a) =
    match a with
    | #Feuille(i) -> basics#pair(1, true)
    | #ANoeud(a1, a2, e) ->
        let c2 = !balanced_aux(a2) in
        let c1 = !balanced_aux(a1) in
        let p1 = basics#fst(c1) in
        let p2 = basics#fst(c2) in
        let b1 = basics#snd(c1) in
        let b2 = basics#snd(c2) in
        let diff1 = p1 - p2 in
        let diff2 = p2 - p1 in
        let leq1 = diff1 <=0x 1 in
        let leq2 = diff2 <=0x 1 in
        let tmax = !max(p1, p2) in
        let nmax = tmax + 1 in
        basics#pair(nmax, b1 && b2 && leq1 && leq2);

  let balanced(a) =
    basics#snd(!balanced_aux(a));

  theorem truc :
      all a : arbre,
       (!tree_size(a) >0x 6) -> !ordered(a) -> !balanced(a) -> true
    proof =
      assumed;

  let element1 = 
    #ANoeud(#ANoeud( #Feuille(5), #Feuille(5), -7),
            #ANoeud( #Feuille(5), #Feuille(5), 1), -6);

  let print(x : Self) = basics#string_of_int(x);
  let parse(x : string) : Self = basics#int_of_string(x);
end;;

collection Coll_avl =
  implement Avl;
end;;

(*
let test_balanced_1 = 
  if Coll_avl!balanced(Coll_avl!element1) then
    basics#print_string("Oui\n")
  else
    basics#print_string("Non\n");;
*)

